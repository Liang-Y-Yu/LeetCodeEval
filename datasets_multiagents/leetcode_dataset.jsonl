{"acceptance_rate":0.3741319929879793,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e threeSum(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e threeSum(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def threeSum(self, nums: List[int]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e ThreeSum(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};","lang":"javascript"},{"code":"function threeSum(nums: number[]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func threeSum(_ nums: [Int]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun threeSum(nums: IntArray): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e threeSum(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func threeSum(nums []int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn three_sum(nums: Vec\u003ci32\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (three-sum nums)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec three_sum(Nums :: [integer()]) -\u003e [[integer()]].\nthree_sum(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array nums, return all the triplets \u003ccode\u003e[nums[i], nums[j], nums[k]]\u003c/code\u003e such that \u003ccode\u003ei != j\u003c/code\u003e, \u003ccode\u003ei != k\u003c/code\u003e, and \u003ccode\u003ej != k\u003c/code\u003e, and \u003ccode\u003enums[i] + nums[j] + nums[k] == 0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNotice that the solution set must not contain duplicate triplets.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,0,1,2,-1,-4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[-1,-1,2],[-1,0,1]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only possible triplet does not sum up to 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,0,0]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[0,0,0]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only possible triplet sums up to 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= nums.length \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e5\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":3144,"example_test_cases":"[-1,0,1,2,-1,-4]\n[0,1,1]\n[0,0,0]","frontend_id":"15","id":"15","is_paid_only":false,"likes":33580,"title":"3Sum","title_slug":"3sum","topic_tags":["Array","Two Pointers","Sorting"],"total_accepted":4970840,"total_submissions":13286327,"url":"https://leetcode.com/problems/3sum/"}
{"acceptance_rate":0.5590283194492112,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def addBinary(self, a: str, b: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* addBinary(char* a, char* b) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};","lang":"javascript"},{"code":"function addBinary(a: string, b: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func addBinary(_ a: String, _ b: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}","lang":"dart"},{"code":"func addBinary(a string, b string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn add_binary(a: String, b: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (add-binary a b)\n  (-\u003e string? string? string?)\n  )","lang":"racket"},{"code":"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nadd_binary(A, B) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two binary strings \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e, return \u003cem\u003etheir sum as a binary string\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e a = \"11\", b = \"1\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e \"100\"\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e a = \"1010\", b = \"1011\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e \"10101\"\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= a.length, b.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e consist\u0026nbsp;only of \u003ccode\u003e\u0026#39;0\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003e characters.\u003c/li\u003e\n\t\u003cli\u003eEach string does not contain leading zeros except for the zero itself.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1058,"example_test_cases":"\"11\"\n\"1\"\n\"1010\"\n\"1011\"","frontend_id":"67","id":"67","is_paid_only":false,"likes":10062,"title":"Add Binary","title_slug":"add-binary","topic_tags":["Math","String","Bit Manipulation","Simulation"],"total_accepted":1935081,"total_submissions":3461508,"url":"https://leetcode.com/problems/add-binary/"}
{"acceptance_rate":0.45818652818631533,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e asteroidCollision(vector\u003cint\u003e\u0026 asteroids) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def asteroidCollision(self, asteroids):\n        \"\"\"\n        :type asteroids: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] AsteroidCollision(int[] asteroids) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n    \n};","lang":"javascript"},{"code":"function asteroidCollision(asteroids: number[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $asteroids\n     * @return Integer[]\n     */\n    function asteroidCollision($asteroids) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func asteroidCollision(_ asteroids: [Int]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun asteroidCollision(asteroids: IntArray): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e asteroidCollision(List\u003cint\u003e asteroids) {\n    \n  }\n}","lang":"dart"},{"code":"func asteroidCollision(asteroids []int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} asteroids\n# @return {Integer[]}\ndef asteroid_collision(asteroids)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn asteroid_collision(asteroids: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (asteroid-collision asteroids)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec asteroid_collision(Asteroids :: [integer()]) -\u003e [integer()].\nasteroid_collision(Asteroids) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec asteroid_collision(asteroids :: [integer]) :: [integer]\n  def asteroid_collision(asteroids) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eWe are given an array \u003ccode\u003easteroids\u003c/code\u003e of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.\u003c/p\u003e\n\n\u003cp\u003eFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\u003c/p\u003e\n\n\u003cp\u003eFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e asteroids = [5,10,-5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [5,10]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e asteroids = [8,-8]\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The 8 and -8 collide exploding each other.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e asteroids = [10,2,-5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [10]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= asteroids.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= asteroids[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003easteroids[i] != 0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1266,"example_test_cases":"[5,10,-5]\n[8,-8]\n[10,2,-5]","frontend_id":"735","id":"735","is_paid_only":false,"likes":8854,"title":"Asteroid Collision","title_slug":"asteroid-collision","topic_tags":["Array","Stack","Simulation"],"total_accepted":839433,"total_submissions":1832077,"url":"https://leetcode.com/problems/asteroid-collision/"}
{"acceptance_rate":0.4588988381558499,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int calculate(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def calculate(self, s: str) -\u003e int:\n        ","lang":"python3"},{"code":"int calculate(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};","lang":"javascript"},{"code":"function calculate(s: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func calculate(_ s: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int calculate(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func calculate(s string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn calculate(s: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (calculate s)\n  (-\u003e string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec calculate(S :: unicode:unicode_binary()) -\u003e integer().\ncalculate(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec calculate(s :: String.t) :: integer\n  def calculate(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e representing a valid expression, implement a basic calculator to evaluate it, and return \u003cem\u003ethe result of the evaluation\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You are \u003cstrong\u003enot\u003c/strong\u003e allowed to use any built-in function which evaluates strings as mathematical expressions, such as \u003ccode\u003eeval()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;1 + 1\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot; 2-1 + 2 \u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;(1+(4+5+2)-3)+(6+8)\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 23\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 3 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of digits, \u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;-\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e represents a valid expression.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e used as a unary operation (i.e., \u003ccode\u003e\u0026quot;+1\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;+(2 + 3)\u0026quot;\u003c/code\u003e is invalid).\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026#39;-\u0026#39;\u003c/code\u003e could be used as a unary operation (i.e., \u003ccode\u003e\u0026quot;-1\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;-(2 + 3)\u0026quot;\u003c/code\u003e is valid).\u003c/li\u003e\n\t\u003cli\u003eThere will be no two consecutive operators in the input.\u003c/li\u003e\n\t\u003cli\u003eEvery number and running calculation will fit in a signed 32-bit integer.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":540,"example_test_cases":"\"1 + 1\"\n\" 2-1 + 2 \"\n\"(1+(4+5+2)-3)+(6+8)\"","frontend_id":"224","id":"224","is_paid_only":false,"likes":6728,"title":"Basic Calculator","title_slug":"basic-calculator","topic_tags":["Math","String","Stack","Recursion"],"total_accepted":620110,"total_submissions":1351300,"url":"https://leetcode.com/problems/basic-calculator/"}
{"acceptance_rate":0.6980228211868043,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProfit(vector\u003cint\u003e\u0026 prices) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProfit(int* prices, int pricesSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};","lang":"javascript"},{"code":"function maxProfit(prices: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProfit(_ prices: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProfit(List\u003cint\u003e prices) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProfit(prices []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_profit(prices: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-profit prices)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_profit(Prices :: [integer()]) -\u003e integer().\nmax_profit(Prices) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e day.\u003c/p\u003e\n\n\u003cp\u003eOn each day, you may decide to buy and/or sell the stock. You can only hold \u003cstrong\u003eat most one\u003c/strong\u003e share of the stock at any time. However, you can buy it then immediately sell it on the \u003cstrong\u003esame day\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFind and return \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e profit you can achieve\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [7,1,5,3,6,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 7\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [1,2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [7,6,4,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prices[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":2775,"example_test_cases":"[7,1,5,3,6,4]\n[1,2,3,4,5]\n[7,6,4,3,1]","frontend_id":"122","id":"122","is_paid_only":false,"likes":14723,"title":"Best Time to Buy and Sell Stock II","title_slug":"best-time-to-buy-and-sell-stock-ii","topic_tags":["Array","Dynamic Programming","Greedy"],"total_accepted":2640420,"total_submissions":3782713,"url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/"}
{"acceptance_rate":0.5171044198428654,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProfit(vector\u003cint\u003e\u0026 prices) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProfit(int* prices, int pricesSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};","lang":"javascript"},{"code":"function maxProfit(prices: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProfit(_ prices: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProfit(List\u003cint\u003e prices) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProfit(prices []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_profit(prices: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-profit prices)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_profit(Prices :: [integer()]) -\u003e integer().\nmax_profit(Prices) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e day.\u003c/p\u003e\n\n\u003cp\u003eFind the maximum profit you can achieve. You may complete \u003cstrong\u003eat most two transactions\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [3,3,5,0,0,3,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [1,2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [7,6,4,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this case, no transaction is done, i.e. max profit = 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prices[i] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":215,"example_test_cases":"[3,3,5,0,0,3,1,4]\n[1,2,3,4,5]\n[7,6,4,3,1]","frontend_id":"123","id":"123","is_paid_only":false,"likes":10275,"title":"Best Time to Buy and Sell Stock III","title_slug":"best-time-to-buy-and-sell-stock-iii","topic_tags":["Array","Dynamic Programming"],"total_accepted":826987,"total_submissions":1599265,"url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/"}
{"acceptance_rate":0.4779159371411618,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProfit(int k, vector\u003cint\u003e\u0026 prices) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProfit(int k, int[] prices) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProfit(int k, int* prices, int pricesSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProfit(int k, int[] prices) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n    \n};","lang":"javascript"},{"code":"function maxProfit(k: number, prices: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($k, $prices) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProfit(_ k: Int, _ prices: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProfit(k: Int, prices: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProfit(int k, List\u003cint\u003e prices) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProfit(k int, prices []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} k\n# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(k, prices)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_profit(k: i32, prices: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-profit k prices)\n  (-\u003e exact-integer? (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_profit(K :: integer(), Prices :: [integer()]) -\u003e integer().\nmax_profit(K, Prices) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_profit(k :: integer, prices :: [integer]) :: integer\n  def max_profit(k, prices) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e day, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFind the maximum profit you can achieve. You may complete at most \u003ccode\u003ek\u003c/code\u003e transactions: i.e. you may buy at most \u003ccode\u003ek\u003c/code\u003e times and sell at most \u003ccode\u003ek\u003c/code\u003e times.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 2, prices = [2,4,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 2, prices = [3,2,6,5,0,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 7\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prices[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":218,"example_test_cases":"2\n[2,4,1]\n2\n[3,2,6,5,0,3]","frontend_id":"188","id":"188","is_paid_only":false,"likes":7810,"title":"Best Time to Buy and Sell Stock IV","title_slug":"best-time-to-buy-and-sell-stock-iv","topic_tags":["Array","Dynamic Programming"],"total_accepted":621804,"total_submissions":1301074,"url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/"}
{"acceptance_rate":0.7089514123913275,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProfit(vector\u003cint\u003e\u0026 prices, int fee) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProfit(int[] prices, int fee) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProfit(self, prices: List[int], fee: int) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProfit(int* prices, int pricesSize, int fee) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProfit(int[] prices, int fee) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\nvar maxProfit = function(prices, fee) {\n    \n};","lang":"javascript"},{"code":"function maxProfit(prices: number[], fee: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @param Integer $fee\n     * @return Integer\n     */\n    function maxProfit($prices, $fee) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProfit(_ prices: [Int], _ fee: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProfit(prices: IntArray, fee: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProfit(List\u003cint\u003e prices, int fee) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProfit(prices []int, fee int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} prices\n# @param {Integer} fee\n# @return {Integer}\ndef max_profit(prices, fee)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProfit(prices: Array[Int], fee: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_profit(prices: Vec\u003ci32\u003e, fee: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-profit prices fee)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_profit(Prices :: [integer()], Fee :: integer()) -\u003e integer().\nmax_profit(Prices, Fee) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_profit(prices :: [integer], fee :: integer) :: integer\n  def max_profit(prices, fee) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e day, and an integer \u003ccode\u003efee\u003c/code\u003e representing a transaction fee.\u003c/p\u003e\n\n\u003cp\u003eFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eYou may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\u003c/li\u003e\n\t\u003cli\u003eThe transaction fee is only charged once for each stock purchase and sale.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [1,3,2,8,4,9], fee = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 8\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [1,3,7,5,10,3], fee = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices.length \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices[i] \u0026lt; 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= fee \u0026lt; 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":226,"example_test_cases":"[1,3,2,8,4,9]\n2\n[1,3,7,5,10,3]\n3","frontend_id":"714","id":"714","is_paid_only":false,"likes":7457,"title":"Best Time to Buy and Sell Stock with Transaction Fee","title_slug":"best-time-to-buy-and-sell-stock-with-transaction-fee","topic_tags":["Array","Dynamic Programming","Greedy"],"total_accepted":505264,"total_submissions":712692,"url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/"}
{"acceptance_rate":0.5552417023354691,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProfit(vector\u003cint\u003e\u0026 prices) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProfit(int* prices, int pricesSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};","lang":"javascript"},{"code":"function maxProfit(prices: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProfit(_ prices: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProfit(List\u003cint\u003e prices) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProfit(prices []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_profit(prices: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-profit prices)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_profit(Prices :: [integer()]) -\u003e integer().\nmax_profit(Prices) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array \u003ccode\u003eprices\u003c/code\u003e where \u003ccode\u003eprices[i]\u003c/code\u003e is the price of a given stock on the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e day.\u003c/p\u003e\n\n\u003cp\u003eYou want to maximize your profit by choosing a \u003cstrong\u003esingle day\u003c/strong\u003e to buy one stock and choosing a \u003cstrong\u003edifferent day in the future\u003c/strong\u003e to sell that stock.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe maximum profit you can achieve from this transaction\u003c/em\u003e. If you cannot achieve any profit, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [7,1,5,3,6,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e prices = [7,6,4,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this case, no transactions are done and the max profit = 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= prices.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prices[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1315,"example_test_cases":"[7,1,5,3,6,4]\n[7,6,4,3,1]","frontend_id":"121","id":"121","is_paid_only":false,"likes":33815,"title":"Best Time to Buy and Sell Stock","title_slug":"best-time-to-buy-and-sell-stock","topic_tags":["Array","Dynamic Programming"],"total_accepted":6735405,"total_submissions":12130582,"url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"}
{"acceptance_rate":0.4797061601384269,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int rangeBitwiseAnd(int left, int right) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int rangeBitwiseAnd(int left, int right) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def rangeBitwiseAnd(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -\u003e int:\n        ","lang":"python3"},{"code":"int rangeBitwiseAnd(int left, int right) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int RangeBitwiseAnd(int left, int right) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeBitwiseAnd = function(left, right) {\n    \n};","lang":"javascript"},{"code":"function rangeBitwiseAnd(left: number, right: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function rangeBitwiseAnd($left, $right) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func rangeBitwiseAnd(_ left: Int, _ right: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun rangeBitwiseAnd(left: Int, right: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int rangeBitwiseAnd(int left, int right) {\n    \n  }\n}","lang":"dart"},{"code":"func rangeBitwiseAnd(left int, right int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef range_bitwise_and(left, right)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def rangeBitwiseAnd(left: Int, right: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn range_bitwise_and(left: i32, right: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (range-bitwise-and left right)\n  (-\u003e exact-integer? exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec range_bitwise_and(Left :: integer(), Right :: integer()) -\u003e integer().\nrange_bitwise_and(Left, Right) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec range_bitwise_and(left :: integer, right :: integer) :: integer\n  def range_bitwise_and(left, right) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two integers \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e that represent the range \u003ccode\u003e[left, right]\u003c/code\u003e, return \u003cem\u003ethe bitwise AND of all numbers in this range, inclusive\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e left = 5, right = 7\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e left = 0, right = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e left = 1, right = 2147483647\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= left \u0026lt;= right \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":315,"example_test_cases":"5\n7\n0\n0\n1\n2147483647","frontend_id":"201","id":"201","is_paid_only":false,"likes":4185,"title":"Bitwise AND of Numbers Range","title_slug":"bitwise-and-of-numbers-range","topic_tags":["Bit Manipulation"],"total_accepted":468801,"total_submissions":977267,"url":"https://leetcode.com/problems/bitwise-and-of-numbers-range/"}
{"acceptance_rate":0.2893273118708932,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canPlaceFlowers(vector\u003cint\u003e\u0026 flowerbed, int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canPlaceFlowers(self, flowerbed, n):\n        \"\"\"\n        :type flowerbed: List[int]\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} flowerbed\n * @param {number} n\n * @return {boolean}\n */\nvar canPlaceFlowers = function(flowerbed, n) {\n    \n};","lang":"javascript"},{"code":"function canPlaceFlowers(flowerbed: number[], n: number): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $flowerbed\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canPlaceFlowers($flowerbed, $n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canPlaceFlowers(List\u003cint\u003e flowerbed, int n) {\n    \n  }\n}","lang":"dart"},{"code":"func canPlaceFlowers(flowerbed []int, n int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} flowerbed\n# @param {Integer} n\n# @return {Boolean}\ndef can_place_flowers(flowerbed, n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_place_flowers(flowerbed: Vec\u003ci32\u003e, n: i32) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-place-flowers flowerbed n)\n  (-\u003e (listof exact-integer?) exact-integer? boolean?)\n  )","lang":"racket"},{"code":"-spec can_place_flowers(Flowerbed :: [integer()], N :: integer()) -\u003e boolean().\ncan_place_flowers(Flowerbed, N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_place_flowers(flowerbed :: [integer], n :: integer) :: boolean\n  def can_place_flowers(flowerbed, n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in \u003cstrong\u003eadjacent\u003c/strong\u003e plots.\u003c/p\u003e\n\n\u003cp\u003eGiven an integer array \u003ccode\u003eflowerbed\u003c/code\u003e containing \u003ccode\u003e0\u003c/code\u003e\u0026#39;s and \u003ccode\u003e1\u003c/code\u003e\u0026#39;s, where \u003ccode\u003e0\u003c/code\u003e means empty and \u003ccode\u003e1\u003c/code\u003e means not empty, and an integer \u003ccode\u003en\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u0026nbsp;\u003cem\u003eif\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e \u003cem\u003enew flowers can be planted in the\u003c/em\u003e \u003ccode\u003eflowerbed\u003c/code\u003e \u003cem\u003ewithout violating the no-adjacent-flowers rule and\u003c/em\u003e \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eotherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e flowerbed = [1,0,0,0,1], n = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e flowerbed = [1,0,0,0,1], n = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= flowerbed.length \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eflowerbed[i]\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThere are no two adjacent flowers in \u003ccode\u003eflowerbed\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= n \u0026lt;= flowerbed.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1293,"example_test_cases":"[1,0,0,0,1]\n1\n[1,0,0,0,1]\n2","frontend_id":"605","id":"605","is_paid_only":false,"likes":7118,"title":"Can Place Flowers","title_slug":"can-place-flowers","topic_tags":["Array","Greedy"],"total_accepted":1223080,"total_submissions":4227323,"url":"https://leetcode.com/problems/can-place-flowers/"}
{"acceptance_rate":0.47038665206604136,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int candy(vector\u003cint\u003e\u0026 ratings) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int candy(int* ratings, int ratingsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Candy(int[] ratings) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function(ratings) {\n    \n};","lang":"javascript"},{"code":"function candy(ratings: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $ratings\n     * @return Integer\n     */\n    function candy($ratings) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func candy(_ ratings: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun candy(ratings: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int candy(List\u003cint\u003e ratings) {\n    \n  }\n}","lang":"dart"},{"code":"func candy(ratings []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} ratings\n# @return {Integer}\ndef candy(ratings)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def candy(ratings: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn candy(ratings: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (candy ratings)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec candy(Ratings :: [integer()]) -\u003e integer().\ncandy(Ratings) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec candy(ratings :: [integer]) :: integer\n  def candy(ratings) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e children standing in a line. Each child is assigned a rating value given in the integer array \u003ccode\u003eratings\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are giving candies to these children subjected to the following requirements:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEach child must have at least one candy.\u003c/li\u003e\n\t\u003cli\u003eChildren with a higher rating get more candies than their neighbors.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe minimum number of candies you need to have to distribute the candies to the children\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e ratings = [1,0,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e ratings = [1,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == ratings.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= ratings[i] \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":812,"example_test_cases":"[1,0,2]\n[1,2,2]","frontend_id":"135","id":"135","is_paid_only":false,"likes":8916,"title":"Candy","title_slug":"candy","topic_tags":["Array","Greedy"],"total_accepted":889186,"total_submissions":1890330,"url":"https://leetcode.com/problems/candy/"}
{"acceptance_rate":0.5362939485811788,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def climbStairs(self, n: int) -\u003e int:\n        ","lang":"python3"},{"code":"int climbStairs(int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};","lang":"javascript"},{"code":"function climbStairs(n: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func climbStairs(_ n: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int climbStairs(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func climbStairs(n int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn climb_stairs(n: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (climb-stairs n)\n  (-\u003e exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec climb_stairs(N :: integer()) -\u003e integer().\nclimb_stairs(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are climbing a staircase. It takes \u003ccode\u003en\u003c/code\u003e steps to reach the top.\u003c/p\u003e\n\n\u003cp\u003eEach time you can either climb \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e2\u003c/code\u003e steps. In how many distinct ways can you climb to the top?\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 45\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":978,"example_test_cases":"2\n3","frontend_id":"70","id":"70","is_paid_only":false,"likes":23495,"title":"Climbing Stairs","title_slug":"climbing-stairs","topic_tags":["Math","Dynamic Programming","Memoization"],"total_accepted":4415004,"total_submissions":8232433,"url":"https://leetcode.com/problems/climbing-stairs/"}
{"acceptance_rate":0.4687979857695229,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int coinChange(vector\u003cint\u003e\u0026 coins, int amount) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def coinChange(self, coins, amount):\n        \"\"\"\n        :type coins: List[int]\n        :type amount: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def coinChange(self, coins: List[int], amount: int) -\u003e int:\n        ","lang":"python3"},{"code":"int coinChange(int* coins, int coinsSize, int amount) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int CoinChange(int[] coins, int amount) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function(coins, amount) {\n    \n};","lang":"javascript"},{"code":"function coinChange(coins: number[], amount: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $amount\n     * @return Integer\n     */\n    function coinChange($coins, $amount) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func coinChange(_ coins: [Int], _ amount: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun coinChange(coins: IntArray, amount: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int coinChange(List\u003cint\u003e coins, int amount) {\n    \n  }\n}","lang":"dart"},{"code":"func coinChange(coins []int, amount int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} coins\n# @param {Integer} amount\n# @return {Integer}\ndef coin_change(coins, amount)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def coinChange(coins: Array[Int], amount: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn coin_change(coins: Vec\u003ci32\u003e, amount: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (coin-change coins amount)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec coin_change(Coins :: [integer()], Amount :: integer()) -\u003e integer().\ncoin_change(Coins, Amount) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec coin_change(coins :: [integer], amount :: integer) :: integer\n  def coin_change(coins, amount) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003ecoins\u003c/code\u003e representing coins of different denominations and an integer \u003ccode\u003eamount\u003c/code\u003e representing a total amount of money.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe fewest number of coins that you need to make up that amount\u003c/em\u003e. If that amount of money cannot be made up by any combination of the coins, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may assume that you have an infinite number of each kind of coin.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e coins = [1,2,5], amount = 11\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 11 = 5 + 5 + 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e coins = [2], amount = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e coins = [1], amount = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= coins.length \u0026lt;= 12\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= coins[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= amount \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":514,"example_test_cases":"[1,2,5]\n11\n[2]\n3\n[1]\n0","frontend_id":"322","id":"322","is_paid_only":false,"likes":20164,"title":"Coin Change","title_slug":"coin-change","topic_tags":["Array","Dynamic Programming","Breadth-First Search"],"total_accepted":2450318,"total_submissions":5226810,"url":"https://leetcode.com/problems/coin-change/"}
{"acceptance_rate":0.7217254970186132,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e combinationSum3(int k, int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e combinationSum3(int k, int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def combinationSum3(self, k: int, n: int) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum3(int k, int n, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e CombinationSum3(int k, int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n    \n};","lang":"javascript"},{"code":"function combinationSum3(k: number, n: number): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function combinationSum3($k, $n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun combinationSum3(k: Int, n: Int): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e combinationSum3(int k, int n) {\n    \n  }\n}","lang":"dart"},{"code":"func combinationSum3(k int, n int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} k\n# @param {Integer} n\n# @return {Integer[][]}\ndef combination_sum3(k, n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn combination_sum3(k: i32, n: i32) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (combination-sum3 k n)\n  (-\u003e exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec combination_sum3(K :: integer(), N :: integer()) -\u003e [[integer()]].\ncombination_sum3(K, N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec combination_sum3(k :: integer, n :: integer) :: [[integer]]\n  def combination_sum3(k, n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eFind all valid combinations of \u003ccode\u003ek\u003c/code\u003e numbers that sum up to \u003ccode\u003en\u003c/code\u003e such that the following conditions are true:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eOnly numbers \u003ccode\u003e1\u003c/code\u003e through \u003ccode\u003e9\u003c/code\u003e are used.\u003c/li\u003e\n\t\u003cli\u003eEach number is used \u003cstrong\u003eat most once\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea list of all possible valid combinations\u003c/em\u003e. The list must not contain the same combination twice, and the combinations may be returned in any order.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 3, n = 7\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,4]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n1 + 2 + 4 = 7\nThere are no other valid combinations.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 3, n = 9\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,6],[1,3,5],[2,3,4]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 4, n = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 \u0026gt; 1, there are no valid combination.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= k \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 60\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":119,"example_test_cases":"3\n7\n3\n9\n4\n1","frontend_id":"216","id":"216","is_paid_only":false,"likes":6420,"title":"Combination Sum III","title_slug":"combination-sum-iii","topic_tags":["Array","Backtracking"],"total_accepted":696940,"total_submissions":965658,"url":"https://leetcode.com/problems/combination-sum-iii/"}
{"acceptance_rate":0.7505634551174405,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e combinationSum(vector\u003cint\u003e\u0026 candidates, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e combinationSum(int[] candidates, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e CombinationSum(int[] candidates, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    \n};","lang":"javascript"},{"code":"function combinationSum(candidates: number[], target: number): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum($candidates, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun combinationSum(candidates: IntArray, target: Int): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e combinationSum(List\u003cint\u003e candidates, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func combinationSum(candidates []int, target int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum(candidates, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn combination_sum(candidates: Vec\u003ci32\u003e, target: i32) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (combination-sum candidates target)\n  (-\u003e (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec combination_sum(Candidates :: [integer()], Target :: integer()) -\u003e [[integer()]].\ncombination_sum(Candidates, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum(candidates, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of \u003cstrong\u003edistinct\u003c/strong\u003e integers \u003ccode\u003ecandidates\u003c/code\u003e and a target integer \u003ccode\u003etarget\u003c/code\u003e, return \u003cem\u003ea list of all \u003cstrong\u003eunique combinations\u003c/strong\u003e of \u003c/em\u003e\u003ccode\u003ecandidates\u003c/code\u003e\u003cem\u003e where the chosen numbers sum to \u003c/em\u003e\u003ccode\u003etarget\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e You may return the combinations in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003esame\u003c/strong\u003e number may be chosen from \u003ccode\u003ecandidates\u003c/code\u003e an \u003cstrong\u003eunlimited number of times\u003c/strong\u003e. Two combinations are unique if the \u003cspan data-keyword=\"frequency-array\"\u003efrequency\u003c/span\u003e of at least one of the chosen numbers is different.\u003c/p\u003e\n\n\u003cp\u003eThe test cases are generated such that the number of unique combinations that sum up to \u003ccode\u003etarget\u003c/code\u003e is less than \u003ccode\u003e150\u003c/code\u003e combinations for the given input.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candidates = [2,3,6,7], target = 7\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[2,2,3],[7]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candidates = [2,3,5], target = 8\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[2,2,2,2],[2,3,3],[3,5]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candidates = [2], target = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= candidates.length \u0026lt;= 30\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= candidates[i] \u0026lt;= 40\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll elements of \u003ccode\u003ecandidates\u003c/code\u003e are \u003cstrong\u003edistinct\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= target \u0026lt;= 40\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":489,"example_test_cases":"[2,3,6,7]\n7\n[2,3,5]\n8\n[2]\n1","frontend_id":"39","id":"39","is_paid_only":false,"likes":20162,"title":"Combination Sum","title_slug":"combination-sum","topic_tags":["Array","Backtracking"],"total_accepted":2675469,"total_submissions":3564614,"url":"https://leetcode.com/problems/combination-sum/"}
{"acceptance_rate":0.7322042810370164,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e combine(int n, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e combine(int n, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def combine(self, n: int, k: int) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e Combine(int n, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};","lang":"javascript"},{"code":"function combine(n: number, k: number): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func combine(_ n: Int, _ k: Int) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun combine(n: Int, k: Int): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e combine(int n, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func combine(n int, k int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn combine(n: i32, k: i32) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (combine n k)\n  (-\u003e exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec combine(N :: integer(), K :: integer()) -\u003e [[integer()]].\ncombine(N, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec combine(n :: integer, k :: integer) :: [[integer]]\n  def combine(n, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two integers \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003eall possible combinations of\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003enumbers chosen from the range\u003c/em\u003e \u003ccode\u003e[1, n]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 4, k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 1, k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is 1 choose 1 = 1 total combination.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":241,"example_test_cases":"4\n2\n1\n1","frontend_id":"77","id":"77","is_paid_only":false,"likes":8665,"title":"Combinations","title_slug":"combinations","topic_tags":["Backtracking"],"total_accepted":1166933,"total_submissions":1593726,"url":"https://leetcode.com/problems/combinations/"}
{"acceptance_rate":0.49415655009965576,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool containsNearbyDuplicate(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -\u003e bool:\n        ","lang":"python3"},{"code":"bool containsNearbyDuplicate(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function containsNearbyDuplicate(nums: number[], k: number): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool containsNearbyDuplicate(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func containsNearbyDuplicate(nums []int, k int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec\u003ci32\u003e, k: i32) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (contains-nearby-duplicate nums k)\n  (-\u003e (listof exact-integer?) exact-integer? boolean?)\n  )","lang":"racket"},{"code":"-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -\u003e boolean().\ncontains_nearby_duplicate(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\n  def contains_nearby_duplicate(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif there are two \u003cstrong\u003edistinct indices\u003c/strong\u003e \u003c/em\u003e\u003ccode\u003ei\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003ej\u003c/code\u003e\u003cem\u003e in the array such that \u003c/em\u003e\u003ccode\u003enums[i] == nums[j]\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003eabs(i - j) \u0026lt;= k\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,1], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,0,1,1], k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,1,2,3], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":3249,"example_test_cases":"[1,2,3,1]\n3\n[1,0,1,1]\n1\n[1,2,3,1,2,3]\n2","frontend_id":"219","id":"219","is_paid_only":false,"likes":6903,"title":"Contains Duplicate II","title_slug":"contains-duplicate-ii","topic_tags":["Array","Hash Table","Sliding Window"],"total_accepted":1439988,"total_submissions":2914032,"url":"https://leetcode.com/problems/contains-duplicate-ii/"}
{"acceptance_rate":0.7989499876064294,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e countBits(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] countBits(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def countBits(self, n: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countBits(int n, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] CountBits(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    \n};","lang":"javascript"},{"code":"function countBits(n: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function countBits($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func countBits(_ n: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun countBits(n: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e countBits(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func countBits(n int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Integer[]}\ndef count_bits(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def countBits(n: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn count_bits(n: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (count-bits n)\n  (-\u003e exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec count_bits(N :: integer()) -\u003e [integer()].\ncount_bits(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec count_bits(n :: integer) :: [integer]\n  def count_bits(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ean array \u003c/em\u003e\u003ccode\u003eans\u003c/code\u003e\u003cem\u003e of length \u003c/em\u003e\u003ccode\u003en + 1\u003c/code\u003e\u003cem\u003e such that for each \u003c/em\u003e\u003ccode\u003ei\u003c/code\u003e\u003cem\u003e \u003c/em\u003e(\u003ccode\u003e0 \u0026lt;= i \u0026lt;= n\u003c/code\u003e)\u003cem\u003e, \u003c/em\u003e\u003ccode\u003eans[i]\u003c/code\u003e\u003cem\u003e is the \u003cstrong\u003enumber of \u003c/strong\u003e\u003c/em\u003e\u003ccode\u003e1\u003c/code\u003e\u003cem\u003e\u003cstrong\u003e\u0026#39;s\u003c/strong\u003e in the binary representation of \u003c/em\u003e\u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1,1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n0 --\u0026gt; 0\n1 --\u0026gt; 1\n2 --\u0026gt; 10\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1,1,2,1,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n0 --\u0026gt; 0\n1 --\u0026gt; 1\n2 --\u0026gt; 10\n3 --\u0026gt; 11\n4 --\u0026gt; 100\n5 --\u0026gt; 101\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIt is very easy to come up with a solution with a runtime of \u003ccode\u003eO(n log n)\u003c/code\u003e. Can you do it in linear time \u003ccode\u003eO(n)\u003c/code\u003e and possibly in a single pass?\u003c/li\u003e\n\t\u003cli\u003eCan you do it without using any built-in function (i.e., like \u003ccode\u003e__builtin_popcount\u003c/code\u003e in C++)?\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":588,"example_test_cases":"2\n5","frontend_id":"338","id":"338","is_paid_only":false,"likes":11622,"title":"Counting Bits","title_slug":"counting-bits","topic_tags":["Dynamic Programming","Bit Manipulation"],"total_accepted":1427897,"total_submissions":1787217,"url":"https://leetcode.com/problems/counting-bits/"}
{"acceptance_rate":0.5383490968115184,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e findOrder(int numCourses, vector\u003cvector\u003cint\u003e\u003e\u0026 prerequisites) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    \n};","lang":"javascript"},{"code":"function findOrder(numCourses: number, prerequisites: number[][]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Integer[]\n     */\n    function findOrder($numCourses, $prerequisites) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findOrder(numCourses: Int, prerequisites: Array\u003cIntArray\u003e): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e findOrder(int numCourses, List\u003cList\u003cint\u003e\u003e prerequisites) {\n    \n  }\n}","lang":"dart"},{"code":"func findOrder(numCourses int, prerequisites [][]int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Integer[]}\ndef find_order(num_courses, prerequisites)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_order(num_courses: i32, prerequisites: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-order numCourses prerequisites)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -\u003e [integer()].\nfind_order(NumCourses, Prerequisites) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\n  def find_order(num_courses, prerequisites) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are a total of \u003ccode\u003enumCourses\u003c/code\u003e courses you have to take, labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003enumCourses - 1\u003c/code\u003e. You are given an array \u003ccode\u003eprerequisites\u003c/code\u003e where \u003ccode\u003eprerequisites[i] = [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that you \u003cstrong\u003emust\u003c/strong\u003e take course \u003ccode\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e first if you want to take course \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, the pair \u003ccode\u003e[0, 1]\u003c/code\u003e, indicates that to take course \u003ccode\u003e0\u003c/code\u003e you have to first take course \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe ordering of courses you should take to finish all courses\u003c/em\u003e. If there are many valid answers, return \u003cstrong\u003eany\u003c/strong\u003e of them. If it is impossible to finish all courses, return \u003cstrong\u003ean empty array\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numCourses = 2, prerequisites = [[1,0]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,2,1,3]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numCourses = 1, prerequisites = []\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= numCourses \u0026lt;= 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prerequisites.length \u0026lt;= numCourses * (numCourses - 1)\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eprerequisites[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e \u0026lt; numCourses\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e != b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the pairs \u003ccode\u003e[a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e are \u003cstrong\u003edistinct\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":371,"example_test_cases":"2\n[[1,0]]\n4\n[[1,0],[2,0],[3,1],[3,2]]\n1\n[]","frontend_id":"210","id":"210","is_paid_only":false,"likes":11532,"title":"Course Schedule II","title_slug":"course-schedule-ii","topic_tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"],"total_accepted":1450706,"total_submissions":2694731,"url":"https://leetcode.com/problems/course-schedule-ii/"}
{"acceptance_rate":0.4965176954511104,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canFinish(int numCourses, vector\u003cvector\u003cint\u003e\u003e\u0026 prerequisites) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */\nvar canFinish = function(numCourses, prerequisites) {\n    \n};","lang":"javascript"},{"code":"function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Boolean\n     */\n    function canFinish($numCourses, $prerequisites) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canFinish(numCourses: Int, prerequisites: Array\u003cIntArray\u003e): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canFinish(int numCourses, List\u003cList\u003cint\u003e\u003e prerequisites) {\n    \n  }\n}","lang":"dart"},{"code":"func canFinish(numCourses int, prerequisites [][]int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Boolean}\ndef can_finish(num_courses, prerequisites)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-finish numCourses prerequisites)\n  (-\u003e exact-integer? (listof (listof exact-integer?)) boolean?)\n  )","lang":"racket"},{"code":"-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -\u003e boolean().\ncan_finish(NumCourses, Prerequisites) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\n  def can_finish(num_courses, prerequisites) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are a total of \u003ccode\u003enumCourses\u003c/code\u003e courses you have to take, labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003enumCourses - 1\u003c/code\u003e. You are given an array \u003ccode\u003eprerequisites\u003c/code\u003e where \u003ccode\u003eprerequisites[i] = [a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e indicates that you \u003cstrong\u003emust\u003c/strong\u003e take course \u003ccode\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e first if you want to take course \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, the pair \u003ccode\u003e[0, 1]\u003c/code\u003e, indicates that to take course \u003ccode\u003e0\u003c/code\u003e you have to first take course \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if you can finish all courses. Otherwise, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numCourses = 2, prerequisites = [[1,0]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numCourses = 2, prerequisites = [[1,0],[0,1]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= numCourses \u0026lt;= 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= prerequisites.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eprerequisites[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e \u0026lt; numCourses\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the pairs prerequisites[i] are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":820,"example_test_cases":"2\n[[1,0]]\n2\n[[1,0],[0,1]]","frontend_id":"207","id":"207","is_paid_only":false,"likes":17332,"title":"Course Schedule","title_slug":"course-schedule","topic_tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"],"total_accepted":2196421,"total_submissions":4423651,"url":"https://leetcode.com/problems/course-schedule/"}
{"acceptance_rate":0.6754858942122021,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e dailyTemperatures(vector\u003cint\u003e\u0026 temperatures) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* temperatures, int temperaturesSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] DailyTemperatures(int[] temperatures) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};","lang":"javascript"},{"code":"function dailyTemperatures(temperatures: number[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $temperatures\n     * @return Integer[]\n     */\n    function dailyTemperatures($temperatures) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func dailyTemperatures(_ temperatures: [Int]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun dailyTemperatures(temperatures: IntArray): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e dailyTemperatures(List\u003cint\u003e temperatures) {\n    \n  }\n}","lang":"dart"},{"code":"func dailyTemperatures(temperatures []int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} temperatures\n# @return {Integer[]}\ndef daily_temperatures(temperatures)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn daily_temperatures(temperatures: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (daily-temperatures temperatures)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec daily_temperatures(Temperatures :: [integer()]) -\u003e [integer()].\ndaily_temperatures(Temperatures) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\n  def daily_temperatures(temperatures) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003etemperatures\u003c/code\u003e represents the daily temperatures, return \u003cem\u003ean array\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e \u003cem\u003esuch that\u003c/em\u003e \u003ccode\u003eanswer[i]\u003c/code\u003e \u003cem\u003eis the number of days you have to wait after the\u003c/em\u003e \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e \u003cem\u003eday to get a warmer temperature\u003c/em\u003e. If there is no future day for which this is possible, keep \u003ccode\u003eanswer[i] == 0\u003c/code\u003e instead.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e temperatures = [73,74,75,71,69,72,76,73]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,4,2,1,1,0,0]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e temperatures = [30,40,50,60]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,1,0]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e temperatures = [30,60,90]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,0]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;=\u0026nbsp;temperatures.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e30 \u0026lt;=\u0026nbsp;temperatures[i] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":356,"example_test_cases":"[73,74,75,71,69,72,76,73]\n[30,40,50,60]\n[30,60,90]","frontend_id":"739","id":"739","is_paid_only":false,"likes":14029,"title":"Daily Temperatures","title_slug":"daily-temperatures","topic_tags":["Array","Stack","Monotonic Stack"],"total_accepted":1384561,"total_submissions":2049726,"url":"https://leetcode.com/problems/daily-temperatures/"}
{"acceptance_rate":0.6140543321911801,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string decodeString(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String decodeString(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def decodeString(self, s: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* decodeString(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string DecodeString(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};","lang":"javascript"},{"code":"function decodeString(s: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func decodeString(_ s: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun decodeString(s: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String decodeString(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func decodeString(s string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String}\ndef decode_string(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn decode_string(s: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (decode-string s)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec decode_string(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\ndecode_string(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec decode_string(s :: String.t) :: String.t\n  def decode_string(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an encoded string, return its decoded string.\u003c/p\u003e\n\n\u003cp\u003eThe encoding rule is: \u003ccode\u003ek[encoded_string]\u003c/code\u003e, where the \u003ccode\u003eencoded_string\u003c/code\u003e inside the square brackets is being repeated exactly \u003ccode\u003ek\u003c/code\u003e times. Note that \u003ccode\u003ek\u003c/code\u003e is guaranteed to be a positive integer.\u003c/p\u003e\n\n\u003cp\u003eYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, \u003ccode\u003ek\u003c/code\u003e. For example, there will not be input like \u003ccode\u003e3a\u003c/code\u003e or \u003ccode\u003e2[4]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe test cases are generated so that the length of the output will never exceed \u003ccode\u003e10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;3[a]2[bc]\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;aaabcbc\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;3[a2[c]]\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;accaccacc\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;2[abc]3[cd]ef\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;abcabccdcdcdef\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 30\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of lowercase English letters, digits, and square brackets \u003ccode\u003e\u0026#39;[]\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e is guaranteed to be \u003cstrong\u003ea valid\u003c/strong\u003e input.\u003c/li\u003e\n\t\u003cli\u003eAll the integers in \u003ccode\u003es\u003c/code\u003e are in the range \u003ccode\u003e[1, 300]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":672,"example_test_cases":"\"3[a]2[bc]\"\n\"3[a2[c]]\"\n\"2[abc]3[cd]ef\"","frontend_id":"394","id":"394","is_paid_only":false,"likes":13498,"title":"Decode String","title_slug":"decode-string","topic_tags":["String","Stack","Recursion"],"total_accepted":1050168,"total_submissions":1710220,"url":"https://leetcode.com/problems/decode-string/"}
{"acceptance_rate":0.541824244247677,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool closeStrings(string word1, string word2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean closeStrings(String word1, String word2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def closeStrings(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def closeStrings(self, word1: str, word2: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool closeStrings(char* word1, char* word2) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CloseStrings(string word1, string word2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {boolean}\n */\nvar closeStrings = function(word1, word2) {\n    \n};","lang":"javascript"},{"code":"function closeStrings(word1: string, word2: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Boolean\n     */\n    function closeStrings($word1, $word2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func closeStrings(_ word1: String, _ word2: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun closeStrings(word1: String, word2: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool closeStrings(String word1, String word2) {\n    \n  }\n}","lang":"dart"},{"code":"func closeStrings(word1 string, word2 string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} word1\n# @param {String} word2\n# @return {Boolean}\ndef close_strings(word1, word2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def closeStrings(word1: String, word2: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn close_strings(word1: String, word2: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (close-strings word1 word2)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec close_strings(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -\u003e boolean().\nclose_strings(Word1, Word2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec close_strings(word1 :: String.t, word2 :: String.t) :: boolean\n  def close_strings(word1, word2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eTwo strings are considered \u003cstrong\u003eclose\u003c/strong\u003e if you can attain one from the other using the following operations:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eOperation 1: Swap any two \u003cstrong\u003eexisting\u003c/strong\u003e characters.\n\n\t\u003cul\u003e\n\t\t\u003cli\u003eFor example, \u003ccode\u003ea\u003cu\u003eb\u003c/u\u003ecd\u003cu\u003ee\u003c/u\u003e -\u0026gt; a\u003cu\u003ee\u003c/u\u003ecd\u003cu\u003eb\u003c/u\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eOperation 2: Transform \u003cstrong\u003eevery\u003c/strong\u003e occurrence of one \u003cstrong\u003eexisting\u003c/strong\u003e character into another \u003cstrong\u003eexisting\u003c/strong\u003e character, and do the same with the other character.\n\t\u003cul\u003e\n\t\t\u003cli\u003eFor example, \u003ccode\u003e\u003cu\u003eaa\u003c/u\u003ec\u003cu\u003eabb\u003c/u\u003e -\u0026gt; \u003cu\u003ebb\u003c/u\u003ec\u003cu\u003ebaa\u003c/u\u003e\u003c/code\u003e (all \u003ccode\u003ea\u003c/code\u003e\u0026#39;s turn into \u003ccode\u003eb\u003c/code\u003e\u0026#39;s, and all \u003ccode\u003eb\u003c/code\u003e\u0026#39;s turn into \u003ccode\u003ea\u003c/code\u003e\u0026#39;s)\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can use the operations on either string as many times as necessary.\u003c/p\u003e\n\n\u003cp\u003eGiven two strings, \u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if \u003c/em\u003e\u003ccode\u003eword1\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003eword2\u003c/code\u003e\u003cem\u003e are \u003cstrong\u003eclose\u003c/strong\u003e, and \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;abc\u0026quot;, word2 = \u0026quot;bca\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You can attain word2 from word1 in 2 operations.\nApply Operation 1: \u0026quot;a\u003cu\u003ebc\u003c/u\u003e\u0026quot; -\u0026gt; \u0026quot;a\u003cu\u003ecb\u003c/u\u003e\u0026quot;\nApply Operation 1: \u0026quot;\u003cu\u003ea\u003c/u\u003ec\u003cu\u003eb\u003c/u\u003e\u0026quot; -\u0026gt; \u0026quot;\u003cu\u003eb\u003c/u\u003ec\u003cu\u003ea\u003c/u\u003e\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;a\u0026quot;, word2 = \u0026quot;aa\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIt is impossible to attain word2 from word1, or vice versa, in any number of operations.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;cabbba\u0026quot;, word2 = \u0026quot;abbccc\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You can attain word2 from word1 in 3 operations.\nApply Operation 1: \u0026quot;ca\u003cu\u003eb\u003c/u\u003ebb\u003cu\u003ea\u003c/u\u003e\u0026quot; -\u0026gt; \u0026quot;ca\u003cu\u003ea\u003c/u\u003ebb\u003cu\u003eb\u003c/u\u003e\u0026quot;\nApply Operation 2: \u0026quot;\u003cu\u003ec\u003c/u\u003eaa\u003cu\u003ebbb\u003c/u\u003e\u0026quot; -\u0026gt; \u0026quot;\u003cu\u003eb\u003c/u\u003eaa\u003cu\u003eccc\u003c/u\u003e\u0026quot;\nApply Operation 2: \u0026quot;\u003cu\u003ebaa\u003c/u\u003eccc\u0026quot; -\u0026gt; \u0026quot;\u003cu\u003eabb\u003c/u\u003eccc\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= word1.length, word2.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e contain only lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":339,"example_test_cases":"\"abc\"\n\"bca\"\n\"a\"\n\"aa\"\n\"cabbba\"\n\"abbccc\"","frontend_id":"1657","id":"1777","is_paid_only":false,"likes":3977,"title":"Determine if Two Strings Are Close","title_slug":"determine-if-two-strings-are-close","topic_tags":["Hash Table","String","Sorting","Counting"],"total_accepted":502445,"total_submissions":927321,"url":"https://leetcode.com/problems/determine-if-two-strings-are-close/"}
{"acceptance_rate":0.49142780120384977,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String predictPartyVictory(String senate) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def predictPartyVictory(self, senate):\n        \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def predictPartyVictory(self, senate: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* predictPartyVictory(char* senate) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string PredictPartyVictory(string senate) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} senate\n * @return {string}\n */\nvar predictPartyVictory = function(senate) {\n    \n};","lang":"javascript"},{"code":"function predictPartyVictory(senate: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $senate\n     * @return String\n     */\n    function predictPartyVictory($senate) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func predictPartyVictory(_ senate: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun predictPartyVictory(senate: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String predictPartyVictory(String senate) {\n    \n  }\n}","lang":"dart"},{"code":"func predictPartyVictory(senate string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} senate\n# @return {String}\ndef predict_party_victory(senate)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def predictPartyVictory(senate: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn predict_party_victory(senate: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (predict-party-victory senate)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec predict_party_victory(Senate :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\npredict_party_victory(Senate) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec predict_party_victory(senate :: String.t) :: String.t\n  def predict_party_victory(senate) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eIn the world of Dota2, there are two parties: the Radiant and the Dire.\u003c/p\u003e\n\n\u003cp\u003eThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise \u003cstrong\u003eone\u003c/strong\u003e of the two rights:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eBan one senator\u0026#39;s right:\u003c/strong\u003e A senator can make another senator lose all his rights in this and all the following rounds.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eAnnounce the victory:\u003c/strong\u003e If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGiven a string \u003ccode\u003esenate\u003c/code\u003e representing each senator\u0026#39;s party belonging. The character \u003ccode\u003e\u0026#39;R\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;D\u0026#39;\u003c/code\u003e represent the Radiant party and the Dire party. Then if there are \u003ccode\u003en\u003c/code\u003e senators, the size of the given string will be \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\u003c/p\u003e\n\n\u003cp\u003eSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \u003ccode\u003e\u0026quot;Radiant\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;Dire\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e senate = \u0026quot;RD\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;Radiant\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nThe first senator comes from Radiant and he can just ban the next senator\u0026#39;s right in round 1. \nAnd the second senator can\u0026#39;t exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e senate = \u0026quot;RDD\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;Dire\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nThe first senator comes from Radiant and he can just ban the next senator\u0026#39;s right in round 1. \nAnd the second senator can\u0026#39;t exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator\u0026#39;s right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == senate.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003esenate[i]\u003c/code\u003e is either \u003ccode\u003e\u0026#39;R\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;D\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":2023,"example_test_cases":"\"RD\"\n\"RDD\"","frontend_id":"649","id":"649","is_paid_only":false,"likes":2645,"title":"Dota2 Senate","title_slug":"dota2-senate","topic_tags":["String","Greedy","Queue"],"total_accepted":244275,"total_submissions":497072,"url":"https://leetcode.com/problems/dota2-senate/"}
{"acceptance_rate":0.5914296911582568,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minDistance(self, word1: str, word2: str) -\u003e int:\n        ","lang":"python3"},{"code":"int minDistance(char* word1, char* word2) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinDistance(string word1, string word2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};","lang":"javascript"},{"code":"function minDistance(word1: string, word2: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minDistance(_ word1: String, _ word2: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minDistance(String word1, String word2) {\n    \n  }\n}","lang":"dart"},{"code":"func minDistance(word1 string, word2 string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_distance(word1: String, word2: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-distance word1 word2)\n  (-\u003e string? string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -\u003e integer().\nmin_distance(Word1, Word2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\n  def min_distance(word1, word2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e, return \u003cem\u003ethe minimum number of operations required to convert \u003ccode\u003eword1\u003c/code\u003e to \u003ccode\u003eword2\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou have the following three operations permitted on a word:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eInsert a character\u003c/li\u003e\n\t\u003cli\u003eDelete a character\u003c/li\u003e\n\t\u003cli\u003eReplace a character\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;horse\u0026quot;, word2 = \u0026quot;ros\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nhorse -\u0026gt; rorse (replace \u0026#39;h\u0026#39; with \u0026#39;r\u0026#39;)\nrorse -\u0026gt; rose (remove \u0026#39;r\u0026#39;)\nrose -\u0026gt; ros (remove \u0026#39;e\u0026#39;)\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;intention\u0026quot;, word2 = \u0026quot;execution\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nintention -\u0026gt; inention (remove \u0026#39;t\u0026#39;)\ninention -\u0026gt; enention (replace \u0026#39;i\u0026#39; with \u0026#39;e\u0026#39;)\nenention -\u0026gt; exention (replace \u0026#39;n\u0026#39; with \u0026#39;x\u0026#39;)\nexention -\u0026gt; exection (replace \u0026#39;n\u0026#39; with \u0026#39;c\u0026#39;)\nexection -\u0026gt; execution (insert \u0026#39;u\u0026#39;)\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= word1.length, word2.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":291,"example_test_cases":"\"horse\"\n\"ros\"\n\"intention\"\n\"execution\"","frontend_id":"72","id":"72","is_paid_only":false,"likes":15836,"title":"Edit Distance","title_slug":"edit-distance","topic_tags":["String","Dynamic Programming"],"total_accepted":1223891,"total_submissions":2069377,"url":"https://leetcode.com/problems/edit-distance/"}
{"acceptance_rate":0.6334580782117917,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cdouble\u003e calcEquation(vector\u003cvector\u003cstring\u003e\u003e\u0026 equations, vector\u003cdouble\u003e\u0026 values, vector\u003cvector\u003cstring\u003e\u003e\u0026 queries) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public double[] calcEquation(List\u003cList\u003cString\u003e\u003e equations, double[] values, List\u003cList\u003cString\u003e\u003e queries) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def calcEquation(self, equations, values, queries):\n        \"\"\"\n        :type equations: List[List[str]]\n        :type values: List[float]\n        :type queries: List[List[str]]\n        :rtype: List[float]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -\u003e List[float]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* calcEquation(char*** equations, int equationsSize, int* equationsColSize, double* values, int valuesSize, char*** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public double[] CalcEquation(IList\u003cIList\u003cstring\u003e\u003e equations, double[] values, IList\u003cIList\u003cstring\u003e\u003e queries) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */\nvar calcEquation = function(equations, values, queries) {\n    \n};","lang":"javascript"},{"code":"function calcEquation(equations: string[][], values: number[], queries: string[][]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @param String[][] $queries\n     * @return Float[]\n     */\n    function calcEquation($equations, $values, $queries) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func calcEquation(_ equations: [[String]], _ values: [Double], _ queries: [[String]]) -\u003e [Double] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun calcEquation(equations: List\u003cList\u003cString\u003e\u003e, values: DoubleArray, queries: List\u003cList\u003cString\u003e\u003e): DoubleArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cdouble\u003e calcEquation(List\u003cList\u003cString\u003e\u003e equations, List\u003cdouble\u003e values, List\u003cList\u003cString\u003e\u003e queries) {\n    \n  }\n}","lang":"dart"},{"code":"func calcEquation(equations [][]string, values []float64, queries [][]string) []float64 {\n    \n}","lang":"golang"},{"code":"# @param {String[][]} equations\n# @param {Float[]} values\n# @param {String[][]} queries\n# @return {Float[]}\ndef calc_equation(equations, values, queries)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def calcEquation(equations: List[List[String]], values: Array[Double], queries: List[List[String]]): Array[Double] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn calc_equation(equations: Vec\u003cVec\u003cString\u003e\u003e, values: Vec\u003cf64\u003e, queries: Vec\u003cVec\u003cString\u003e\u003e) -\u003e Vec\u003cf64\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (calc-equation equations values queries)\n  (-\u003e (listof (listof string?)) (listof flonum?) (listof (listof string?)) (listof flonum?))\n  )","lang":"racket"},{"code":"-spec calc_equation(Equations :: [[unicode:unicode_binary()]], Values :: [float()], Queries :: [[unicode:unicode_binary()]]) -\u003e [float()].\ncalc_equation(Equations, Values, Queries) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec calc_equation(equations :: [[String.t]], values :: [float], queries :: [[String.t]]) :: [float]\n  def calc_equation(equations, values, queries) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array of variable pairs \u003ccode\u003eequations\u003c/code\u003e and an array of real numbers \u003ccode\u003evalues\u003c/code\u003e, where \u003ccode\u003eequations[i] = [A\u003csub\u003ei\u003c/sub\u003e, B\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e and \u003ccode\u003evalues[i]\u003c/code\u003e represent the equation \u003ccode\u003eA\u003csub\u003ei\u003c/sub\u003e / B\u003csub\u003ei\u003c/sub\u003e = values[i]\u003c/code\u003e. Each \u003ccode\u003eA\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e or \u003ccode\u003eB\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e is a string that represents a single variable.\u003c/p\u003e\n\n\u003cp\u003eYou are also given some \u003ccode\u003equeries\u003c/code\u003e, where \u003ccode\u003equeries[j] = [C\u003csub\u003ej\u003c/sub\u003e, D\u003csub\u003ej\u003c/sub\u003e]\u003c/code\u003e represents the \u003ccode\u003ej\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e query where you must find the answer for \u003ccode\u003eC\u003csub\u003ej\u003c/sub\u003e / D\u003csub\u003ej\u003c/sub\u003e = ?\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe answers to all queries\u003c/em\u003e. If a single answer cannot be determined, return \u003ccode\u003e-1.0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u0026nbsp;\u003c/strong\u003eThe variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e equations = [[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;],[\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;]], values = [2.0,3.0], queries = [[\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;],[\u0026quot;b\u0026quot;,\u0026quot;a\u0026quot;],[\u0026quot;a\u0026quot;,\u0026quot;e\u0026quot;],[\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;],[\u0026quot;x\u0026quot;,\u0026quot;x\u0026quot;]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nGiven: \u003cem\u003ea / b = 2.0\u003c/em\u003e, \u003cem\u003eb / c = 3.0\u003c/em\u003e\nqueries are: \u003cem\u003ea / c = ?\u003c/em\u003e, \u003cem\u003eb / a = ?\u003c/em\u003e, \u003cem\u003ea / e = ?\u003c/em\u003e, \u003cem\u003ea / a = ?\u003c/em\u003e, \u003cem\u003ex / x = ? \u003c/em\u003e\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =\u0026gt; -1.0\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e equations = [[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;],[\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;],[\u0026quot;bc\u0026quot;,\u0026quot;cd\u0026quot;]], values = [1.5,2.5,5.0], queries = [[\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;],[\u0026quot;c\u0026quot;,\u0026quot;b\u0026quot;],[\u0026quot;bc\u0026quot;,\u0026quot;cd\u0026quot;],[\u0026quot;cd\u0026quot;,\u0026quot;bc\u0026quot;]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3.75000,0.40000,5.00000,0.20000]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e equations = [[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]], values = [0.5], queries = [[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;],[\u0026quot;b\u0026quot;,\u0026quot;a\u0026quot;],[\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;],[\u0026quot;x\u0026quot;,\u0026quot;y\u0026quot;]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0.50000,2.00000,-1.00000,-1.00000]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= equations.length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eequations[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A\u003csub\u003ei\u003c/sub\u003e.length, B\u003csub\u003ei\u003c/sub\u003e.length \u0026lt;= 5\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003evalues.length == equations.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0.0 \u0026lt; values[i] \u0026lt;= 20.0\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003equeries[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= C\u003csub\u003ej\u003c/sub\u003e.length, D\u003csub\u003ej\u003c/sub\u003e.length \u0026lt;= 5\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA\u003csub\u003ei\u003c/sub\u003e, B\u003csub\u003ei\u003c/sub\u003e, C\u003csub\u003ej\u003c/sub\u003e, D\u003csub\u003ej\u003c/sub\u003e\u003c/code\u003e consist of lower case English letters and digits.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1048,"example_test_cases":"[[\"a\",\"b\"],[\"b\",\"c\"]]\n[2.0,3.0]\n[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n[[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]]\n[1.5,2.5,5.0]\n[[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n[[\"a\",\"b\"]]\n[0.5]\n[[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]","frontend_id":"399","id":"399","is_paid_only":false,"likes":9887,"title":"Evaluate Division","title_slug":"evaluate-division","topic_tags":["Array","String","Depth-First Search","Breadth-First Search","Union Find","Graph","Shortest Path"],"total_accepted":624259,"total_submissions":985478,"url":"https://leetcode.com/problems/evaluate-division/"}
{"acceptance_rate":0.4507337656922354,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int trailingZeroes(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int trailingZeroes(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def trailingZeroes(self, n: int) -\u003e int:\n        ","lang":"python3"},{"code":"int trailingZeroes(int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int TrailingZeroes(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    \n};","lang":"javascript"},{"code":"function trailingZeroes(n: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function trailingZeroes($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func trailingZeroes(_ n: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun trailingZeroes(n: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int trailingZeroes(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func trailingZeroes(n int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Integer}\ndef trailing_zeroes(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def trailingZeroes(n: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn trailing_zeroes(n: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (trailing-zeroes n)\n  (-\u003e exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec trailing_zeroes(N :: integer()) -\u003e integer().\ntrailing_zeroes(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec trailing_zeroes(n :: integer) :: integer\n  def trailing_zeroes(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe number of trailing zeroes in \u003c/em\u003e\u003ccode\u003en!\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that \u003ccode\u003en! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 3! = 6, no trailing zero.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 5! = 120, one trailing zero.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= n \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you write a solution that works in logarithmic time complexity?\u003c/p\u003e\n","difficulty":"Medium","dislikes":1979,"example_test_cases":"3\n5\n0","frontend_id":"172","id":"172","is_paid_only":false,"likes":3406,"title":"Factorial Trailing Zeroes","title_slug":"factorial-trailing-zeroes","topic_tags":["Math"],"total_accepted":578309,"total_submissions":1283039,"url":"https://leetcode.com/problems/factorial-trailing-zeroes/"}
{"acceptance_rate":0.5242834022443011,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e findAnagrams(string s, string p) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cInteger\u003e findAnagrams(String s, String p) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findAnagrams(self, s: str, p: str) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char* s, char* p, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cint\u003e FindAnagrams(string s, string p) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};","lang":"javascript"},{"code":"function findAnagrams(s: string, p: string): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findAnagrams(_ s: String, _ p: String) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findAnagrams(s: String, p: String): List\u003cInt\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e findAnagrams(String s, String p) {\n    \n  }\n}","lang":"dart"},{"code":"func findAnagrams(s string, p string) []int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_anagrams(s: String, p: String) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-anagrams s p)\n  (-\u003e string? string? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -\u003e [integer()].\nfind_anagrams(S, P) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\n  def find_anagrams(s, p) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ep\u003c/code\u003e, return an array of all the start indices of \u003ccode\u003ep\u003c/code\u003e\u0026#39;s \u003cspan data-keyword=\"anagram\"\u003eanagrams\u003c/span\u003e in \u003ccode\u003es\u003c/code\u003e. You may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;cbaebabacd\u0026quot;, p = \u0026quot;abc\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,6]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nThe substring with start index = 0 is \u0026quot;cba\u0026quot;, which is an anagram of \u0026quot;abc\u0026quot;.\nThe substring with start index = 6 is \u0026quot;bac\u0026quot;, which is an anagram of \u0026quot;abc\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;abab\u0026quot;, p = \u0026quot;ab\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nThe substring with start index = 0 is \u0026quot;ab\u0026quot;, which is an anagram of \u0026quot;ab\u0026quot;.\nThe substring with start index = 1 is \u0026quot;ba\u0026quot;, which is an anagram of \u0026quot;ab\u0026quot;.\nThe substring with start index = 2 is \u0026quot;ab\u0026quot;, which is an anagram of \u0026quot;ab\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length, p.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ep\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":361,"example_test_cases":"\"cbaebabacd\"\n\"abc\"\n\"abab\"\n\"ab\"","frontend_id":"438","id":"438","is_paid_only":false,"likes":12853,"title":"Find All Anagrams in a String","title_slug":"find-all-anagrams-in-a-string","topic_tags":["Hash Table","String","Sliding Window"],"total_accepted":1053472,"total_submissions":2009356,"url":"https://leetcode.com/problems/find-all-anagrams-in-a-string/"}
{"acceptance_rate":0.4718912907544264,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e searchRange(vector\u003cint\u003e\u0026 nums, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def searchRange(self, nums: List[int], target: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};","lang":"javascript"},{"code":"function searchRange(nums: number[], target: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e searchRange(List\u003cint\u003e nums, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func searchRange(nums []int, target int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn search_range(nums: Vec\u003ci32\u003e, target: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (search-range nums target)\n  (-\u003e (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec search_range(Nums :: [integer()], Target :: integer()) -\u003e [integer()].\nsearch_range(Nums, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e sorted in non-decreasing order, find the starting and ending position of a given \u003ccode\u003etarget\u003c/code\u003e value.\u003c/p\u003e\n\n\u003cp\u003eIf \u003ccode\u003etarget\u003c/code\u003e is not found in the array, return \u003ccode\u003e[-1, -1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must\u0026nbsp;write an algorithm with\u0026nbsp;\u003ccode\u003eO(log n)\u003c/code\u003e runtime complexity.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5,7,7,8,8,10], target = 8\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3,4]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5,7,7,8,8,10], target = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e [-1,-1]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [], target = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e [-1,-1]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e\u0026nbsp;\u0026lt;= nums[i]\u0026nbsp;\u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e is a non-decreasing array.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e\u0026nbsp;\u0026lt;= target\u0026nbsp;\u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":591,"example_test_cases":"[5,7,7,8,8,10]\n8\n[5,7,7,8,8,10]\n6\n[]\n0","frontend_id":"34","id":"34","is_paid_only":false,"likes":22186,"title":"Find First and Last Position of Element in Sorted Array","title_slug":"find-first-and-last-position-of-element-in-sorted-array","topic_tags":["Array","Binary Search"],"total_accepted":2811139,"total_submissions":5957175,"url":"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"}
{"acceptance_rate":0.4086307849039711,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e kSmallestPairs(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e KSmallestPairs(int[] nums1, int[] nums2, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[][]}\n */\nvar kSmallestPairs = function(nums1, nums2, k) {\n    \n};","lang":"javascript"},{"code":"function kSmallestPairs(nums1: number[], nums2: number[], k: number): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function kSmallestPairs($nums1, $nums2, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func kSmallestPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun kSmallestPairs(nums1: IntArray, nums2: IntArray, k: Int): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e kSmallestPairs(List\u003cint\u003e nums1, List\u003cint\u003e nums2, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_smallest_pairs(nums1, nums2, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def kSmallestPairs(nums1: Array[Int], nums2: Array[Int], k: Int): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn k_smallest_pairs(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e, k: i32) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (k-smallest-pairs nums1 nums2 k)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec k_smallest_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -\u003e [[integer()]].\nk_smallest_pairs(Nums1, Nums2, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec k_smallest_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: [[integer]]\n  def k_smallest_pairs(nums1, nums2, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given two integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e sorted in \u003cstrong\u003enon-decreasing\u0026nbsp;order\u003c/strong\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDefine a pair \u003ccode\u003e(u, v)\u003c/code\u003e which consists of one element from the first array and one element from the second array.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003epairs\u003c/em\u003e \u003ccode\u003e(u\u003csub\u003e1\u003c/sub\u003e, v\u003csub\u003e1\u003c/sub\u003e), (u\u003csub\u003e2\u003c/sub\u003e, v\u003csub\u003e2\u003c/sub\u003e), ..., (u\u003csub\u003ek\u003c/sub\u003e, v\u003csub\u003ek\u003c/sub\u003e)\u003c/code\u003e \u003cem\u003ewith the smallest sums\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2],[1,4],[1,6]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,1],[1,1]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums1[i], nums2[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e both are sorted in \u003cstrong\u003enon-decreasing order\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ek \u0026lt;=\u0026nbsp;nums1.length *\u0026nbsp;nums2.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":476,"example_test_cases":"[1,7,11]\n[2,4,6]\n3\n[1,1,2]\n[1,2,3]\n2","frontend_id":"373","id":"373","is_paid_only":false,"likes":6677,"title":"Find K Pairs with Smallest Sums","title_slug":"find-k-pairs-with-smallest-sums","topic_tags":["Array","Heap (Priority Queue)"],"total_accepted":390678,"total_submissions":956066,"url":"https://leetcode.com/problems/find-k-pairs-with-smallest-sums/"}
{"acceptance_rate":0.529272657707049,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findMin(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findMin(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findMin(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int findMin(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindMin(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function(nums) {\n    \n};","lang":"javascript"},{"code":"function findMin(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMin($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findMin(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findMin(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findMin(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func findMin(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_min(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findMin(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_min(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-min nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_min(Nums :: [integer()]) -\u003e integer().\nfind_min(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_min(nums :: [integer]) :: integer\n  def find_min(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eSuppose an array of length \u003ccode\u003en\u003c/code\u003e sorted in ascending order is \u003cstrong\u003erotated\u003c/strong\u003e between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e times. For example, the array \u003ccode\u003enums = [0,1,2,4,5,6,7]\u003c/code\u003e might become:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e[4,5,6,7,0,1,2]\u003c/code\u003e if it was rotated \u003ccode\u003e4\u003c/code\u003e times.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e if it was rotated \u003ccode\u003e7\u003c/code\u003e times.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNotice that \u003cstrong\u003erotating\u003c/strong\u003e an array \u003ccode\u003e[a[0], a[1], a[2], ..., a[n-1]]\u003c/code\u003e 1 time results in the array \u003ccode\u003e[a[n-1], a[0], a[1], a[2], ..., a[n-2]]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven the sorted rotated array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003eunique\u003c/strong\u003e elements, return \u003cem\u003ethe minimum element of this array\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm that runs in\u0026nbsp;\u003ccode\u003eO(log n) time\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,4,5,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The original array was [1,2,3,4,5] rotated 3 times.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,5,6,7,0,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [11,13,15,17]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 11\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The original array was [11,13,15,17] and it was rotated 4 times. \n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == nums.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-5000 \u0026lt;= nums[i] \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the integers of \u003ccode\u003enums\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e is sorted and rotated between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e times.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":634,"example_test_cases":"[3,4,5,1,2]\n[4,5,6,7,0,1,2]\n[11,13,15,17]","frontend_id":"153","id":"153","is_paid_only":false,"likes":14464,"title":"Find Minimum in Rotated Sorted Array","title_slug":"find-minimum-in-rotated-sorted-array","topic_tags":["Array","Binary Search"],"total_accepted":2556370,"total_submissions":4829968,"url":"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"}
{"acceptance_rate":0.46538593844854104,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findPeakElement(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findPeakElement(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findPeakElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findPeakElement(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int findPeakElement(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindPeakElement(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findPeakElement = function(nums) {\n    \n};","lang":"javascript"},{"code":"function findPeakElement(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findPeakElement($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findPeakElement(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findPeakElement(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findPeakElement(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func findPeakElement(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_peak_element(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findPeakElement(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_peak_element(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-peak-element nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_peak_element(Nums :: [integer()]) -\u003e integer().\nfind_peak_element(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_peak_element(nums :: [integer]) :: integer\n  def find_peak_element(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eA peak element is an element that is strictly greater than its neighbors.\u003c/p\u003e\n\n\u003cp\u003eGiven a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e, find a peak element, and return its index. If the array contains multiple peaks, return the index to \u003cstrong\u003eany of the peaks\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may imagine that \u003ccode\u003enums[-1] = nums[n] = -\u0026infin;\u003c/code\u003e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm that runs in \u003ccode\u003eO(log n)\u003c/code\u003e time.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 3 is a peak element and your function should return the index number 2.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,1,3,5,6,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i] != nums[i + 1]\u003c/code\u003e for all valid \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":4875,"example_test_cases":"[1,2,3,1]\n[1,2,1,3,5,6,4]","frontend_id":"162","id":"162","is_paid_only":false,"likes":13664,"title":"Find Peak Element","title_slug":"find-peak-element","topic_tags":["Array","Binary Search"],"total_accepted":2041495,"total_submissions":4386671,"url":"https://leetcode.com/problems/find-peak-element/"}
{"acceptance_rate":0.8097610943197776,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e findDifference(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e findDifference(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findDifference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findDifference(self, nums1: List[int], nums2: List[int]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findDifference(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e FindDifference(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[][]}\n */\nvar findDifference = function(nums1, nums2) {\n    \n};","lang":"javascript"},{"code":"function findDifference(nums1: number[], nums2: number[]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[][]\n     */\n    function findDifference($nums1, $nums2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findDifference(_ nums1: [Int], _ nums2: [Int]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findDifference(nums1: IntArray, nums2: IntArray): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e findDifference(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}","lang":"dart"},{"code":"func findDifference(nums1 []int, nums2 []int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[][]}\ndef find_difference(nums1, nums2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findDifference(nums1: Array[Int], nums2: Array[Int]): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_difference(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-difference nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec find_difference(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e [[integer()]].\nfind_difference(Nums1, Nums2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_difference(nums1 :: [integer], nums2 :: [integer]) :: [[integer]]\n  def find_difference(nums1, nums2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two \u003cstrong\u003e0-indexed\u003c/strong\u003e integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, return \u003cem\u003ea list\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e \u003cem\u003eof size\u003c/em\u003e \u003ccode\u003e2\u003c/code\u003e \u003cem\u003ewhere:\u003c/em\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eanswer[0]\u003c/code\u003e \u003cem\u003eis a list of all \u003cstrong\u003edistinct\u003c/strong\u003e integers in\u003c/em\u003e \u003ccode\u003enums1\u003c/code\u003e \u003cem\u003ewhich are \u003cstrong\u003enot\u003c/strong\u003e present in\u003c/em\u003e \u003ccode\u003enums2\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eanswer[1]\u003c/code\u003e \u003cem\u003eis a list of all \u003cstrong\u003edistinct\u003c/strong\u003e integers in\u003c/em\u003e \u003ccode\u003enums2\u003c/code\u003e \u003cem\u003ewhich are \u003cstrong\u003enot\u003c/strong\u003e present in\u003c/em\u003e \u003ccode\u003enums1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the integers in the lists may be returned in \u003cstrong\u003eany\u003c/strong\u003e order.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,3], nums2 = [2,4,6]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,3],[4,6]]\n\u003cstrong\u003eExplanation:\n\u003c/strong\u003eFor nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums1. Therefore, answer[1] = [4,6].\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,3,3], nums2 = [1,1,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[3],[]]\n\u003cstrong\u003eExplanation:\n\u003c/strong\u003eFor nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":117,"example_test_cases":"[1,2,3]\n[2,4,6]\n[1,2,3,3]\n[1,1,2,2]","frontend_id":"2215","id":"1392","is_paid_only":false,"likes":2543,"title":"Find the Difference of Two Arrays","title_slug":"find-the-difference-of-two-arrays","topic_tags":["Array","Hash Table"],"total_accepted":560481,"total_submissions":692156,"url":"https://leetcode.com/problems/find-the-difference-of-two-arrays/"}
{"acceptance_rate":0.631382683945476,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findDuplicate(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findDuplicate(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findDuplicate(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int findDuplicate(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindDuplicate(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDuplicate = function(nums) {\n    \n};","lang":"javascript"},{"code":"function findDuplicate(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findDuplicate($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findDuplicate(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findDuplicate(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findDuplicate(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func findDuplicate(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_duplicate(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_duplicate(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-duplicate nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_duplicate(Nums :: [integer()]) -\u003e integer().\nfind_duplicate(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_duplicate(nums :: [integer]) :: integer\n  def find_duplicate(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e containing\u0026nbsp;\u003ccode\u003en + 1\u003c/code\u003e integers where each integer is in the range \u003ccode\u003e[1, n]\u003c/code\u003e inclusive.\u003c/p\u003e\n\n\u003cp\u003eThere is only \u003cstrong\u003eone repeated number\u003c/strong\u003e in \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethis\u0026nbsp;repeated\u0026nbsp;number\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must solve the problem \u003cstrong\u003ewithout\u003c/strong\u003e modifying the array \u003ccode\u003enums\u003c/code\u003e\u0026nbsp;and using only constant extra space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,3,4,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,1,3,4,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,3,3,3,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums.length == n + 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the integers in \u003ccode\u003enums\u003c/code\u003e appear only \u003cstrong\u003eonce\u003c/strong\u003e except for \u003cstrong\u003eprecisely one integer\u003c/strong\u003e which appears \u003cstrong\u003etwo or more\u003c/strong\u003e times.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eHow can we prove that at least one duplicate number must exist in \u003ccode\u003enums\u003c/code\u003e?\u003c/li\u003e\n\t\u003cli\u003eCan you solve the problem in linear runtime complexity?\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":5387,"example_test_cases":"[1,3,4,2,2]\n[3,1,3,4,2]\n[3,3,3,3,3]","frontend_id":"287","id":"287","is_paid_only":false,"likes":24613,"title":"Find the Duplicate Number","title_slug":"find-the-duplicate-number","topic_tags":["Array","Two Pointers","Binary Search","Bit Manipulation"],"total_accepted":2247848,"total_submissions":3560199,"url":"https://leetcode.com/problems/find-the-duplicate-number/"}
{"acceptance_rate":0.8383216969069117,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int largestAltitude(vector\u003cint\u003e\u0026 gain) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int largestAltitude(int[] gain) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def largestAltitude(self, gain):\n        \"\"\"\n        :type gain: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def largestAltitude(self, gain: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int largestAltitude(int* gain, int gainSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LargestAltitude(int[] gain) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} gain\n * @return {number}\n */\nvar largestAltitude = function(gain) {\n    \n};","lang":"javascript"},{"code":"function largestAltitude(gain: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $gain\n     * @return Integer\n     */\n    function largestAltitude($gain) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func largestAltitude(_ gain: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun largestAltitude(gain: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int largestAltitude(List\u003cint\u003e gain) {\n    \n  }\n}","lang":"dart"},{"code":"func largestAltitude(gain []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} gain\n# @return {Integer}\ndef largest_altitude(gain)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def largestAltitude(gain: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn largest_altitude(gain: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (largest-altitude gain)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec largest_altitude(Gain :: [integer()]) -\u003e integer().\nlargest_altitude(Gain) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec largest_altitude(gain :: [integer]) :: integer\n  def largest_altitude(gain) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere is a biker going on a road trip. The road trip consists of \u003ccode\u003en + 1\u003c/code\u003e points at different altitudes. The biker starts his trip on point \u003ccode\u003e0\u003c/code\u003e with altitude equal \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou are given an integer array \u003ccode\u003egain\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e where \u003ccode\u003egain[i]\u003c/code\u003e is the \u003cstrong\u003enet gain in altitude\u003c/strong\u003e between points \u003ccode\u003ei\u003c/code\u003e​​​​​​ and \u003ccode\u003ei + 1\u003c/code\u003e for all (\u003ccode\u003e0 \u0026lt;= i \u0026lt; n)\u003c/code\u003e. Return \u003cem\u003ethe \u003cstrong\u003ehighest altitude\u003c/strong\u003e of a point.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e gain = [-5,1,5,0,-7]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e gain = [-4,-3,-2,-1,4,3,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == gain.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-100 \u0026lt;= gain[i] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":401,"example_test_cases":"[-5,1,5,0,-7]\n[-4,-3,-2,-1,4,3,2]","frontend_id":"1732","id":"1833","is_paid_only":false,"likes":3111,"title":"Find the Highest Altitude","title_slug":"find-the-highest-altitude","topic_tags":["Array","Prefix Sum"],"total_accepted":618248,"total_submissions":737483,"url":"https://leetcode.com/problems/find-the-highest-altitude/"}
{"acceptance_rate":0.45264044507985063,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def strStr(self, haystack: str, needle: str) -\u003e int:\n        ","lang":"python3"},{"code":"int strStr(char* haystack, char* needle) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};","lang":"javascript"},{"code":"function strStr(haystack: string, needle: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}","lang":"dart"},{"code":"func strStr(haystack string, needle string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (str-str haystack needle)\n  (-\u003e string? string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -\u003e integer().\nstr_str(Haystack, Needle) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003eneedle\u003c/code\u003e and \u003ccode\u003ehaystack\u003c/code\u003e, return the index of the first occurrence of \u003ccode\u003eneedle\u003c/code\u003e in \u003ccode\u003ehaystack\u003c/code\u003e, or \u003ccode\u003e-1\u003c/code\u003e if \u003ccode\u003eneedle\u003c/code\u003e is not part of \u003ccode\u003ehaystack\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e haystack = \u0026quot;sadbutsad\u0026quot;, needle = \u0026quot;sad\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;sad\u0026quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e haystack = \u0026quot;leetcode\u0026quot;, needle = \u0026quot;leeto\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;leeto\u0026quot; did not occur in \u0026quot;leetcode\u0026quot;, so we return -1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= haystack.length, needle.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ehaystack\u003c/code\u003e and \u003ccode\u003eneedle\u003c/code\u003e consist of only lowercase English characters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":520,"example_test_cases":"\"sadbutsad\"\n\"sad\"\n\"leetcode\"\n\"leeto\"","frontend_id":"28","id":"28","is_paid_only":false,"likes":6929,"title":"Find the Index of the First Occurrence in a String","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","topic_tags":["Two Pointers","String","String Matching"],"total_accepted":3471587,"total_submissions":7669635,"url":"https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/"}
{"acceptance_rate":0.4135059511969557,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int firstMissingPositive(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def firstMissingPositive(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int firstMissingPositive(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};","lang":"javascript"},{"code":"function firstMissingPositive(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func firstMissingPositive(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int firstMissingPositive(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func firstMissingPositive(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn first_missing_positive(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (first-missing-positive nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec first_missing_positive(Nums :: [integer()]) -\u003e integer().\nfirst_missing_positive(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an unsorted integer array \u003ccode\u003enums\u003c/code\u003e. Return the \u003cem\u003esmallest positive integer\u003c/em\u003e that is \u003cem\u003enot present\u003c/em\u003e in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must implement an algorithm that runs in \u003ccode\u003eO(n)\u003c/code\u003e time and uses \u003ccode\u003eO(1)\u003c/code\u003e auxiliary space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,0]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The numbers in the range [1,2] are all in the array.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,4,-1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 1 is in the array but 2 is missing.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [7,8,9,11,12]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The smallest positive integer 1 is missing.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":1941,"example_test_cases":"[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]","frontend_id":"41","id":"41","is_paid_only":false,"likes":17749,"title":"First Missing Positive","title_slug":"first-missing-positive","topic_tags":["Array","Hash Table"],"total_accepted":1523793,"total_submissions":3685057,"url":"https://leetcode.com/problems/first-missing-positive/"}
{"acceptance_rate":0.46646887060282993,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int canCompleteCircuit(vector\u003cint\u003e\u0026 gas, vector\u003cint\u003e\u0026 cost) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int CanCompleteCircuit(int[] gas, int[] cost) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} gas\n * @param {number[]} cost\n * @return {number}\n */\nvar canCompleteCircuit = function(gas, cost) {\n    \n};","lang":"javascript"},{"code":"function canCompleteCircuit(gas: number[], cost: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $gas\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function canCompleteCircuit($gas, $cost) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canCompleteCircuit(_ gas: [Int], _ cost: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canCompleteCircuit(gas: IntArray, cost: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int canCompleteCircuit(List\u003cint\u003e gas, List\u003cint\u003e cost) {\n    \n  }\n}","lang":"dart"},{"code":"func canCompleteCircuit(gas []int, cost []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} gas\n# @param {Integer[]} cost\n# @return {Integer}\ndef can_complete_circuit(gas, cost)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canCompleteCircuit(gas: Array[Int], cost: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_complete_circuit(gas: Vec\u003ci32\u003e, cost: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-complete-circuit gas cost)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec can_complete_circuit(Gas :: [integer()], Cost :: [integer()]) -\u003e integer().\ncan_complete_circuit(Gas, Cost) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_complete_circuit(gas :: [integer], cost :: [integer]) :: integer\n  def can_complete_circuit(gas, cost) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e gas stations along a circular route, where the amount of gas at the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e station is \u003ccode\u003egas[i]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou have a car with an unlimited gas tank and it costs \u003ccode\u003ecost[i]\u003c/code\u003e of gas to travel from the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e station to its next \u003ccode\u003e(i + 1)\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e station. You begin the journey with an empty tank at one of the gas stations.\u003c/p\u003e\n\n\u003cp\u003eGiven two integer arrays \u003ccode\u003egas\u003c/code\u003e and \u003ccode\u003ecost\u003c/code\u003e, return \u003cem\u003ethe starting gas station\u0026#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e. If there exists a solution, it is \u003cstrong\u003eguaranteed\u003c/strong\u003e to be \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e gas = [2,3,4], cost = [3,4,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nYou can\u0026#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet\u0026#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can\u0026#39;t travel around the circuit once no matter where you start.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == gas.length == cost.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= gas[i], cost[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that the answer is unique.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1321,"example_test_cases":"[1,2,3,4,5]\n[3,4,5,1,2]\n[2,3,4]\n[3,4,3]","frontend_id":"134","id":"134","is_paid_only":false,"likes":12919,"title":"Gas Station","title_slug":"gas-station","topic_tags":["Array","Greedy"],"total_accepted":1152124,"total_submissions":2469884,"url":"https://leetcode.com/problems/gas-station/"}
{"acceptance_rate":0.7744336569579288,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cstring\u003e generateParenthesis(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cString\u003e generateParenthesis(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def generateParenthesis(self, n: int) -\u003e List[str]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cstring\u003e GenerateParenthesis(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};","lang":"javascript"},{"code":"function generateParenthesis(n: number): string[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func generateParenthesis(_ n: Int) -\u003e [String] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun generateParenthesis(n: Int): List\u003cString\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cString\u003e generateParenthesis(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func generateParenthesis(n int) []string {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn generate_parenthesis(n: i32) -\u003e Vec\u003cString\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (generate-parenthesis n)\n  (-\u003e exact-integer? (listof string?))\n  )","lang":"racket"},{"code":"-spec generate_parenthesis(N :: integer()) -\u003e [unicode:unicode_binary()].\ngenerate_parenthesis(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven \u003ccode\u003en\u003c/code\u003e pairs of parentheses, write a function to \u003cem\u003egenerate all combinations of well-formed parentheses\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e n = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e n = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\"()\"]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 8\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1044,"example_test_cases":"3\n1","frontend_id":"22","id":"22","is_paid_only":false,"likes":22458,"title":"Generate Parentheses","title_slug":"generate-parentheses","topic_tags":["String","Dynamic Programming","Backtracking"],"total_accepted":2476755,"total_submissions":3198150,"url":"https://leetcode.com/problems/generate-parentheses/"}
{"acceptance_rate":0.5285170440135085,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String gcdOfStrings(String str1, String str2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* gcdOfStrings(char* str1, char* str2) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string GcdOfStrings(string str1, string str2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};","lang":"javascript"},{"code":"function gcdOfStrings(str1: string, str2: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function gcdOfStrings($str1, $str2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func gcdOfStrings(_ str1: String, _ str2: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun gcdOfStrings(str1: String, str2: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String gcdOfStrings(String str1, String str2) {\n    \n  }\n}","lang":"dart"},{"code":"func gcdOfStrings(str1 string, str2 string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef gcd_of_strings(str1, str2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def gcdOfStrings(str1: String, str2: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn gcd_of_strings(str1: String, str2: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (gcd-of-strings str1 str2)\n  (-\u003e string? string? string?)\n  )","lang":"racket"},{"code":"-spec gcd_of_strings(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\ngcd_of_strings(Str1, Str2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec gcd_of_strings(str1 :: String.t, str2 :: String.t) :: String.t\n  def gcd_of_strings(str1, str2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eFor two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e, we say \u0026quot;\u003ccode\u003et\u003c/code\u003e divides \u003ccode\u003es\u003c/code\u003e\u0026quot; if and only if \u003ccode\u003es = t + t + t + ... + t + t\u003c/code\u003e (i.e., \u003ccode\u003et\u003c/code\u003e is concatenated with itself one or more times).\u003c/p\u003e\n\n\u003cp\u003eGiven two strings \u003ccode\u003estr1\u003c/code\u003e and \u003ccode\u003estr2\u003c/code\u003e, return \u003cem\u003ethe largest string \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e such that \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e divides both \u003c/em\u003e\u003ccode\u003estr1\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003estr2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e str1 = \u0026quot;ABCABC\u0026quot;, str2 = \u0026quot;ABC\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;ABC\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e str1 = \u0026quot;ABABAB\u0026quot;, str2 = \u0026quot;ABAB\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;AB\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e str1 = \u0026quot;LEET\u0026quot;, str2 = \u0026quot;CODE\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= str1.length, str2.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003estr1\u003c/code\u003e and \u003ccode\u003estr2\u003c/code\u003e consist of English uppercase letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1604,"example_test_cases":"\"ABCABC\"\n\"ABC\"\n\"ABABAB\"\n\"ABAB\"\n\"LEET\"\n\"CODE\"","frontend_id":"1071","id":"1146","is_paid_only":false,"likes":5769,"title":"Greatest Common Divisor of Strings","title_slug":"greatest-common-divisor-of-strings","topic_tags":["Math","String"],"total_accepted":818962,"total_submissions":1549547,"url":"https://leetcode.com/problems/greatest-common-divisor-of-strings/"}
{"acceptance_rate":0.712253491652434,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cstring\u003e\u003e groupAnagrams(vector\u003cstring\u003e\u0026 strs) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cString\u003e\u003e groupAnagrams(String[] strs) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def groupAnagrams(self, strs: List[str]) -\u003e List[List[str]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cstring\u003e\u003e GroupAnagrams(string[] strs) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};","lang":"javascript"},{"code":"function groupAnagrams(strs: string[]): string[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func groupAnagrams(_ strs: [String]) -\u003e [[String]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun groupAnagrams(strs: Array\u003cString\u003e): List\u003cList\u003cString\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cString\u003e\u003e groupAnagrams(List\u003cString\u003e strs) {\n    \n  }\n}","lang":"dart"},{"code":"func groupAnagrams(strs []string) [][]string {\n    \n}","lang":"golang"},{"code":"# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn group_anagrams(strs: Vec\u003cString\u003e) -\u003e Vec\u003cVec\u003cString\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (group-anagrams strs)\n  (-\u003e (listof string?) (listof (listof string?)))\n  )","lang":"racket"},{"code":"-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -\u003e [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of strings \u003ccode\u003estrs\u003c/code\u003e, group the \u003cspan data-keyword=\"anagram\"\u003eanagrams\u003c/span\u003e together. You can return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003estrs = [\u0026quot;eat\u0026quot;,\u0026quot;tea\u0026quot;,\u0026quot;tan\u0026quot;,\u0026quot;ate\u0026quot;,\u0026quot;nat\u0026quot;,\u0026quot;bat\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[[\u0026quot;bat\u0026quot;],[\u0026quot;nat\u0026quot;,\u0026quot;tan\u0026quot;],[\u0026quot;ate\u0026quot;,\u0026quot;eat\u0026quot;,\u0026quot;tea\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThere is no string in strs that can be rearranged to form \u003ccode\u003e\u0026quot;bat\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe strings \u003ccode\u003e\u0026quot;nat\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;tan\u0026quot;\u003c/code\u003e are anagrams as they can be rearranged to form each other.\u003c/li\u003e\n\t\u003cli\u003eThe strings \u003ccode\u003e\u0026quot;ate\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;eat\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;tea\u0026quot;\u003c/code\u003e are anagrams as they can be rearranged to form each other.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003estrs = [\u0026quot;\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[[\u0026quot;\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003estrs = [\u0026quot;a\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[[\u0026quot;a\u0026quot;]]\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= strs.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= strs[i].length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003estrs[i]\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":707,"example_test_cases":"[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n[\"\"]\n[\"a\"]","frontend_id":"49","id":"49","is_paid_only":false,"likes":20884,"title":"Group Anagrams","title_slug":"group-anagrams","topic_tags":["Array","Hash Table","String","Sorting"],"total_accepted":3985559,"total_submissions":5595703,"url":"https://leetcode.com/problems/group-anagrams/"}
{"acceptance_rate":0.5608555508516468,"category":"Algorithms","code_snippets":[{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        \n    }\n}","lang":"java"},{"code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -\u003e int:\n\nclass Solution:\n    def guessNumber(self, n: int) -\u003e int:\n        ","lang":"python3"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nint guessNumber(int n){\n\t\n}","lang":"c"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution : GuessGame {\n    public int GuessNumber(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar guessNumber = function(n) {\n    \n};","lang":"javascript"},{"code":"/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n\nfunction guessNumber(n: number): number {\n\n};","lang":"typescript"},{"code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * public function guess($num){}\n */\n\nclass Solution extends GuessGame {\n    /**\n     * @param  Integer  $n\n     * @return Integer\n     */\n    function guessNumber($n) {\n        \n    }\n}","lang":"php"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num -\u003e your guess number\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0 \n * func guess(_ num: Int) -\u003e Int \n */\n\nclass Solution : GuessGame {\n    func guessNumber(_ n: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * fun guess(num:Int):Int {}\n */\n\nclass Solution:GuessGame() {\n    override fun guessNumber(n:Int):Int {\n        \n    }\n}","lang":"kotlin"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * func guess(num int) int;\n */\n\nfunc guessNumber(n int) int {\n    \n}","lang":"golang"},{"code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num)\n\ndef guessNumber(n)\n    \nend","lang":"ruby"},{"code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * def guess(num: Int): Int = {}\n */\n\nclass Solution extends GuessGame {\n    def guessNumber(n: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * unsafe fn guess(num: i32) -\u003e i32 {}\n */\n\nimpl Solution {\n    unsafe fn guessNumber(n: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eWe are playing the Guess Game. The game is as follows:\u003c/p\u003e\n\n\u003cp\u003eI pick a number from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e. You have to guess which number I picked.\u003c/p\u003e\n\n\u003cp\u003eEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\u003c/p\u003e\n\n\u003cp\u003eYou call a pre-defined API \u003ccode\u003eint guess(int num)\u003c/code\u003e, which returns three possible results:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e-1\u003c/code\u003e: Your guess is higher than the number I picked (i.e. \u003ccode\u003enum \u0026gt; pick\u003c/code\u003e).\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1\u003c/code\u003e: Your guess is lower than the number I picked (i.e. \u003ccode\u003enum \u0026lt; pick\u003c/code\u003e).\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e: your guess is equal to the number I picked (i.e. \u003ccode\u003enum == pick\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe number that I picked\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 10, pick = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 1, pick = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 2, pick = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pick \u0026lt;= n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":648,"example_test_cases":"10\n6\n1\n1\n2\n1","frontend_id":"374","id":"374","is_paid_only":false,"likes":4078,"title":"Guess Number Higher or Lower","title_slug":"guess-number-higher-or-lower","topic_tags":["Binary Search","Interactive"],"total_accepted":884965,"total_submissions":1577884,"url":"https://leetcode.com/problems/guess-number-higher-or-lower/"}
{"acceptance_rate":0.5833784389142842,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isHappy(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isHappy(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isHappy(self, n: int) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isHappy(int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsHappy(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n    \n};","lang":"javascript"},{"code":"function isHappy(n: number): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isHappy(_ n: Int) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isHappy(n: Int): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isHappy(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func isHappy(n int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Boolean}\ndef is_happy(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isHappy(n: Int): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_happy(n: i32) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-happy n)\n  (-\u003e exact-integer? boolean?)\n  )","lang":"racket"},{"code":"-spec is_happy(N :: integer()) -\u003e boolean().\nis_happy(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_happy(n :: integer) :: boolean\n  def is_happy(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eWrite an algorithm to determine if a number \u003ccode\u003en\u003c/code\u003e is happy.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ehappy number\u003c/strong\u003e is a number defined by the following process:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eStarting with any positive integer, replace the number by the sum of the squares of its digits.\u003c/li\u003e\n\t\u003cli\u003eRepeat the process until the number equals 1 (where it will stay), or it \u003cstrong\u003eloops endlessly in a cycle\u003c/strong\u003e which does not include 1.\u003c/li\u003e\n\t\u003cli\u003eThose numbers for which this process \u003cstrong\u003eends in 1\u003c/strong\u003e are happy.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e \u003cem\u003eis a happy number, and\u003c/em\u003e \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eif not\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 19\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n1\u003csup\u003e2\u003c/sup\u003e + 9\u003csup\u003e2\u003c/sup\u003e = 82\n8\u003csup\u003e2\u003c/sup\u003e + 2\u003csup\u003e2\u003c/sup\u003e = 68\n6\u003csup\u003e2\u003c/sup\u003e + 8\u003csup\u003e2\u003c/sup\u003e = 100\n1\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e = 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1584,"example_test_cases":"19\n2","frontend_id":"202","id":"202","is_paid_only":false,"likes":11317,"title":"Happy Number","title_slug":"happy-number","topic_tags":["Hash Table","Math","Two Pointers"],"total_accepted":1950821,"total_submissions":3344006,"url":"https://leetcode.com/problems/happy-number/"}
{"acceptance_rate":0.5246211883239615,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int rob(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int rob(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Rob(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};","lang":"javascript"},{"code":"function rob(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function rob($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func rob(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun rob(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int rob(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func rob(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef rob(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn rob(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (rob nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec rob(Nums :: [integer()]) -\u003e integer().\nrob(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec rob(nums :: [integer]) :: integer\n  def rob(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and \u003cb\u003eit will automatically contact the police if two adjacent houses were broken into on the same night\u003c/b\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e representing the amount of money of each house, return \u003cem\u003ethe maximum amount of money you can rob tonight \u003cb\u003ewithout alerting the police\u003c/b\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,7,9,3,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums[i] \u0026lt;= 400\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":481,"example_test_cases":"[1,2,3,1]\n[2,7,9,3,1]","frontend_id":"198","id":"198","is_paid_only":false,"likes":22585,"title":"House Robber","title_slug":"house-robber","topic_tags":["Array","Dynamic Programming"],"total_accepted":3047951,"total_submissions":5809813,"url":"https://leetcode.com/problems/house-robber/"}
{"acceptance_rate":0.391515333030358,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool increasingTriplet(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean increasingTriplet(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def increasingTriplet(self, nums: List[int]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool increasingTriplet(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IncreasingTriplet(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n    \n};","lang":"javascript"},{"code":"function increasingTriplet(nums: number[]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function increasingTriplet($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func increasingTriplet(_ nums: [Int]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun increasingTriplet(nums: IntArray): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool increasingTriplet(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func increasingTriplet(nums []int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef increasing_triplet(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def increasingTriplet(nums: Array[Int]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn increasing_triplet(nums: Vec\u003ci32\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (increasing-triplet nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )","lang":"racket"},{"code":"-spec increasing_triplet(Nums :: [integer()]) -\u003e boolean().\nincreasing_triplet(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec increasing_triplet(nums :: [integer]) :: boolean\n  def increasing_triplet(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if there exists a triple of indices \u003c/em\u003e\u003ccode\u003e(i, j, k)\u003c/code\u003e\u003cem\u003e such that \u003c/em\u003e\u003ccode\u003ei \u0026lt; j \u0026lt; k\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003enums[i] \u0026lt; nums[j] \u0026lt; nums[k]\u003c/code\u003e. If no such indices exists, return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Any triplet where i \u0026lt; j \u0026lt; k is valid.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5,4,3,2,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e No triplet exists.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,1,5,0,4,6]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The triplet (3, 4, 5) is valid because nums[3] == 0 \u0026lt; nums[4] == 4 \u0026lt; nums[5] == 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 5 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you implement a solution that runs in \u003ccode\u003eO(n)\u003c/code\u003e time complexity and \u003ccode\u003eO(1)\u003c/code\u003e space complexity?","difficulty":"Medium","dislikes":668,"example_test_cases":"[1,2,3,4,5]\n[5,4,3,2,1]\n[2,1,5,0,4,6]","frontend_id":"334","id":"334","is_paid_only":false,"likes":8620,"title":"Increasing Triplet Subsequence","title_slug":"increasing-triplet-subsequence","topic_tags":["Array","Greedy"],"total_accepted":826169,"total_submissions":2110183,"url":"https://leetcode.com/problems/increasing-triplet-subsequence/"}
{"acceptance_rate":0.43772703766802773,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e insert(vector\u003cvector\u003cint\u003e\u003e\u0026 intervals, vector\u003cint\u003e\u0026 newInterval) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n    \n};","lang":"javascript"},{"code":"function insert(intervals: number[][], newInterval: number[]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun insert(intervals: Array\u003cIntArray\u003e, newInterval: IntArray): Array\u003cIntArray\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e insert(List\u003cList\u003cint\u003e\u003e intervals, List\u003cint\u003e newInterval) {\n    \n  }\n}","lang":"dart"},{"code":"func insert(intervals [][]int, newInterval []int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} intervals\n# @param {Integer[]} new_interval\n# @return {Integer[][]}\ndef insert(intervals, new_interval)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn insert(intervals: Vec\u003cVec\u003ci32\u003e\u003e, new_interval: Vec\u003ci32\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (insert intervals newInterval)\n  (-\u003e (listof (listof exact-integer?)) (listof exact-integer?) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec insert(Intervals :: [[integer()]], NewInterval :: [integer()]) -\u003e [[integer()]].\ninsert(Intervals, NewInterval) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec insert(intervals :: [[integer]], new_interval :: [integer]) :: [[integer]]\n  def insert(intervals, new_interval) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array of non-overlapping intervals \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [start\u003csub\u003ei\u003c/sub\u003e, end\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e represent the start and the end of the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e interval and \u003ccode\u003eintervals\u003c/code\u003e is sorted in ascending order by \u003ccode\u003estart\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e. You are also given an interval \u003ccode\u003enewInterval = [start, end]\u003c/code\u003e that represents the start and end of another interval.\u003c/p\u003e\n\n\u003cp\u003eInsert \u003ccode\u003enewInterval\u003c/code\u003e into \u003ccode\u003eintervals\u003c/code\u003e such that \u003ccode\u003eintervals\u003c/code\u003e is still sorted in ascending order by \u003ccode\u003estart\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003eintervals\u003c/code\u003e still does not have any overlapping intervals (merge overlapping intervals if necessary).\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003eintervals\u003c/code\u003e\u003cem\u003e after the insertion\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you don\u0026#39;t need to modify \u003ccode\u003eintervals\u003c/code\u003e in-place. You can make a new array and return it.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,3],[6,9]], newInterval = [2,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,5],[6,9]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2],[3,10],[12,16]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= intervals.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eintervals[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= start\u003csub\u003ei\u003c/sub\u003e \u0026lt;= end\u003csub\u003ei\u003c/sub\u003e \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eintervals\u003c/code\u003e is sorted by \u003ccode\u003estart\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e in \u003cstrong\u003eascending\u003c/strong\u003e order.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enewInterval.length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= start \u0026lt;= end \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":893,"example_test_cases":"[[1,3],[6,9]]\n[2,5]\n[[1,2],[3,5],[6,7],[8,10],[12,16]]\n[4,8]","frontend_id":"57","id":"57","is_paid_only":false,"likes":11252,"title":"Insert Interval","title_slug":"insert-interval","topic_tags":["Array"],"total_accepted":1517692,"total_submissions":3467211,"url":"https://leetcode.com/problems/insert-interval/"}
{"acceptance_rate":0.690458228709902,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def intToRoman(self, num: int) -\u003e str:\n        ","lang":"python3"},{"code":"char* intToRoman(int num) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};","lang":"javascript"},{"code":"function intToRoman(num: number): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func intToRoman(_ num: Int) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String intToRoman(int num) {\n    \n  }\n}","lang":"dart"},{"code":"func intToRoman(num int) string {\n    \n}","lang":"golang"},{"code":"# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn int_to_roman(num: i32) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (int-to-roman num)\n  (-\u003e exact-integer? string?)\n  )","lang":"racket"},{"code":"-spec int_to_roman(Num :: integer()) -\u003e unicode:unicode_binary().\nint_to_roman(Num) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eSeven different symbols represent Roman numerals with the following values:\u003c/p\u003e\n\n\u003ctable\u003e\n\t\u003cthead\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth\u003eSymbol\u003c/th\u003e\n\t\t\t\u003cth\u003eValue\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/thead\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eI\u003c/td\u003e\n\t\t\t\u003ctd\u003e1\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eV\u003c/td\u003e\n\t\t\t\u003ctd\u003e5\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eX\u003c/td\u003e\n\t\t\t\u003ctd\u003e10\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eL\u003c/td\u003e\n\t\t\t\u003ctd\u003e50\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eC\u003c/td\u003e\n\t\t\t\u003ctd\u003e100\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eD\u003c/td\u003e\n\t\t\t\u003ctd\u003e500\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003eM\u003c/td\u003e\n\t\t\t\u003ctd\u003e1000\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eRoman numerals are formed by appending\u0026nbsp;the conversions of\u0026nbsp;decimal place values\u0026nbsp;from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf the value does not start with 4 or\u0026nbsp;9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\u003c/li\u003e\n\t\u003cli\u003eIf the value starts with 4 or 9 use the\u0026nbsp;\u003cstrong\u003esubtractive form\u003c/strong\u003e\u0026nbsp;representing\u0026nbsp;one symbol subtracted from the following symbol, for example,\u0026nbsp;4 is 1 (\u003ccode\u003eI\u003c/code\u003e) less than 5 (\u003ccode\u003eV\u003c/code\u003e): \u003ccode\u003eIV\u003c/code\u003e\u0026nbsp;and 9 is 1 (\u003ccode\u003eI\u003c/code\u003e) less than 10 (\u003ccode\u003eX\u003c/code\u003e): \u003ccode\u003eIX\u003c/code\u003e.\u0026nbsp;Only the following subtractive forms are used: 4 (\u003ccode\u003eIV\u003c/code\u003e), 9 (\u003ccode\u003eIX\u003c/code\u003e),\u0026nbsp;40 (\u003ccode\u003eXL\u003c/code\u003e), 90 (\u003ccode\u003eXC\u003c/code\u003e), 400 (\u003ccode\u003eCD\u003c/code\u003e) and 900 (\u003ccode\u003eCM\u003c/code\u003e).\u003c/li\u003e\n\t\u003cli\u003eOnly powers of 10 (\u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eM\u003c/code\u003e) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5\u0026nbsp;(\u003ccode\u003eV\u003c/code\u003e), 50 (\u003ccode\u003eL\u003c/code\u003e), or 500 (\u003ccode\u003eD\u003c/code\u003e) multiple times. If you need to append a symbol\u0026nbsp;4 times\u0026nbsp;use the \u003cstrong\u003esubtractive form\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGiven an integer, convert it to a Roman numeral.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enum = 3749\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;MMMDCCXLIX\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enum = 58\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;LVIII\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n50 = L\n 8 = VIII\n\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enum = 1994\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;MCMXCIV\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= num \u0026lt;= 3999\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":5675,"example_test_cases":"3749\n58\n1994","frontend_id":"12","id":"12","is_paid_only":false,"likes":7994,"title":"Integer to Roman","title_slug":"integer-to-roman","topic_tags":["Hash Table","Math","String"],"total_accepted":1811277,"total_submissions":2623297,"url":"https://leetcode.com/problems/integer-to-roman/"}
{"acceptance_rate":0.7670502496617004,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e intersection(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] Intersection(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n    \n};","lang":"javascript"},{"code":"function intersection(nums1: number[], nums2: number[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersection($nums1, $nums2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e intersection(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}","lang":"dart"},{"code":"func intersection(nums1 []int, nums2 []int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersection(nums1, nums2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn intersection(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (intersection nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec intersection(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e [integer()].\nintersection(Nums1, Nums2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec intersection(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def intersection(nums1, nums2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, return \u003cem\u003ean array of their \u003cspan data-keyword=\"array-intersection\"\u003eintersection\u003c/span\u003e\u003c/em\u003e. Each element in the result must be \u003cstrong\u003eunique\u003c/strong\u003e and you may return the result in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,2,1], nums2 = [2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [9,4]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e [4,9] is also accepted.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":2326,"example_test_cases":"[1,2,2,1]\n[2,2]\n[4,9,5]\n[9,4,9,8,4]","frontend_id":"349","id":"349","is_paid_only":false,"likes":6544,"title":"Intersection of Two Arrays","title_slug":"intersection-of-two-arrays","topic_tags":["Array","Hash Table","Two Pointers","Binary Search","Sorting"],"total_accepted":1590560,"total_submissions":2073606,"url":"https://leetcode.com/problems/intersection-of-two-arrays/"}
{"acceptance_rate":0.5309296129108061,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findMaximizedCapital(int k, int w, vector\u003cint\u003e\u0026 profits, vector\u003cint\u003e\u0026 capital) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int findMaximizedCapital(int k, int w, int* profits, int profitsSize, int* capital, int capitalSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindMaximizedCapital(int k, int w, int[] profits, int[] capital) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} k\n * @param {number} w\n * @param {number[]} profits\n * @param {number[]} capital\n * @return {number}\n */\nvar findMaximizedCapital = function(k, w, profits, capital) {\n    \n};","lang":"javascript"},{"code":"function findMaximizedCapital(k: number, w: number, profits: number[], capital: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $w\n     * @param Integer[] $profits\n     * @param Integer[] $capital\n     * @return Integer\n     */\n    function findMaximizedCapital($k, $w, $profits, $capital) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findMaximizedCapital(_ k: Int, _ w: Int, _ profits: [Int], _ capital: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findMaximizedCapital(k: Int, w: Int, profits: IntArray, capital: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findMaximizedCapital(int k, int w, List\u003cint\u003e profits, List\u003cint\u003e capital) {\n    \n  }\n}","lang":"dart"},{"code":"func findMaximizedCapital(k int, w int, profits []int, capital []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} k\n# @param {Integer} w\n# @param {Integer[]} profits\n# @param {Integer[]} capital\n# @return {Integer}\ndef find_maximized_capital(k, w, profits, capital)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findMaximizedCapital(k: Int, w: Int, profits: Array[Int], capital: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_maximized_capital(k: i32, w: i32, profits: Vec\u003ci32\u003e, capital: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-maximized-capital k w profits capital)\n  (-\u003e exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_maximized_capital(K :: integer(), W :: integer(), Profits :: [integer()], Capital :: [integer()]) -\u003e integer().\nfind_maximized_capital(K, W, Profits, Capital) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_maximized_capital(k :: integer, w :: integer, profits :: [integer], capital :: [integer]) :: integer\n  def find_maximized_capital(k, w, profits, capital) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eSuppose LeetCode will start its \u003cstrong\u003eIPO\u003c/strong\u003e soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the \u003cstrong\u003eIPO\u003c/strong\u003e. Since it has limited resources, it can only finish at most \u003ccode\u003ek\u003c/code\u003e distinct projects before the \u003cstrong\u003eIPO\u003c/strong\u003e. Help LeetCode design the best way to maximize its total capital after finishing at most \u003ccode\u003ek\u003c/code\u003e distinct projects.\u003c/p\u003e\n\n\u003cp\u003eYou are given \u003ccode\u003en\u003c/code\u003e projects where the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e project has a pure profit \u003ccode\u003eprofits[i]\u003c/code\u003e and a minimum capital of \u003ccode\u003ecapital[i]\u003c/code\u003e is needed to start it.\u003c/p\u003e\n\n\u003cp\u003eInitially, you have \u003ccode\u003ew\u003c/code\u003e capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\u003c/p\u003e\n\n\u003cp\u003ePick a list of \u003cstrong\u003eat most\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e distinct projects from given projects to \u003cstrong\u003emaximize your final capital\u003c/strong\u003e, and return \u003cem\u003ethe final maximized capital\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe answer is guaranteed to fit in a 32-bit signed integer.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= w \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en == profits.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en == capital.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= profits[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= capital[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":276,"example_test_cases":"2\n0\n[1,2,3]\n[0,1,1]\n3\n0\n[1,2,3]\n[0,1,2]","frontend_id":"502","id":"502","is_paid_only":false,"likes":4036,"title":"IPO","title_slug":"ipo","topic_tags":["Array","Greedy","Sorting","Heap (Priority Queue)"],"total_accepted":280162,"total_submissions":527682,"url":"https://leetcode.com/problems/ipo/"}
{"acceptance_rate":0.48509376385580727,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isSubsequence(char* s, char* t) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsSubsequence(string s, string t) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    \n};","lang":"javascript"},{"code":"function isSubsequence(s: string, t: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isSubsequence($s, $t) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isSubsequence(_ s: String, _ t: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isSubsequence(String s, String t) {\n    \n  }\n}","lang":"dart"},{"code":"func isSubsequence(s string, t string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_subsequence(s, t)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_subsequence(s: String, t: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-subsequence s t)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec is_subsequence(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -\u003e boolean().\nis_subsequence(S, T) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_subsequence(s :: String.t, t :: String.t) :: boolean\n  def is_subsequence(s, t) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e\u003cem\u003e is a \u003cstrong\u003esubsequence\u003c/strong\u003e of \u003c/em\u003e\u003ccode\u003et\u003c/code\u003e\u003cem\u003e, or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \u003ccode\u003e\u0026quot;ace\u0026quot;\u003c/code\u003e is a subsequence of \u003ccode\u003e\u0026quot;\u003cu\u003ea\u003c/u\u003eb\u003cu\u003ec\u003c/u\u003ed\u003cu\u003ee\u003c/u\u003e\u0026quot;\u003c/code\u003e while \u003ccode\u003e\u0026quot;aec\u0026quot;\u003c/code\u003e is not).\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \"abc\", t = \"ahbgdc\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \"axc\", t = \"ahbgdc\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= s.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= t.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e consist only of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e Suppose there are lots of incoming \u003ccode\u003es\u003c/code\u003e, say \u003ccode\u003es\u003csub\u003e1\u003c/sub\u003e, s\u003csub\u003e2\u003c/sub\u003e, ..., s\u003csub\u003ek\u003c/sub\u003e\u003c/code\u003e where \u003ccode\u003ek \u0026gt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e, and you want to check one by one to see if \u003ccode\u003et\u003c/code\u003e has its subsequence. In this scenario, how would you change your code?","difficulty":"Easy","dislikes":586,"example_test_cases":"\"abc\"\n\"ahbgdc\"\n\"axc\"\n\"ahbgdc\"","frontend_id":"392","id":"392","is_paid_only":false,"likes":10397,"title":"Is Subsequence","title_slug":"is-subsequence","topic_tags":["Two Pointers","String","Dynamic Programming"],"total_accepted":2158594,"total_submissions":4449849,"url":"https://leetcode.com/problems/is-subsequence/"}
{"acceptance_rate":0.4715140634350688,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isIsomorphic(char* s, char* t) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsIsomorphic(string s, string t) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isIsomorphic = function(s, t) {\n    \n};","lang":"javascript"},{"code":"function isIsomorphic(s: string, t: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isIsomorphic($s, $t) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isIsomorphic(_ s: String, _ t: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isIsomorphic(s: String, t: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isIsomorphic(String s, String t) {\n    \n  }\n}","lang":"dart"},{"code":"func isIsomorphic(s string, t string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_isomorphic(s, t)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isIsomorphic(s: String, t: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_isomorphic(s: String, t: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-isomorphic s t)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec is_isomorphic(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -\u003e boolean().\nis_isomorphic(S, T) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_isomorphic(s :: String.t, t :: String.t) :: boolean\n  def is_isomorphic(s, t) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e, \u003cem\u003edetermine if they are isomorphic\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTwo strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e are isomorphic if the characters in \u003ccode\u003es\u003c/code\u003e can be replaced to get \u003ccode\u003et\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;egg\u0026quot;, t = \u0026quot;add\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e can be made identical by:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eMapping \u003ccode\u003e\u0026#39;e\u0026#39;\u003c/code\u003e to \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eMapping \u003ccode\u003e\u0026#39;g\u0026#39;\u003c/code\u003e to \u003ccode\u003e\u0026#39;d\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;foo\u0026quot;, t = \u0026quot;bar\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e can not be made identical as \u003ccode\u003e\u0026#39;o\u0026#39;\u003c/code\u003e needs to be mapped to both \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;r\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;paper\u0026quot;, t = \u0026quot;title\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003et.length == s.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e consist of any valid ascii character.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":2227,"example_test_cases":"\"egg\"\n\"add\"\n\"foo\"\n\"bar\"\n\"paper\"\n\"title\"","frontend_id":"205","id":"205","is_paid_only":false,"likes":9923,"title":"Isomorphic Strings","title_slug":"isomorphic-strings","topic_tags":["Hash Table","String"],"total_accepted":1867323,"total_submissions":3960270,"url":"https://leetcode.com/problems/isomorphic-strings/"}
{"acceptance_rate":0.4173625063648078,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int jump(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def jump(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int jump(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Jump(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};","lang":"javascript"},{"code":"function jump(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func jump(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun jump(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int jump(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func jump(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn jump(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (jump nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec jump(Nums :: [integer()]) -\u003e integer().\njump(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec jump(nums :: [integer]) :: integer\n  def jump(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array of integers \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e. You are initially positioned at\u0026nbsp;index 0.\u003c/p\u003e\n\n\u003cp\u003eEach element \u003ccode\u003enums[i]\u003c/code\u003e represents the maximum length of a forward jump from index \u003ccode\u003ei\u003c/code\u003e. In other words, if you are at index \u003ccode\u003ei\u003c/code\u003e, you can jump to any index \u003ccode\u003e(i + j)\u003c/code\u003e\u0026nbsp;where:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= j \u0026lt;= nums[i]\u003c/code\u003e and\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ei + j \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe minimum number of jumps to reach index \u003c/em\u003e\u003ccode\u003en - 1\u003c/code\u003e. The test cases are generated such that you can reach index\u0026nbsp;\u003ccode\u003en - 1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,3,1,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,3,0,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eIt\u0026#39;s guaranteed that you can reach \u003ccode\u003enums[n - 1]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":673,"example_test_cases":"[2,3,1,1,4]\n[2,3,0,1,4]","frontend_id":"45","id":"45","is_paid_only":false,"likes":15788,"title":"Jump Game II","title_slug":"jump-game-ii","topic_tags":["Array","Dynamic Programming","Greedy"],"total_accepted":1816385,"total_submissions":4352056,"url":"https://leetcode.com/problems/jump-game-ii/"}
{"acceptance_rate":0.3973452529053667,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canJump(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canJump(self, nums: List[int]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canJump(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};","lang":"javascript"},{"code":"function canJump(nums: number[]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canJump(_ nums: [Int]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canJump(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func canJump(nums []int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_jump(nums: Vec\u003ci32\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-jump nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )","lang":"racket"},{"code":"-spec can_jump(Nums :: [integer()]) -\u003e boolean().\ncan_jump(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e. You are initially positioned at the array\u0026#39;s \u003cstrong\u003efirst index\u003c/strong\u003e, and each element in the array represents your maximum jump length at that position.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if you can reach the last index, or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,3,1,1,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,2,1,0,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1410,"example_test_cases":"[2,3,1,1,4]\n[3,2,1,0,4]","frontend_id":"55","id":"55","is_paid_only":false,"likes":20862,"title":"Jump Game","title_slug":"jump-game","topic_tags":["Array","Dynamic Programming","Greedy"],"total_accepted":2744892,"total_submissions":6908078,"url":"https://leetcode.com/problems/jump-game/"}
{"acceptance_rate":0.7489067218016034,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canVisitAllRooms(vector\u003cvector\u003cint\u003e\u003e\u0026 rooms) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canVisitAllRooms(List\u003cList\u003cInteger\u003e\u003e rooms) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canVisitAllRooms(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canVisitAllRooms(int** rooms, int roomsSize, int* roomsColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanVisitAllRooms(IList\u003cIList\u003cint\u003e\u003e rooms) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n    \n};","lang":"javascript"},{"code":"function canVisitAllRooms(rooms: number[][]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $rooms\n     * @return Boolean\n     */\n    function canVisitAllRooms($rooms) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canVisitAllRooms(_ rooms: [[Int]]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canVisitAllRooms(rooms: List\u003cList\u003cInt\u003e\u003e): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canVisitAllRooms(List\u003cList\u003cint\u003e\u003e rooms) {\n    \n  }\n}","lang":"dart"},{"code":"func canVisitAllRooms(rooms [][]int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} rooms\n# @return {Boolean}\ndef can_visit_all_rooms(rooms)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canVisitAllRooms(rooms: List[List[Int]]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_visit_all_rooms(rooms: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-visit-all-rooms rooms)\n  (-\u003e (listof (listof exact-integer?)) boolean?)\n  )","lang":"racket"},{"code":"-spec can_visit_all_rooms(Rooms :: [[integer()]]) -\u003e boolean().\ncan_visit_all_rooms(Rooms) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_visit_all_rooms(rooms :: [[integer]]) :: boolean\n  def can_visit_all_rooms(rooms) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e rooms labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e\u0026nbsp;and all the rooms are locked except for room \u003ccode\u003e0\u003c/code\u003e. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\u003c/p\u003e\n\n\u003cp\u003eWhen you visit a room, you may find a set of \u003cstrong\u003edistinct keys\u003c/strong\u003e in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\u003c/p\u003e\n\n\u003cp\u003eGiven an array \u003ccode\u003erooms\u003c/code\u003e where \u003ccode\u003erooms[i]\u003c/code\u003e is the set of keys that you can obtain if you visited room \u003ccode\u003ei\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif you can visit \u003cstrong\u003eall\u003c/strong\u003e the rooms, or\u003c/em\u003e \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eotherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e rooms = [[1],[2],[3],[]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e rooms = [[1,3],[3,0,1],[2],[0]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We can not enter room number 2 since the only key that unlocks it is in that room.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == rooms.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= n \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= rooms[i].length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= sum(rooms[i].length) \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= rooms[i][j] \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the values of \u003ccode\u003erooms[i]\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":294,"example_test_cases":"[[1],[2],[3],[]]\n[[1,3],[3,0,1],[2],[0]]","frontend_id":"841","id":"871","is_paid_only":false,"likes":6489,"title":"Keys and Rooms","title_slug":"keys-and-rooms","topic_tags":["Depth-First Search","Breadth-First Search","Graph"],"total_accepted":604179,"total_submissions":806748,"url":"https://leetcode.com/problems/keys-and-rooms/"}
{"acceptance_rate":0.8808847846783956,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cbool\u003e kidsWithCandies(vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cBoolean\u003e kidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def kidsWithCandies(self, candies, extraCandies):\n        \"\"\"\n        :type candies: List[int]\n        :type extraCandies: int\n        :rtype: List[bool]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -\u003e List[bool]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* kidsWithCandies(int* candies, int candiesSize, int extraCandies, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cbool\u003e KidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function(candies, extraCandies) {\n    \n};","lang":"javascript"},{"code":"function kidsWithCandies(candies: number[], extraCandies: number): boolean[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $extraCandies\n     * @return Boolean[]\n     */\n    function kidsWithCandies($candies, $extraCandies) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func kidsWithCandies(_ candies: [Int], _ extraCandies: Int) -\u003e [Bool] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun kidsWithCandies(candies: IntArray, extraCandies: Int): List\u003cBoolean\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cbool\u003e kidsWithCandies(List\u003cint\u003e candies, int extraCandies) {\n    \n  }\n}","lang":"dart"},{"code":"func kidsWithCandies(candies []int, extraCandies int) []bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} candies\n# @param {Integer} extra_candies\n# @return {Boolean[]}\ndef kids_with_candies(candies, extra_candies)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def kidsWithCandies(candies: Array[Int], extraCandies: Int): List[Boolean] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn kids_with_candies(candies: Vec\u003ci32\u003e, extra_candies: i32) -\u003e Vec\u003cbool\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (kids-with-candies candies extraCandies)\n  (-\u003e (listof exact-integer?) exact-integer? (listof boolean?))\n  )","lang":"racket"},{"code":"-spec kids_with_candies(Candies :: [integer()], ExtraCandies :: integer()) -\u003e [boolean()].\nkids_with_candies(Candies, ExtraCandies) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec kids_with_candies(candies :: [integer], extra_candies :: integer) :: [boolean]\n  def kids_with_candies(candies, extra_candies) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e kids with candies. You are given an integer array \u003ccode\u003ecandies\u003c/code\u003e, where each \u003ccode\u003ecandies[i]\u003c/code\u003e represents the number of candies the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e kid has, and an integer \u003ccode\u003eextraCandies\u003c/code\u003e, denoting the number of extra candies that you have.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea boolean array \u003c/em\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cem\u003e of length \u003c/em\u003e\u003ccode\u003en\u003c/code\u003e\u003cem\u003e, where \u003c/em\u003e\u003ccode\u003eresult[i]\u003c/code\u003e\u003cem\u003e is \u003c/em\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if, after giving the \u003c/em\u003e\u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e\u003cem\u003e kid all the \u003c/em\u003e\u003ccode\u003eextraCandies\u003c/code\u003e\u003cem\u003e, they will have the \u003cstrong\u003egreatest\u003c/strong\u003e number of candies among all the kids\u003c/em\u003e\u003cem\u003e, or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that \u003cstrong\u003emultiple\u003c/strong\u003e kids can have the \u003cstrong\u003egreatest\u003c/strong\u003e number of candies.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candies = [2,3,5,1,3], extraCandies = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [true,true,true,false,true] \n\u003cstrong\u003eExplanation:\u003c/strong\u003e If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candies = [4,2,1,1,2], extraCandies = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [true,false,false,false,false] \n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e candies = [12,1,12], extraCandies = 10\n\u003cstrong\u003eOutput:\u003c/strong\u003e [true,false,true]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == candies.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= n \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= candies[i] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= extraCandies \u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":615,"example_test_cases":"[2,3,5,1,3]\n3\n[4,2,1,1,2]\n1\n[12,1,12]\n10","frontend_id":"1431","id":"1528","is_paid_only":false,"likes":4791,"title":"Kids With the Greatest Number of Candies","title_slug":"kids-with-the-greatest-number-of-candies","topic_tags":["Array"],"total_accepted":1336045,"total_submissions":1516708,"url":"https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/"}
{"acceptance_rate":0.490175389820262,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minEatingSpeed(vector\u003cint\u003e\u0026 piles, int h) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minEatingSpeed(self, piles, h):\n        \"\"\"\n        :type piles: List[int]\n        :type h: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -\u003e int:\n        ","lang":"python3"},{"code":"int minEatingSpeed(int* piles, int pilesSize, int h) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinEatingSpeed(int[] piles, int h) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} piles\n * @param {number} h\n * @return {number}\n */\nvar minEatingSpeed = function(piles, h) {\n    \n};","lang":"javascript"},{"code":"function minEatingSpeed(piles: number[], h: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @param Integer $h\n     * @return Integer\n     */\n    function minEatingSpeed($piles, $h) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minEatingSpeed(_ piles: [Int], _ h: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minEatingSpeed(piles: IntArray, h: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minEatingSpeed(List\u003cint\u003e piles, int h) {\n    \n  }\n}","lang":"dart"},{"code":"func minEatingSpeed(piles []int, h int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} piles\n# @param {Integer} h\n# @return {Integer}\ndef min_eating_speed(piles, h)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minEatingSpeed(piles: Array[Int], h: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_eating_speed(piles: Vec\u003ci32\u003e, h: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-eating-speed piles h)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec min_eating_speed(Piles :: [integer()], H :: integer()) -\u003e integer().\nmin_eating_speed(Piles, H) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_eating_speed(piles :: [integer], h :: integer) :: integer\n  def min_eating_speed(piles, h) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eKoko loves to eat bananas. There are \u003ccode\u003en\u003c/code\u003e piles of bananas, the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e pile has \u003ccode\u003epiles[i]\u003c/code\u003e bananas. The guards have gone and will come back in \u003ccode\u003eh\u003c/code\u003e hours.\u003c/p\u003e\n\n\u003cp\u003eKoko can decide her bananas-per-hour eating speed of \u003ccode\u003ek\u003c/code\u003e. Each hour, she chooses some pile of bananas and eats \u003ccode\u003ek\u003c/code\u003e bananas from that pile. If the pile has less than \u003ccode\u003ek\u003c/code\u003e bananas, she eats all of them instead and will not eat any more bananas during this hour.\u003c/p\u003e\n\n\u003cp\u003eKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe minimum integer\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003esuch that she can eat all the bananas within\u003c/em\u003e \u003ccode\u003eh\u003c/code\u003e \u003cem\u003ehours\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e piles = [3,6,7,11], h = 8\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e piles = [30,11,23,4,20], h = 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e 30\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e piles = [30,11,23,4,20], h = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e 23\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= piles.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epiles.length \u0026lt;= h \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= piles[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":830,"example_test_cases":"[3,6,7,11]\n8\n[30,11,23,4,20]\n5\n[30,11,23,4,20]\n6","frontend_id":"875","id":"907","is_paid_only":false,"likes":12578,"title":"Koko Eating Bananas","title_slug":"koko-eating-bananas","topic_tags":["Array","Binary Search"],"total_accepted":1212989,"total_submissions":2474602,"url":"https://leetcode.com/problems/koko-eating-bananas/"}
{"acceptance_rate":0.682189056715016,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findKthLargest(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -\u003e int:\n        ","lang":"python3"},{"code":"int findKthLargest(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function findKthLargest(nums: number[], k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findKthLargest(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func findKthLargest(nums []int, k int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_kth_largest(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-kth-largest nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_kth_largest(Nums :: [integer()], K :: integer()) -\u003e integer().\nfind_kth_largest(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\n  def find_kth_largest(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe\u003c/em\u003e \u003ccode\u003ek\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e \u003cem\u003elargest element in the array\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that it is the \u003ccode\u003ek\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e largest element in the sorted order, not the \u003ccode\u003ek\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e distinct element.\u003c/p\u003e\n\n\u003cp\u003eCan you solve it without sorting?\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,2,1,5,6,4], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,2,3,1,2,4,5,5,6], k = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":946,"example_test_cases":"[3,2,1,5,6,4]\n2\n[3,2,3,1,2,4,5,5,6]\n4","frontend_id":"215","id":"215","is_paid_only":false,"likes":18097,"title":"Kth Largest Element in an Array","title_slug":"kth-largest-element-in-an-array","topic_tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"],"total_accepted":3140282,"total_submissions":4603243,"url":"https://leetcode.com/problems/kth-largest-element-in-an-array/"}
{"acceptance_rate":0.5677615399563353,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def lengthOfLastWord(self, s: str) -\u003e int:\n        ","lang":"python3"},{"code":"int lengthOfLastWord(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LengthOfLastWord(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLastWord = function(s) {\n    \n};","lang":"javascript"},{"code":"function lengthOfLastWord(s: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLastWord($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func lengthOfLastWord(_ s: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun lengthOfLastWord(s: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int lengthOfLastWord(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func lengthOfLastWord(s string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer}\ndef length_of_last_word(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def lengthOfLastWord(s: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn length_of_last_word(s: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (length-of-last-word s)\n  (-\u003e string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec length_of_last_word(S :: unicode:unicode_binary()) -\u003e integer().\nlength_of_last_word(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec length_of_last_word(s :: String.t) :: integer\n  def length_of_last_word(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e consisting of words and spaces, return \u003cem\u003ethe length of the \u003cstrong\u003elast\u003c/strong\u003e word in the string.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003eword\u003c/strong\u003e is a maximal \u003cspan data-keyword=\"substring-nonempty\"\u003esubstring\u003c/span\u003e consisting of non-space characters only.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;Hello World\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The last word is \u0026quot;World\u0026quot; with length 5.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;   fly me   to   the moon  \u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The last word is \u0026quot;moon\u0026quot; with length 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;luffy is still joyboy\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The last word is \u0026quot;joyboy\u0026quot; with length 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of only English letters and spaces \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThere will be at least one word in \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":331,"example_test_cases":"\"Hello World\"\n\"   fly me   to   the moon  \"\n\"luffy is still joyboy\"","frontend_id":"58","id":"58","is_paid_only":false,"likes":5893,"title":"Length of Last Word","title_slug":"length-of-last-word","topic_tags":["String"],"total_accepted":2883750,"total_submissions":5079157,"url":"https://leetcode.com/problems/length-of-last-word/"}
{"acceptance_rate":0.458619077456242,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string longestCommonPrefix(vector\u003cstring\u003e\u0026 strs) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -\u003e str:\n        ","lang":"python3"},{"code":"char* longestCommonPrefix(char** strs, int strsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};","lang":"javascript"},{"code":"function longestCommonPrefix(strs: string[]): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestCommonPrefix(_ strs: [String]) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestCommonPrefix(strs: Array\u003cString\u003e): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String longestCommonPrefix(List\u003cString\u003e strs) {\n    \n  }\n}","lang":"dart"},{"code":"func longestCommonPrefix(strs []string) string {\n    \n}","lang":"golang"},{"code":"# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_common_prefix(strs: Vec\u003cString\u003e) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-common-prefix strs)\n  (-\u003e (listof string?) string?)\n  )","lang":"racket"},{"code":"-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -\u003e unicode:unicode_binary().\nlongest_common_prefix(Strs) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eWrite a function to find the longest common prefix string amongst an array of strings.\u003c/p\u003e\n\n\u003cp\u003eIf there is no common prefix, return an empty string \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e strs = [\u0026quot;flower\u0026quot;,\u0026quot;flow\u0026quot;,\u0026quot;flight\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;fl\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e strs = [\u0026quot;dog\u0026quot;,\u0026quot;racecar\u0026quot;,\u0026quot;car\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no common prefix among the input strings.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= strs.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= strs[i].length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003estrs[i]\u003c/code\u003e consists of only lowercase English letters if it is non-empty.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":4773,"example_test_cases":"[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]","frontend_id":"14","id":"14","is_paid_only":false,"likes":19664,"title":"Longest Common Prefix","title_slug":"longest-common-prefix","topic_tags":["Array","String","Trie"],"total_accepted":4781025,"total_submissions":10424828,"url":"https://leetcode.com/problems/longest-common-prefix/"}
{"acceptance_rate":0.5840613518137928,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestCommonSubsequence(self, text1, text2):\n        \"\"\"\n        :type text1: str\n        :type text2: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -\u003e int:\n        ","lang":"python3"},{"code":"int longestCommonSubsequence(char* text1, char* text2) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LongestCommonSubsequence(string text1, string text2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\nvar longestCommonSubsequence = function(text1, text2) {\n    \n};","lang":"javascript"},{"code":"function longestCommonSubsequence(text1: string, text2: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $text1\n     * @param String $text2\n     * @return Integer\n     */\n    function longestCommonSubsequence($text1, $text2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestCommonSubsequence(_ text1: String, _ text2: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestCommonSubsequence(text1: String, text2: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int longestCommonSubsequence(String text1, String text2) {\n    \n  }\n}","lang":"dart"},{"code":"func longestCommonSubsequence(text1 string, text2 string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} text1\n# @param {String} text2\n# @return {Integer}\ndef longest_common_subsequence(text1, text2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestCommonSubsequence(text1: String, text2: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_common_subsequence(text1: String, text2: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-common-subsequence text1 text2)\n  (-\u003e string? string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec longest_common_subsequence(Text1 :: unicode:unicode_binary(), Text2 :: unicode:unicode_binary()) -\u003e integer().\nlongest_common_subsequence(Text1, Text2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_common_subsequence(text1 :: String.t, text2 :: String.t) :: integer\n  def longest_common_subsequence(text1, text2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003etext1\u003c/code\u003e and \u003ccode\u003etext2\u003c/code\u003e, return \u003cem\u003ethe length of their longest \u003cstrong\u003ecommon subsequence\u003c/strong\u003e. \u003c/em\u003eIf there is no \u003cstrong\u003ecommon subsequence\u003c/strong\u003e, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, \u003ccode\u003e\u0026quot;ace\u0026quot;\u003c/code\u003e is a subsequence of \u003ccode\u003e\u0026quot;abcde\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA \u003cstrong\u003ecommon subsequence\u003c/strong\u003e of two strings is a subsequence that is common to both strings.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e text1 = \u0026quot;abcde\u0026quot;, text2 = \u0026quot;ace\u0026quot; \n\u003cstrong\u003eOutput:\u003c/strong\u003e 3  \n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest common subsequence is \u0026quot;ace\u0026quot; and its length is 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e text1 = \u0026quot;abc\u0026quot;, text2 = \u0026quot;abc\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest common subsequence is \u0026quot;abc\u0026quot; and its length is 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e text1 = \u0026quot;abc\u0026quot;, text2 = \u0026quot;def\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no such common subsequence, so the result is 0.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= text1.length, text2.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003etext1\u003c/code\u003e and \u003ccode\u003etext2\u003c/code\u003e consist of only lowercase English characters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":233,"example_test_cases":"\"abcde\"\n\"ace\"\n\"abc\"\n\"abc\"\n\"abc\"\n\"def\"","frontend_id":"1143","id":"1250","is_paid_only":false,"likes":14515,"title":"Longest Common Subsequence","title_slug":"longest-common-subsequence","topic_tags":["String","Dynamic Programming"],"total_accepted":1561335,"total_submissions":2673238,"url":"https://leetcode.com/problems/longest-common-subsequence/"}
{"acceptance_rate":0.46973119503762745,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int longestConsecutive(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestConsecutive(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int longestConsecutive(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LongestConsecutive(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};","lang":"javascript"},{"code":"function longestConsecutive(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestConsecutive($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestConsecutive(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestConsecutive(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int longestConsecutive(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func longestConsecutive(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_consecutive(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_consecutive(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-consecutive nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec longest_consecutive(Nums :: [integer()]) -\u003e integer().\nlongest_consecutive(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_consecutive(nums :: [integer]) :: integer\n  def longest_consecutive(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an unsorted array of integers \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethe length of the longest consecutive elements sequence.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm that runs in\u0026nbsp;\u003ccode\u003eO(n)\u003c/code\u003e\u0026nbsp;time.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [100,4,200,1,3,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest consecutive elements sequence is \u003ccode\u003e[1, 2, 3, 4]\u003c/code\u003e. Therefore its length is 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,3,7,2,5,8,4,6,0,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 9\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,0,1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1179,"example_test_cases":"[100,4,200,1,3,2]\n[0,3,7,2,5,8,4,6,0,1]\n[1,0,1,2]","frontend_id":"128","id":"128","is_paid_only":false,"likes":21782,"title":"Longest Consecutive Sequence","title_slug":"longest-consecutive-sequence","topic_tags":["Array","Hash Table","Union Find"],"total_accepted":2721018,"total_submissions":5792713,"url":"https://leetcode.com/problems/longest-consecutive-sequence/"}
{"acceptance_rate":0.5815528892102704,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int lengthOfLIS(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int lengthOfLIS(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LengthOfLIS(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    \n};","lang":"javascript"},{"code":"function lengthOfLIS(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function lengthOfLIS($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func lengthOfLIS(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun lengthOfLIS(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int lengthOfLIS(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func lengthOfLIS(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef length_of_lis(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn length_of_lis(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (length-of-lis nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec length_of_lis(Nums :: [integer()]) -\u003e integer().\nlength_of_lis(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec length_of_lis(nums :: [integer]) :: integer\n  def length_of_lis(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethe length of the longest \u003cstrong\u003estrictly increasing \u003c/strong\u003e\u003c/em\u003e\u003cspan data-keyword=\"subsequence-array\"\u003e\u003cem\u003e\u003cstrong\u003esubsequence\u003c/strong\u003e\u003c/em\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [10,9,2,5,3,7,101,18]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,0,3,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [7,7,7,7,7,7,7]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 2500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u0026nbsp;Can you come up with an algorithm that runs in\u0026nbsp;\u003ccode\u003eO(n log(n))\u003c/code\u003e time complexity?\u003c/p\u003e\n","difficulty":"Medium","dislikes":489,"example_test_cases":"[10,9,2,5,3,7,101,18]\n[0,1,0,3,2,3]\n[7,7,7,7,7,7,7]","frontend_id":"300","id":"300","is_paid_only":false,"likes":22088,"title":"Longest Increasing Subsequence","title_slug":"longest-increasing-subsequence","topic_tags":["Array","Binary Search","Dynamic Programming"],"total_accepted":2282434,"total_submissions":3924723,"url":"https://leetcode.com/problems/longest-increasing-subsequence/"}
{"acceptance_rate":0.361629864121258,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* longestPalindrome(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};","lang":"javascript"},{"code":"function longestPalindrome(s: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestPalindrome(_ s: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func longestPalindrome(s string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_palindrome(s: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-palindrome s)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec longest_palindrome(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nlongest_palindrome(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return \u003cem\u003ethe longest\u003c/em\u003e \u003cspan data-keyword=\"palindromic-string\"\u003e\u003cem\u003epalindromic\u003c/em\u003e\u003c/span\u003e \u003cspan data-keyword=\"substring-nonempty\"\u003e\u003cem\u003esubstring\u003c/em\u003e\u003c/span\u003e in \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;babad\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;bab\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;aba\u0026quot; is also a valid answer.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;cbbd\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;bb\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consist of only digits and English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1922,"example_test_cases":"\"babad\"\n\"cbbd\"","frontend_id":"5","id":"5","is_paid_only":false,"likes":31225,"title":"Longest Palindromic Substring","title_slug":"longest-palindromic-substring","topic_tags":["Two Pointers","String","Dynamic Programming"],"total_accepted":4037102,"total_submissions":11163630,"url":"https://leetcode.com/problems/longest-palindromic-substring/"}
{"acceptance_rate":0.6940880382804652,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int longestSubarray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int longestSubarray(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestSubarray(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int longestSubarray(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LongestSubarray(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestSubarray = function(nums) {\n    \n};","lang":"javascript"},{"code":"function longestSubarray(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestSubarray($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestSubarray(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestSubarray(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int longestSubarray(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func longestSubarray(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_subarray(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestSubarray(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_subarray(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-subarray nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec longest_subarray(Nums :: [integer()]) -\u003e integer().\nlongest_subarray(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_subarray(nums :: [integer]) :: integer\n  def longest_subarray(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a binary array \u003ccode\u003enums\u003c/code\u003e, you should delete one element from it.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe size of the longest non-empty subarray containing only \u003c/em\u003e\u003ccode\u003e1\u003c/code\u003e\u003cem\u003e\u0026#39;s in the resulting array\u003c/em\u003e. Return \u003ccode\u003e0\u003c/code\u003e if there is no such subarray.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,0,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1\u0026#39;s.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,1,1,0,1,1,0,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1\u0026#39;s is [1,1,1,1,1].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You must delete one element.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i]\u003c/code\u003e is either \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":95,"example_test_cases":"[1,1,0,1]\n[0,1,1,1,0,1,1,0,1]\n[1,1,1]","frontend_id":"1493","id":"1586","is_paid_only":false,"likes":4298,"title":"Longest Subarray of 1's After Deleting One Element","title_slug":"longest-subarray-of-1s-after-deleting-one-element","topic_tags":["Array","Dynamic Programming","Sliding Window"],"total_accepted":449810,"total_submissions":648059,"url":"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/"}
{"acceptance_rate":0.372854425006879,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -\u003e int:\n        ","lang":"python3"},{"code":"int lengthOfLongestSubstring(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};","lang":"javascript"},{"code":"function lengthOfLongestSubstring(s: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func lengthOfLongestSubstring(_ s: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func lengthOfLongestSubstring(s string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn length_of_longest_substring(s: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (length-of-longest-substring s)\n  (-\u003e string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec length_of_longest_substring(S :: unicode:unicode_binary()) -\u003e integer().\nlength_of_longest_substring(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, find the length of the \u003cstrong\u003elongest\u003c/strong\u003e \u003cspan data-keyword=\"substring-nonempty\"\u003e\u003cstrong\u003esubstring\u003c/strong\u003e\u003c/span\u003e without duplicate characters.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;abcabcbb\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026quot;abc\u0026quot;, with the length of 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;bbbbb\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026quot;b\u0026quot;, with the length of 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;pwwkew\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026quot;wke\u0026quot;, with the length of 3.\nNotice that the answer must be a substring, \u0026quot;pwke\u0026quot; is a subsequence and not a substring.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= s.length \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of English letters, digits, symbols and spaces.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":2079,"example_test_cases":"\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"","frontend_id":"3","id":"3","is_paid_only":false,"likes":42723,"title":"Longest Substring Without Repeating Characters","title_slug":"longest-substring-without-repeating-characters","topic_tags":["Hash Table","String","Sliding Window"],"total_accepted":7891795,"total_submissions":21165888,"url":"https://leetcode.com/problems/longest-substring-without-repeating-characters/"}
{"acceptance_rate":0.3665345267447102,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestValidParentheses(self, s: str) -\u003e int:\n        ","lang":"python3"},{"code":"int longestValidParentheses(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};","lang":"javascript"},{"code":"function longestValidParentheses(s: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestValidParentheses(_ s: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func longestValidParentheses(s string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_valid_parentheses(s: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-valid-parentheses s)\n  (-\u003e string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -\u003e integer().\nlongest_valid_parentheses(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string containing just the characters \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e, return \u003cem\u003ethe length of the longest valid (well-formed) parentheses \u003c/em\u003e\u003cspan data-keyword=\"substring-nonempty\"\u003e\u003cem\u003esubstring\u003c/em\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;(()\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest valid parentheses substring is \u0026quot;()\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;)()())\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest valid parentheses substring is \u0026quot;()()\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= s.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es[i]\u003c/code\u003e is \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e, or \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":447,"example_test_cases":"\"(()\"\n\")()())\"\n\"\"","frontend_id":"32","id":"32","is_paid_only":false,"likes":12934,"title":"Longest Valid Parentheses","title_slug":"longest-valid-parentheses","topic_tags":["String","Dynamic Programming","Stack"],"total_accepted":941625,"total_submissions":2568994,"url":"https://leetcode.com/problems/longest-valid-parentheses/"}
{"acceptance_rate":0.658085741173775,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int majorityElement(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int majorityElement(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};","lang":"javascript"},{"code":"function majorityElement(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func majorityElement(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int majorityElement(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func majorityElement(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn majority_element(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (majority-element nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec majority_element(Nums :: [integer()]) -\u003e integer().\nmajority_element(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe majority element\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe majority element is the element that appears more than \u003ccode\u003e\u0026lfloor;n / 2\u0026rfloor;\u003c/code\u003e times. You may assume that the majority element always exists in the array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,2,1,1,1,2,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == nums.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow-up:\u003c/strong\u003e Could you solve the problem in linear time and in \u003ccode\u003eO(1)\u003c/code\u003e space?","difficulty":"Easy","dislikes":751,"example_test_cases":"[3,2,3]\n[2,2,1,1,1,2,2]","frontend_id":"169","id":"169","is_paid_only":false,"likes":21436,"title":"Majority Element","title_slug":"majority-element","topic_tags":["Array","Hash Table","Divide and Conquer","Sorting","Counting"],"total_accepted":4549556,"total_submissions":6913318,"url":"https://leetcode.com/problems/majority-element/"}
{"acceptance_rate":0.663487623955269,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int longestOnes(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int longestOnes(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def longestOnes(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def longestOnes(self, nums: List[int], k: int) -\u003e int:\n        ","lang":"python3"},{"code":"int longestOnes(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LongestOnes(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar longestOnes = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function longestOnes(nums: number[], k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function longestOnes($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func longestOnes(_ nums: [Int], _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun longestOnes(nums: IntArray, k: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int longestOnes(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func longestOnes(nums []int, k int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef longest_ones(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def longestOnes(nums: Array[Int], k: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn longest_ones(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (longest-ones nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec longest_ones(Nums :: [integer()], K :: integer()) -\u003e integer().\nlongest_ones(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec longest_ones(nums :: [integer], k :: integer) :: integer\n  def longest_ones(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a binary array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe maximum number of consecutive \u003c/em\u003e\u003ccode\u003e1\u003c/code\u003e\u003cem\u003e\u0026#39;s in the array if you can flip at most\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003ccode\u003e0\u003c/code\u003e\u0026#39;s.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e [1,1,1,0,0,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e,1,1,1,1,\u003cstrong\u003e1\u003c/strong\u003e\u003c/u\u003e]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 10\n\u003cstrong\u003eExplanation:\u003c/strong\u003e [0,0,\u003cu\u003e1,1,\u003cstrong\u003e1\u003c/strong\u003e,\u003cstrong\u003e1\u003c/strong\u003e,1,1,1,\u003cstrong\u003e1\u003c/strong\u003e,1,1\u003c/u\u003e,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums[i]\u003c/code\u003e is either \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= nums.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":165,"example_test_cases":"[1,1,1,0,0,0,1,1,1,1,0]\n2\n[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1]\n3","frontend_id":"1004","id":"1046","is_paid_only":false,"likes":9707,"title":"Max Consecutive Ones III","title_slug":"max-consecutive-ones-iii","topic_tags":["Array","Binary Search","Sliding Window","Prefix Sum"],"total_accepted":1089797,"total_submissions":1642528,"url":"https://leetcode.com/problems/max-consecutive-ones-iii/"}
{"acceptance_rate":0.564565471423132,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxOperations(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxOperations(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxOperations(self, nums: List[int], k: int) -\u003e int:\n        ","lang":"python3"},{"code":"\n\nint maxOperations(int* nums, int numsSize, int k){\n\n}","lang":"c"},{"code":"public class Solution {\n    public int MaxOperations(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxOperations = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function maxOperations(nums: number[], k: number): number {\n\n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxOperations($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxOperations(_ nums: [Int], _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxOperations(nums: IntArray, k: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"func maxOperations(nums []int, k int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_operations(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_operations(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you can pick two numbers from the array whose sum equals \u003ccode\u003ek\u003c/code\u003e and remove them from the array.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe maximum number of operations you can perform on the array\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,4], k = 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,1,3,4,3], k = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3\u0026#39;s, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":110,"example_test_cases":"[1,2,3,4]\n5\n[3,1,3,4,3]\n6","frontend_id":"1679","id":"1798","is_paid_only":false,"likes":3440,"title":"Max Number of K-Sum Pairs","title_slug":"max-number-of-k-sum-pairs","topic_tags":["Array","Hash Table","Two Pointers","Sorting"],"total_accepted":515988,"total_submissions":913956,"url":"https://leetcode.com/problems/max-number-of-k-sum-pairs/"}
{"acceptance_rate":0.45795338950884384,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    double findMaxAverage(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -\u003e float:\n        ","lang":"python3"},{"code":"double findMaxAverage(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function findMaxAverage(nums: number[], k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -\u003e Double {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  double findMaxAverage(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func findMaxAverage(nums []int, k int) float64 {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_max_average(nums: Vec\u003ci32\u003e, k: i32) -\u003e f64 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-max-average nums k)\n  (-\u003e (listof exact-integer?) exact-integer? flonum?)\n  )","lang":"racket"},{"code":"-spec find_max_average(Nums :: [integer()], K :: integer()) -\u003e float().\nfind_max_average(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\n  def find_max_average(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e consisting of \u003ccode\u003en\u003c/code\u003e elements, and an integer \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFind a contiguous subarray whose \u003cstrong\u003elength is equal to\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e that has the maximum average value and return \u003cem\u003ethis value\u003c/em\u003e. Any answer with a calculation error less than \u003ccode\u003e10\u003csup\u003e-5\u003c/sup\u003e\u003c/code\u003e will be accepted.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,12,-5,-6,50,3], k = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12.75000\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5], k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5.00000\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == nums.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":370,"example_test_cases":"[1,12,-5,-6,50,3]\n4\n[5]\n1","frontend_id":"643","id":"643","is_paid_only":false,"likes":4009,"title":"Maximum Average Subarray I","title_slug":"maximum-average-subarray-i","topic_tags":["Array","Sliding Window"],"total_accepted":904893,"total_submissions":1975950,"url":"https://leetcode.com/problems/maximum-average-subarray-i/"}
{"acceptance_rate":0.607200896100103,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxVowels(string s, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxVowels(String s, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxVowels(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxVowels(self, s: str, k: int) -\u003e int:\n        ","lang":"python3"},{"code":"int maxVowels(char* s, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxVowels(string s, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxVowels = function(s, k) {\n    \n};","lang":"javascript"},{"code":"function maxVowels(s: string, k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxVowels($s, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxVowels(_ s: String, _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxVowels(s: String, k: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxVowels(String s, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func maxVowels(s string, k int) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_vowels(s, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxVowels(s: String, k: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_vowels(s: String, k: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-vowels s k)\n  (-\u003e string? exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_vowels(S :: unicode:unicode_binary(), K :: integer()) -\u003e integer().\nmax_vowels(S, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_vowels(s :: String.t, k :: integer) :: integer\n  def max_vowels(s, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe maximum number of vowel letters in any substring of \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e\u003cem\u003e with length \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVowel letters\u003c/strong\u003e in English are \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;e\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;i\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;o\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;u\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;abciiidef\u0026quot;, k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The substring \u0026quot;iii\u0026quot; contains 3 vowel letters.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;aeiou\u0026quot;, k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Any substring of length 2 contains 2 vowels.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;leetcode\u0026quot;, k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;lee\u0026quot;, \u0026quot;eet\u0026quot; and \u0026quot;ode\u0026quot; contain 2 vowels.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= s.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":145,"example_test_cases":"\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3","frontend_id":"1456","id":"1567","is_paid_only":false,"likes":3769,"title":"Maximum Number of Vowels in a Substring of Given Length","title_slug":"maximum-number-of-vowels-in-a-substring-of-given-length","topic_tags":["String","Sliding Window"],"total_accepted":567561,"total_submissions":934717,"url":"https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/"}
{"acceptance_rate":0.35186798259023166,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxProduct(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxProduct(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxProduct(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};","lang":"javascript"},{"code":"function maxProduct(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxProduct(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxProduct(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func maxProduct(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_product(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-product nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_product(Nums :: [integer()]) -\u003e integer().\nmax_product(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, find a \u003cspan data-keyword=\"subarray-nonempty\"\u003esubarray\u003c/span\u003e that has the largest product, and return \u003cem\u003ethe product\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe test cases are generated so that the answer will fit in a \u003cstrong\u003e32-bit\u003c/strong\u003e integer.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,3,-2,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e [2,3] has the largest product 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-2,0,-1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The result cannot be 2, because [-2,-1] is not a subarray.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10 \u0026lt;= nums[i] \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe product of any subarray of \u003ccode\u003enums\u003c/code\u003e is \u003cstrong\u003eguaranteed\u003c/strong\u003e to fit in a \u003cstrong\u003e32-bit\u003c/strong\u003e integer.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":795,"example_test_cases":"[2,3,-2,4]\n[-2,0,-1]","frontend_id":"152","id":"152","is_paid_only":false,"likes":19647,"title":"Maximum Product Subarray","title_slug":"maximum-product-subarray","topic_tags":["Array","Dynamic Programming"],"total_accepted":1724075,"total_submissions":4899778,"url":"https://leetcode.com/problems/maximum-product-subarray/"}
{"acceptance_rate":0.5229195847765555,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxSubArray(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxSubArray(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxSubArray(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};","lang":"javascript"},{"code":"function maxSubArray(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxSubArray(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxSubArray(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func maxSubArray(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_sub_array(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-sub-array nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_sub_array(Nums :: [integer()]) -\u003e integer().\nmax_sub_array(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, find the \u003cspan data-keyword=\"subarray-nonempty\"\u003esubarray\u003c/span\u003e with the largest sum, and return \u003cem\u003eits sum\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-2,1,-3,4,-1,2,1,-5,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [4,-1,2,1] has the largest sum 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [1] has the largest sum 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5,4,-1,7,8]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 23\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [5,4,-1,7,8] has the largest sum 23.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e If you have figured out the \u003ccode\u003eO(n)\u003c/code\u003e solution, try coding another solution using the \u003cstrong\u003edivide and conquer\u003c/strong\u003e approach, which is more subtle.\u003c/p\u003e\n","difficulty":"Medium","dislikes":1535,"example_test_cases":"[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]","frontend_id":"53","id":"53","is_paid_only":false,"likes":36216,"title":"Maximum Subarray","title_slug":"maximum-subarray","topic_tags":["Array","Divide and Conquer","Dynamic Programming"],"total_accepted":5222503,"total_submissions":9987201,"url":"https://leetcode.com/problems/maximum-subarray/"}
{"acceptance_rate":0.5434664482327943,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    long long maxScore(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public long maxScore(int[] nums1, int[] nums2, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxScore(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -\u003e int:\n        ","lang":"python3"},{"code":"long long maxScore(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public long MaxScore(int[] nums1, int[] nums2, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar maxScore = function(nums1, nums2, k) {\n    \n};","lang":"javascript"},{"code":"function maxScore(nums1: number[], nums2: number[], k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxScore($nums1, $nums2, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxScore(_ nums1: [Int], _ nums2: [Int], _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxScore(nums1: IntArray, nums2: IntArray, k: Int): Long {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxScore(List\u003cint\u003e nums1, List\u003cint\u003e nums2, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func maxScore(nums1 []int, nums2 []int, k int) int64 {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef max_score(nums1, nums2, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxScore(nums1: Array[Int], nums2: Array[Int], k: Int): Long = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_score(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e, k: i32) -\u003e i64 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-score nums1 nums2 k)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_score(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -\u003e integer().\nmax_score(Nums1, Nums2, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_score(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def max_score(nums1, nums2, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given two \u003cstrong\u003e0-indexed\u003c/strong\u003e integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of equal length \u003ccode\u003en\u003c/code\u003e and a positive integer \u003ccode\u003ek\u003c/code\u003e. You must choose a \u003cstrong\u003esubsequence\u003c/strong\u003e of indices from \u003ccode\u003enums1\u003c/code\u003e of length \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor chosen indices \u003ccode\u003ei\u003csub\u003e0\u003c/sub\u003e\u003c/code\u003e, \u003ccode\u003ei\u003csub\u003e1\u003c/sub\u003e\u003c/code\u003e, ..., \u003ccode\u003ei\u003csub\u003ek - 1\u003c/sub\u003e\u003c/code\u003e, your \u003cstrong\u003escore\u003c/strong\u003e is defined as:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe sum of the selected elements from \u003ccode\u003enums1\u003c/code\u003e multiplied with the \u003cstrong\u003eminimum\u003c/strong\u003e of the selected elements from \u003ccode\u003enums2\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIt can defined simply as: \u003ccode\u003e(nums1[i\u003csub\u003e0\u003c/sub\u003e] + nums1[i\u003csub\u003e1\u003c/sub\u003e] +...+ nums1[i\u003csub\u003ek - 1\u003c/sub\u003e]) * min(nums2[i\u003csub\u003e0\u003c/sub\u003e] , nums2[i\u003csub\u003e1\u003c/sub\u003e], ... ,nums2[i\u003csub\u003ek - 1\u003c/sub\u003e])\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e possible score.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e of indices of an array is a set that can be derived from the set \u003ccode\u003e{0, 1, ..., n-1}\u003c/code\u003e by deleting some or no elements.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e 30\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == nums1.length == nums2.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums1[i], nums2[j] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":205,"example_test_cases":"[1,3,3,2]\n[2,1,3,4]\n3\n[4,2,3,1,1]\n[7,5,10,9,6]\n1","frontend_id":"2542","id":"2636","is_paid_only":false,"likes":3038,"title":"Maximum Subsequence Score","title_slug":"maximum-subsequence-score","topic_tags":["Array","Greedy","Sorting","Heap (Priority Queue)"],"total_accepted":134021,"total_submissions":246604,"url":"https://leetcode.com/problems/maximum-subsequence-score/"}
{"acceptance_rate":0.4808486526982547,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxSubarraySumCircular(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int maxSubarraySumCircular(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MaxSubarraySumCircular(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubarraySumCircular = function(nums) {\n    \n};","lang":"javascript"},{"code":"function maxSubarraySumCircular(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubarraySumCircular($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxSubarraySumCircular(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxSubarraySumCircular(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int maxSubarraySumCircular(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func maxSubarraySumCircular(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_subarray_sum_circular(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxSubarraySumCircular(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_subarray_sum_circular(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-subarray-sum-circular nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec max_subarray_sum_circular(Nums :: [integer()]) -\u003e integer().\nmax_subarray_sum_circular(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_subarray_sum_circular(nums :: [integer]) :: integer\n  def max_subarray_sum_circular(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a \u003cstrong\u003ecircular integer array\u003c/strong\u003e \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe maximum possible sum of a non-empty \u003cstrong\u003esubarray\u003c/strong\u003e of \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ecircular array\u003c/strong\u003e means the end of the array connects to the beginning of the array. Formally, the next element of \u003ccode\u003enums[i]\u003c/code\u003e is \u003ccode\u003enums[(i + 1) % n]\u003c/code\u003e and the previous element of \u003ccode\u003enums[i]\u003c/code\u003e is \u003ccode\u003enums[(i - 1 + n) % n]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003esubarray\u003c/strong\u003e may only include each element of the fixed buffer \u003ccode\u003enums\u003c/code\u003e at most once. Formally, for a subarray \u003ccode\u003enums[i], nums[i + 1], ..., nums[j]\u003c/code\u003e, there does not exist \u003ccode\u003ei \u0026lt;= k1\u003c/code\u003e, \u003ccode\u003ek2 \u0026lt;= j\u003c/code\u003e with \u003ccode\u003ek1 % n == k2 % n\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,-2,3,-2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Subarray [3] has maximum sum 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [5,-3,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 10\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Subarray [5,5] has maximum sum 5 + 5 = 10.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-3,-2,-3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Subarray [-2] has maximum sum -2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == nums.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-3 * 10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":331,"example_test_cases":"[1,-2,3,-2]\n[5,-3,5]\n[-3,-2,-3]","frontend_id":"918","id":"954","is_paid_only":false,"likes":7066,"title":"Maximum Sum Circular Subarray","title_slug":"maximum-sum-circular-subarray","topic_tags":["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Queue"],"total_accepted":355577,"total_submissions":739478,"url":"https://leetcode.com/problems/maximum-sum-circular-subarray/"}
{"acceptance_rate":0.4430709752603297,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    double findMedianSortedArrays(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -\u003e float:\n        ","lang":"python3"},{"code":"double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};","lang":"javascript"},{"code":"function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -\u003e Double {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  double findMedianSortedArrays(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}","lang":"dart"},{"code":"func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e f64 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) flonum?)\n  )","lang":"racket"},{"code":"-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e float().\nfind_median_sorted_arrays(Nums1, Nums2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two sorted arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e respectively, return \u003cstrong\u003ethe median\u003c/strong\u003e of the two sorted arrays.\u003c/p\u003e\n\n\u003cp\u003eThe overall run time complexity should be \u003ccode\u003eO(log (m+n))\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,3], nums2 = [2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2.00000\n\u003cstrong\u003eExplanation:\u003c/strong\u003e merged array = [1,2,3] and median is 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2], nums2 = [3,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2.50000\n\u003cstrong\u003eExplanation:\u003c/strong\u003e merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums1.length == m\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums2.length == n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= m \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= n \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m + n \u0026lt;= 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e6\u003c/sup\u003e \u0026lt;= nums1[i], nums2[i] \u0026lt;= 10\u003csup\u003e6\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":3434,"example_test_cases":"[1,3]\n[2]\n[1,2]\n[3,4]","frontend_id":"4","id":"4","is_paid_only":false,"likes":30566,"title":"Median of Two Sorted Arrays","title_slug":"median-of-two-sorted-arrays","topic_tags":["Array","Binary Search","Divide and Conquer"],"total_accepted":3575437,"total_submissions":8069671,"url":"https://leetcode.com/problems/median-of-two-sorted-arrays/"}
{"acceptance_rate":0.4969139311368079,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e merge(vector\u003cvector\u003cint\u003e\u003e\u0026 intervals) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def merge(self, intervals: List[List[int]]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[][] Merge(int[][] intervals) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};","lang":"javascript"},{"code":"function merge(intervals: number[][]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func merge(_ intervals: [[Int]]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun merge(intervals: Array\u003cIntArray\u003e): Array\u003cIntArray\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e merge(List\u003cList\u003cint\u003e\u003e intervals) {\n    \n  }\n}","lang":"dart"},{"code":"func merge(intervals [][]int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn merge(intervals: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (merge intervals)\n  (-\u003e (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec merge(Intervals :: [[integer()]]) -\u003e [[integer()]].\nmerge(Intervals) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\n  def merge(intervals) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array\u0026nbsp;of \u003ccode\u003eintervals\u003c/code\u003e\u0026nbsp;where \u003ccode\u003eintervals[i] = [start\u003csub\u003ei\u003c/sub\u003e, end\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, merge all overlapping intervals, and return \u003cem\u003ean array of the non-overlapping intervals that cover all the intervals in the input\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,3],[2,6],[8,10],[15,18]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,6],[8,10],[15,18]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,4],[4,5]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,5]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Intervals [1,4] and [4,5] are considered overlapping.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= intervals.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eintervals[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= start\u003csub\u003ei\u003c/sub\u003e \u0026lt;= end\u003csub\u003ei\u003c/sub\u003e \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":866,"example_test_cases":"[[1,3],[2,6],[8,10],[15,18]]\n[[1,4],[4,5]]","frontend_id":"56","id":"56","is_paid_only":false,"likes":23688,"title":"Merge Intervals","title_slug":"merge-intervals","topic_tags":["Array","Sorting"],"total_accepted":3361179,"total_submissions":6764107,"url":"https://leetcode.com/problems/merge-intervals/"}
{"acceptance_rate":0.5727061561449054,"category":"Algorithms","code_snippets":[{"code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector\u003cListNode*\u003e\u0026 lists) {\n        \n    }\n};","lang":"cpp"},{"code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}","lang":"java"},{"code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[Optional[ListNode]]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        ","lang":"python"},{"code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -\u003e Optional[ListNode]:\n        ","lang":"python3"},{"code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    \n}","lang":"c"},{"code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};","lang":"javascript"},{"code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array\u003cListNode | null\u003e): ListNode | null {\n    \n};","lang":"typescript"},{"code":"/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this-\u003eval = $val;\n *         $this-\u003enext = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}","lang":"php"},{"code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -\u003e ListNode? {\n        \n    }\n}","lang":"swift"},{"code":"/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array\u003cListNode?\u003e): ListNode? {\n        \n    }\n}","lang":"kotlin"},{"code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List\u003cListNode?\u003e lists) {\n    \n  }\n}","lang":"dart"},{"code":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}","lang":"golang"},{"code":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend","lang":"ruby"},{"code":"/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}","lang":"scala"},{"code":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option\u003cBox\u003cListNode\u003e\u003e\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -\u003e Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec\u003cOption\u003cBox\u003cListNode\u003e\u003e\u003e) -\u003e Option\u003cBox\u003cListNode\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-\u003e (listof (or/c list-node? #f)) (or/c list-node? #f))\n  )","lang":"racket"},{"code":"%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -\u003e #list_node{} | null.\nmerge_k_lists(Lists) -\u003e\n  .","lang":"erlang"},{"code":"# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array of \u003ccode\u003ek\u003c/code\u003e linked-lists \u003ccode\u003elists\u003c/code\u003e, each linked-list is sorted in ascending order.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eMerge all the linked-lists into one sorted linked-list and return it.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e lists = [[1,4,5],[1,3,4],[2,6]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,2,3,4,4,5,6]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The linked-lists are:\n[\n  1-\u0026gt;4-\u0026gt;5,\n  1-\u0026gt;3-\u0026gt;4,\n  2-\u0026gt;6\n]\nmerging them into one sorted linked list:\n1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e lists = []\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e lists = [[]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e []\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003ek == lists.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= lists[i].length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= lists[i][j] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003elists[i]\u003c/code\u003e is sorted in \u003cstrong\u003eascending order\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe sum of \u003ccode\u003elists[i].length\u003c/code\u003e will not exceed \u003ccode\u003e10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":766,"example_test_cases":"[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]","frontend_id":"23","id":"23","is_paid_only":false,"likes":20591,"title":"Merge k Sorted Lists","title_slug":"merge-k-sorted-lists","topic_tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"],"total_accepted":2598700,"total_submissions":4537580,"url":"https://leetcode.com/problems/merge-k-sorted-lists/"}
{"acceptance_rate":0.5328713471565417,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    void merge(vector\u003cint\u003e\u0026 nums1, int m, vector\u003cint\u003e\u0026 nums2, int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        ","lang":"python3"},{"code":"void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};","lang":"javascript"},{"code":"/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(\u0026$nums1, $m, $nums2, $n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  void merge(List\u003cint\u003e nums1, int m, List\u003cint\u003e nums2, int n) {\n    \n  }\n}","lang":"dart"},{"code":"func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn merge(nums1: \u0026mut Vec\u003ci32\u003e, m: i32, nums2: \u0026mut Vec\u003ci32\u003e, n: i32) {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eYou are given two integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, sorted in \u003cstrong\u003enon-decreasing order\u003c/strong\u003e, and two integers \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e, representing the number of elements in \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMerge\u003c/strong\u003e \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e into a single array sorted in \u003cstrong\u003enon-decreasing order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe final sorted array should not be returned by the function, but instead be \u003cem\u003estored inside the array \u003c/em\u003e\u003ccode\u003enums1\u003c/code\u003e. To accommodate this, \u003ccode\u003enums1\u003c/code\u003e has a length of \u003ccode\u003em + n\u003c/code\u003e, where the first \u003ccode\u003em\u003c/code\u003e elements denote the elements that should be merged, and the last \u003ccode\u003en\u003c/code\u003e elements are set to \u003ccode\u003e0\u003c/code\u003e and should be ignored. \u003ccode\u003enums2\u003c/code\u003e has a length of \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2,2,3,5,6]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e2\u003c/u\u003e,2,\u003cu\u003e3\u003c/u\u003e,5,6] with the underlined elements coming from nums1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1], m = 1, nums2 = [], n = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [0], m = 0, nums2 = [1], n = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums1.length == m + n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums2.length == n\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= m, n \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m + n \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums1[i], nums2[j] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up: \u003c/strong\u003eCan you come up with an algorithm that runs in \u003ccode\u003eO(m + n)\u003c/code\u003e time?\u003c/p\u003e\n","difficulty":"Easy","dislikes":2430,"example_test_cases":"[1,2,3,0,0,0]\n3\n[2,5,6]\n3\n[1]\n1\n[]\n0\n[0]\n0\n[1]\n1","frontend_id":"88","id":"88","is_paid_only":false,"likes":17464,"title":"Merge Sorted Array","title_slug":"merge-sorted-array","topic_tags":["Array","Two Pointers","Sorting"],"total_accepted":4834049,"total_submissions":9071700,"url":"https://leetcode.com/problems/merge-sorted-array/"}
{"acceptance_rate":0.8219450906870593,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String mergeAlternately(String word1, String word2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def mergeAlternately(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -\u003e str:\n        ","lang":"python3"},{"code":"\n\nchar * mergeAlternately(char * word1, char * word2){\n\n}","lang":"c"},{"code":"public class Solution {\n    public string MergeAlternately(string word1, string word2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {string}\n */\nvar mergeAlternately = function(word1, word2) {\n    \n};","lang":"javascript"},{"code":"function mergeAlternately(word1: string, word2: string): string {\n\n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return String\n     */\n    function mergeAlternately($word1, $word2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func mergeAlternately(_ word1: String, _ word2: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun mergeAlternately(word1: String, word2: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"func mergeAlternately(word1 string, word2 string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} word1\n# @param {String} word2\n# @return {String}\ndef merge_alternately(word1, word2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def mergeAlternately(word1: String, word2: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn merge_alternately(word1: String, word2: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (merge-alternately word1 word2)\n  (-\u003e string? string? string?)\n\n  )","lang":"racket"}],"content":"\u003cp\u003eYou are given two strings \u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e. Merge the strings by adding letters in alternating order, starting with \u003ccode\u003eword1\u003c/code\u003e. If a string is longer than the other, append the additional letters onto the end of the merged string.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn \u003cem\u003ethe merged string.\u003c/em\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;abc\u0026quot;, word2 = \u0026quot;pqr\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;apbqcr\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;ab\u0026quot;, word2 = \u0026quot;pqrs\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;apbqrs\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;Notice that as word2 is longer, \u0026quot;rs\u0026quot; is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e word1 = \u0026quot;abcd\u0026quot;, word2 = \u0026quot;pq\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;apbqcd\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;Notice that as word1 is longer, \u0026quot;cd\u0026quot; is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= word1.length, word2.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eword1\u003c/code\u003e and \u003ccode\u003eword2\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\r\n\u003c/ul\u003e","difficulty":"Easy","dislikes":132,"example_test_cases":"\"abc\"\n\"pqr\"\n\"ab\"\n\"pqrs\"\n\"abcd\"\n\"pq\"","frontend_id":"1768","id":"1894","is_paid_only":false,"likes":4610,"title":"Merge Strings Alternately","title_slug":"merge-strings-alternately","topic_tags":["Two Pointers","String"],"total_accepted":1737887,"total_submissions":2114359,"url":"https://leetcode.com/problems/merge-strings-alternately/"}
{"acceptance_rate":0.6740816616251515,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minCostClimbingStairs(vector\u003cint\u003e\u0026 cost) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int minCostClimbingStairs(int* cost, int costSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function(cost) {\n    \n};","lang":"javascript"},{"code":"function minCostClimbingStairs(cost: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minCostClimbingStairs($cost) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minCostClimbingStairs(_ cost: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minCostClimbingStairs(cost: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minCostClimbingStairs(List\u003cint\u003e cost) {\n    \n  }\n}","lang":"dart"},{"code":"func minCostClimbingStairs(cost []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minCostClimbingStairs(cost: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-cost-climbing-stairs cost)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec min_cost_climbing_stairs(Cost :: [integer()]) -\u003e integer().\nmin_cost_climbing_stairs(Cost) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_cost_climbing_stairs(cost :: [integer]) :: integer\n  def min_cost_climbing_stairs(cost) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an integer array \u003ccode\u003ecost\u003c/code\u003e where \u003ccode\u003ecost[i]\u003c/code\u003e is the cost of \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e step on a staircase. Once you pay the cost, you can either climb one or two steps.\u003c/p\u003e\n\n\u003cp\u003eYou can either start from the step with index \u003ccode\u003e0\u003c/code\u003e, or the step with index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe minimum cost to reach the top of the floor\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e cost = [10,\u003cu\u003e15\u003c/u\u003e,20]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 15\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e cost = [\u003cu\u003e1\u003c/u\u003e,100,\u003cu\u003e1\u003c/u\u003e,1,\u003cu\u003e1\u003c/u\u003e,100,\u003cu\u003e1\u003c/u\u003e,\u003cu\u003e1\u003c/u\u003e,100,\u003cu\u003e1\u003c/u\u003e]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= cost.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= cost[i] \u0026lt;= 999\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1857,"example_test_cases":"[10,15,20]\n[1,100,1,1,1,100,1,1,100,1]","frontend_id":"746","id":"747","is_paid_only":false,"likes":12037,"title":"Min Cost Climbing Stairs","title_slug":"min-cost-climbing-stairs","topic_tags":["Array","Dynamic Programming"],"total_accepted":1543192,"total_submissions":2289325,"url":"https://leetcode.com/problems/min-cost-climbing-stairs/"}
{"acceptance_rate":0.5810731991834354,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int getCommon(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int getCommon(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def getCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int getCommon(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int GetCommon(int[] nums1, int[] nums2) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar getCommon = function(nums1, nums2) {\n    \n};","lang":"javascript"},{"code":"function getCommon(nums1: number[], nums2: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function getCommon($nums1, $nums2) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func getCommon(_ nums1: [Int], _ nums2: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun getCommon(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int getCommon(List\u003cint\u003e nums1, List\u003cint\u003e nums2) {\n    \n  }\n}","lang":"dart"},{"code":"func getCommon(nums1 []int, nums2 []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef get_common(nums1, nums2)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def getCommon(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn get_common(nums1: Vec\u003ci32\u003e, nums2: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (get-common nums1 nums2)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec get_common(Nums1 :: [integer()], Nums2 :: [integer()]) -\u003e integer().\nget_common(Nums1, Nums2) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec get_common(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def get_common(nums1, nums2) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two integer arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, sorted in non-decreasing order, return \u003cem\u003ethe \u003cstrong\u003eminimum integer common\u003c/strong\u003e to both arrays\u003c/em\u003e. If there is no common integer amongst \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that an integer is said to be \u003cstrong\u003ecommon\u003c/strong\u003e to \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e if both arrays have \u003cstrong\u003eat least one\u003c/strong\u003e occurrence of that integer.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,3], nums2 = [2,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The smallest element common to both arrays is 2, so we return 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2,3,6], nums2 = [2,3,4,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums1[i], nums2[j] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eBoth \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e are sorted in \u003cstrong\u003enon-decreasing\u003c/strong\u003e order.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":40,"example_test_cases":"[1,2,3]\n[2,4]\n[1,2,3,6]\n[2,3,4,5]","frontend_id":"2540","id":"2634","is_paid_only":false,"likes":1205,"title":"Minimum Common Value","title_slug":"minimum-common-value","topic_tags":["Array","Hash Table","Two Pointers","Binary Search"],"total_accepted":286920,"total_submissions":493776,"url":"https://leetcode.com/problems/minimum-common-value/"}
{"acceptance_rate":0.5571446036311799,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minMutation(string startGene, string endGene, vector\u003cstring\u003e\u0026 bank) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minMutation(String startGene, String endGene, String[] bank) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minMutation(self, startGene, endGene, bank):\n        \"\"\"\n        :type startGene: str\n        :type endGene: str\n        :type bank: List[str]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -\u003e int:\n        ","lang":"python3"},{"code":"int minMutation(char* startGene, char* endGene, char** bank, int bankSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinMutation(string startGene, string endGene, string[] bank) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} startGene\n * @param {string} endGene\n * @param {string[]} bank\n * @return {number}\n */\nvar minMutation = function(startGene, endGene, bank) {\n    \n};","lang":"javascript"},{"code":"function minMutation(startGene: string, endGene: string, bank: string[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $startGene\n     * @param String $endGene\n     * @param String[] $bank\n     * @return Integer\n     */\n    function minMutation($startGene, $endGene, $bank) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minMutation(_ startGene: String, _ endGene: String, _ bank: [String]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minMutation(startGene: String, endGene: String, bank: Array\u003cString\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minMutation(String startGene, String endGene, List\u003cString\u003e bank) {\n    \n  }\n}","lang":"dart"},{"code":"func minMutation(startGene string, endGene string, bank []string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} start_gene\n# @param {String} end_gene\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start_gene, end_gene, bank)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minMutation(startGene: String, endGene: String, bank: Array[String]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_mutation(start_gene: String, end_gene: String, bank: Vec\u003cString\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-mutation startGene endGene bank)\n  (-\u003e string? string? (listof string?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec min_mutation(StartGene :: unicode:unicode_binary(), EndGene :: unicode:unicode_binary(), Bank :: [unicode:unicode_binary()]) -\u003e integer().\nmin_mutation(StartGene, EndGene, Bank) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_mutation(start_gene :: String.t, end_gene :: String.t, bank :: [String.t]) :: integer\n  def min_mutation(start_gene, end_gene, bank) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eA gene string can be represented by an 8-character long string, with choices from \u003ccode\u003e\u0026#39;A\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;C\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;G\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;T\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSuppose we need to investigate a mutation from a gene string \u003ccode\u003estartGene\u003c/code\u003e to a gene string \u003ccode\u003eendGene\u003c/code\u003e where one mutation is defined as one single character changed in the gene string.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, \u003ccode\u003e\u0026quot;AACCGGTT\u0026quot; --\u0026gt; \u0026quot;AACCGGTA\u0026quot;\u003c/code\u003e is one mutation.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere is also a gene bank \u003ccode\u003ebank\u003c/code\u003e that records all the valid gene mutations. A gene must be in \u003ccode\u003ebank\u003c/code\u003e to make it a valid gene string.\u003c/p\u003e\n\n\u003cp\u003eGiven the two gene strings \u003ccode\u003estartGene\u003c/code\u003e and \u003ccode\u003eendGene\u003c/code\u003e and the gene bank \u003ccode\u003ebank\u003c/code\u003e, return \u003cem\u003ethe minimum number of mutations needed to mutate from \u003c/em\u003e\u003ccode\u003estartGene\u003c/code\u003e\u003cem\u003e to \u003c/em\u003e\u003ccode\u003eendGene\u003c/code\u003e. If there is no such a mutation, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that the starting point is assumed to be valid, so it might not be included in the bank.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e startGene = \u0026quot;AACCGGTT\u0026quot;, endGene = \u0026quot;AACCGGTA\u0026quot;, bank = [\u0026quot;AACCGGTA\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e startGene = \u0026quot;AACCGGTT\u0026quot;, endGene = \u0026quot;AAACGGTA\u0026quot;, bank = [\u0026quot;AACCGGTA\u0026quot;,\u0026quot;AACCGCTA\u0026quot;,\u0026quot;AAACGGTA\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= bank.length \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003estartGene.length == endGene.length == bank[i].length == 8\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003estartGene\u003c/code\u003e, \u003ccode\u003eendGene\u003c/code\u003e, and \u003ccode\u003ebank[i]\u003c/code\u003e consist of only the characters \u003ccode\u003e[\u0026#39;A\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;T\u0026#39;]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":343,"example_test_cases":"\"AACCGGTT\"\n\"AACCGGTA\"\n[\"AACCGGTA\"]\n\"AACCGGTT\"\n\"AAACGGTA\"\n[\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]","frontend_id":"433","id":"433","is_paid_only":false,"likes":3192,"title":"Minimum Genetic Mutation","title_slug":"minimum-genetic-mutation","topic_tags":["Hash Table","String","Breadth-First Search"],"total_accepted":241535,"total_submissions":433523,"url":"https://leetcode.com/problems/minimum-genetic-mutation/"}
{"acceptance_rate":0.6061608803404095,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int findMinArrowShots(vector\u003cvector\u003cint\u003e\u003e\u0026 points) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int findMinArrowShots(int[][] points) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -\u003e int:\n        ","lang":"python3"},{"code":"int findMinArrowShots(int** points, int pointsSize, int* pointsColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int FindMinArrowShots(int[][] points) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar findMinArrowShots = function(points) {\n    \n};","lang":"javascript"},{"code":"function findMinArrowShots(points: number[][]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function findMinArrowShots($points) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findMinArrowShots(_ points: [[Int]]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findMinArrowShots(points: Array\u003cIntArray\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int findMinArrowShots(List\u003cList\u003cint\u003e\u003e points) {\n    \n  }\n}","lang":"dart"},{"code":"func findMinArrowShots(points [][]int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} points\n# @return {Integer}\ndef find_min_arrow_shots(points)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findMinArrowShots(points: Array[Array[Int]]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_min_arrow_shots(points: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-min-arrow-shots points)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )","lang":"racket"},{"code":"-spec find_min_arrow_shots(Points :: [[integer()]]) -\u003e integer().\nfind_min_arrow_shots(Points) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_min_arrow_shots(points :: [[integer]]) :: integer\n  def find_min_arrow_shots(points) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array \u003ccode\u003epoints\u003c/code\u003e where \u003ccode\u003epoints[i] = [x\u003csub\u003estart\u003c/sub\u003e, x\u003csub\u003eend\u003c/sub\u003e]\u003c/code\u003e denotes a balloon whose \u003cstrong\u003ehorizontal diameter\u003c/strong\u003e stretches between \u003ccode\u003ex\u003csub\u003estart\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ex\u003csub\u003eend\u003c/sub\u003e\u003c/code\u003e. You do not know the exact y-coordinates of the balloons.\u003c/p\u003e\n\n\u003cp\u003eArrows can be shot up \u003cstrong\u003edirectly vertically\u003c/strong\u003e (in the positive y-direction) from different points along the x-axis. A balloon with \u003ccode\u003ex\u003csub\u003estart\u003c/sub\u003e\u003c/code\u003e and \u003ccode\u003ex\u003csub\u003eend\u003c/sub\u003e\u003c/code\u003e is \u003cstrong\u003eburst\u003c/strong\u003e by an arrow shot at \u003ccode\u003ex\u003c/code\u003e if \u003ccode\u003ex\u003csub\u003estart\u003c/sub\u003e \u0026lt;= x \u0026lt;= x\u003csub\u003eend\u003c/sub\u003e\u003c/code\u003e. There is \u003cstrong\u003eno limit\u003c/strong\u003e to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\u003c/p\u003e\n\n\u003cp\u003eGiven the array \u003ccode\u003epoints\u003c/code\u003e, return \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e number of arrows that must be shot to burst all balloons\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points = [[10,16],[2,8],[1,6],[7,12]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points = [[1,2],[3,4],[5,6],[7,8]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One arrow needs to be shot for each balloon for a total of 4 arrows.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e points = [[1,2],[2,3],[3,4],[4,5]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= points.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epoints[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= x\u003csub\u003estart\u003c/sub\u003e \u0026lt; x\u003csub\u003eend\u003c/sub\u003e \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":262,"example_test_cases":"[[10,16],[2,8],[1,6],[7,12]]\n[[1,2],[3,4],[5,6],[7,8]]\n[[1,2],[2,3],[3,4],[4,5]]","frontend_id":"452","id":"452","is_paid_only":false,"likes":7869,"title":"Minimum Number of Arrows to Burst Balloons","title_slug":"minimum-number-of-arrows-to-burst-balloons","topic_tags":["Array","Greedy","Sorting"],"total_accepted":693896,"total_submissions":1144739,"url":"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"}
{"acceptance_rate":0.49755485156520174,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minSubArrayLen(int target, vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        :type target: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int minSubArrayLen(int target, int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinSubArrayLen(int target, int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(target, nums) {\n    \n};","lang":"javascript"},{"code":"function minSubArrayLen(target: number, nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSubArrayLen($target, $nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minSubArrayLen(_ target: Int, _ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minSubArrayLen(target: Int, nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minSubArrayLen(int target, List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func minSubArrayLen(target int, nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} target\n# @param {Integer[]} nums\n# @return {Integer}\ndef min_sub_array_len(target, nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minSubArrayLen(target: Int, nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_sub_array_len(target: i32, nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-sub-array-len target nums)\n  (-\u003e exact-integer? (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec min_sub_array_len(Target :: integer(), Nums :: [integer()]) -\u003e integer().\nmin_sub_array_len(Target, Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_sub_array_len(target :: integer, nums :: [integer]) :: integer\n  def min_sub_array_len(target, nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of positive integers \u003ccode\u003enums\u003c/code\u003e and a positive integer \u003ccode\u003etarget\u003c/code\u003e, return \u003cem\u003ethe \u003cstrong\u003eminimal length\u003c/strong\u003e of a \u003c/em\u003e\u003cspan data-keyword=\"subarray-nonempty\"\u003e\u003cem\u003esubarray\u003c/em\u003e\u003c/span\u003e\u003cem\u003e whose sum is greater than or equal to\u003c/em\u003e \u003ccode\u003etarget\u003c/code\u003e. If there is no such subarray, return \u003ccode\u003e0\u003c/code\u003e instead.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e target = 7, nums = [2,3,1,2,4,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [4,3] has the minimal length under the problem constraint.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e target = 4, nums = [1,4,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e target = 11, nums = [1,1,1,1,1,1,1,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= target \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e If you have figured out the \u003ccode\u003eO(n)\u003c/code\u003e solution, try coding another solution of which the time complexity is \u003ccode\u003eO(n log(n))\u003c/code\u003e.","difficulty":"Medium","dislikes":510,"example_test_cases":"7\n[2,3,1,2,4,3]\n4\n[1,4,4]\n11\n[1,1,1,1,1,1,1,1]","frontend_id":"209","id":"209","is_paid_only":false,"likes":13652,"title":"Minimum Size Subarray Sum","title_slug":"minimum-size-subarray-sum","topic_tags":["Array","Binary Search","Sliding Window","Prefix Sum"],"total_accepted":1540902,"total_submissions":3096949,"url":"https://leetcode.com/problems/minimum-size-subarray-sum/"}
{"acceptance_rate":0.45731237996279644,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minWindow(self, s: str, t: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* minWindow(char* s, char* t) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};","lang":"javascript"},{"code":"function minWindow(s: string, t: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minWindow(_ s: String, _ t: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}","lang":"dart"},{"code":"func minWindow(s string, t string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn min_window(s: String, t: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (min-window s t)\n  (-\u003e string? string? string?)\n  )","lang":"racket"},{"code":"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nmin_window(S, T) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e of lengths \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e respectively, return \u003cem\u003ethe \u003cstrong\u003eminimum window\u003c/strong\u003e\u003c/em\u003e \u003cspan data-keyword=\"substring-nonempty\"\u003e\u003cstrong\u003e\u003cem\u003esubstring\u003c/em\u003e\u003c/strong\u003e\u003c/span\u003e\u003cem\u003e of \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e\u003cem\u003e such that every character in \u003c/em\u003e\u003ccode\u003et\u003c/code\u003e\u003cem\u003e (\u003cstrong\u003eincluding duplicates\u003c/strong\u003e) is included in the window\u003c/em\u003e. If there is no such substring, return \u003cem\u003ethe empty string \u003c/em\u003e\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe testcases will be generated such that the answer is \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;ADOBECODEBANC\u0026quot;, t = \u0026quot;ABC\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;BANC\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The minimum window substring \u0026quot;BANC\u0026quot; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;a\u0026quot;, t = \u0026quot;a\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;a\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The entire string s is the minimum window.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;a\u0026quot;, t = \u0026quot;aa\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Both \u0026#39;a\u0026#39;s from t must be included in the window.\nSince the largest window of s only has one \u0026#39;a\u0026#39;, return empty string.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em == s.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en == t.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m, n \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e consist of uppercase and lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you find an algorithm that runs in \u003ccode\u003eO(m + n)\u003c/code\u003e time?\u003c/p\u003e\n","difficulty":"Hard","dislikes":803,"example_test_cases":"\"ADOBECODEBANC\"\n\"ABC\"\n\"a\"\n\"a\"\n\"a\"\n\"aa\"","frontend_id":"76","id":"76","is_paid_only":false,"likes":19233,"title":"Minimum Window Substring","title_slug":"minimum-window-substring","topic_tags":["Hash Table","String","Sliding Window"],"total_accepted":1831778,"total_submissions":4005529,"url":"https://leetcode.com/problems/minimum-window-substring/"}
{"acceptance_rate":0.6295997657757485,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public void moveZeroes(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def moveZeroes(self, nums: List[int]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ","lang":"python3"},{"code":"void moveZeroes(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public void MoveZeroes(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    \n};","lang":"javascript"},{"code":"/**\n Do not return anything, modify nums in-place instead.\n */\nfunction moveZeroes(nums: number[]): void {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function moveZeroes(\u0026$nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func moveZeroes(_ nums: inout [Int]) {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun moveZeroes(nums: IntArray): Unit {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  void moveZeroes(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func moveZeroes(nums []int)  {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef move_zeroes(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def moveZeroes(nums: Array[Int]): Unit = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn move_zeroes(nums: \u0026mut Vec\u003ci32\u003e) {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, move all \u003ccode\u003e0\u003c/code\u003e\u0026#39;s to the end of it while maintaining the relative order of the non-zero elements.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that you must do this in-place without making a copy of the array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,0,3,12]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,3,12,0,0]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you minimize the total number of operations done?","difficulty":"Easy","dislikes":540,"example_test_cases":"[0,1,0,3,12]\n[0]","frontend_id":"283","id":"283","is_paid_only":false,"likes":18234,"title":"Move Zeroes","title_slug":"move-zeroes","topic_tags":["Array","Two Pointers"],"total_accepted":4275029,"total_submissions":6790074,"url":"https://leetcode.com/problems/move-zeroes/"}
{"acceptance_rate":0.6350967728490273,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int tribonacci(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int tribonacci(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def tribonacci(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def tribonacci(self, n: int) -\u003e int:\n        ","lang":"python3"},{"code":"int tribonacci(int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Tribonacci(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {number}\n */\nvar tribonacci = function(n) {\n    \n};","lang":"javascript"},{"code":"function tribonacci(n: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function tribonacci($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func tribonacci(_ n: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun tribonacci(n: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int tribonacci(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func tribonacci(n int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Integer}\ndef tribonacci(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def tribonacci(n: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn tribonacci(n: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (tribonacci n)\n  (-\u003e exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec tribonacci(N :: integer()) -\u003e integer().\ntribonacci(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec tribonacci(n :: integer) :: integer\n  def tribonacci(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThe Tribonacci sequence T\u003csub\u003en\u003c/sub\u003e is defined as follows:\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003eT\u003csub\u003e0\u003c/sub\u003e = 0, T\u003csub\u003e1\u003c/sub\u003e = 1, T\u003csub\u003e2\u003c/sub\u003e = 1, and T\u003csub\u003en+3\u003c/sub\u003e = T\u003csub\u003en\u003c/sub\u003e + T\u003csub\u003en+1\u003c/sub\u003e + T\u003csub\u003en+2\u003c/sub\u003e for n \u0026gt;= 0.\u003c/p\u003e\n\n\u003cp\u003eGiven \u003ccode\u003en\u003c/code\u003e, return the value of T\u003csub\u003en\u003c/sub\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 25\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1389537\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= n \u0026lt;= 37\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe answer is guaranteed to fit within a 32-bit integer, ie. \u003ccode\u003eanswer \u0026lt;= 2^31 - 1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":207,"example_test_cases":"4\n25","frontend_id":"1137","id":"1236","is_paid_only":false,"likes":4689,"title":"N-th Tribonacci Number","title_slug":"n-th-tribonacci-number","topic_tags":["Math","Dynamic Programming","Memoization"],"total_accepted":975193,"total_submissions":1535503,"url":"https://leetcode.com/problems/n-th-tribonacci-number/"}
{"acceptance_rate":0.5583722250273303,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int eraseOverlapIntervals(vector\u003cvector\u003cint\u003e\u003e\u0026 intervals) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -\u003e int:\n        ","lang":"python3"},{"code":"int eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int EraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n    \n};","lang":"javascript"},{"code":"function eraseOverlapIntervals(intervals: number[][]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func eraseOverlapIntervals(_ intervals: [[Int]]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun eraseOverlapIntervals(intervals: Array\u003cIntArray\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int eraseOverlapIntervals(List\u003cList\u003cint\u003e\u003e intervals) {\n    \n  }\n}","lang":"dart"},{"code":"func eraseOverlapIntervals(intervals [][]int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn erase_overlap_intervals(intervals: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (erase-overlap-intervals intervals)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )","lang":"racket"},{"code":"-spec erase_overlap_intervals(Intervals :: [[integer()]]) -\u003e integer().\nerase_overlap_intervals(Intervals) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec erase_overlap_intervals(intervals :: [[integer]]) :: integer\n  def erase_overlap_intervals(intervals) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of intervals \u003ccode\u003eintervals\u003c/code\u003e where \u003ccode\u003eintervals[i] = [start\u003csub\u003ei\u003c/sub\u003e, end\u003csub\u003ei\u003c/sub\u003e]\u003c/code\u003e, return \u003cem\u003ethe minimum number of intervals you need to remove to make the rest of the intervals non-overlapping\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that intervals which only touch at a point are \u003cstrong\u003enon-overlapping\u003c/strong\u003e. For example, \u003ccode\u003e[1, 2]\u003c/code\u003e and \u003ccode\u003e[2, 3]\u003c/code\u003e are non-overlapping.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,2],[2,3],[3,4],[1,3]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003cstrong\u003eExplanation:\u003c/strong\u003e [1,3] can be removed and the rest of the intervals are non-overlapping.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,2],[1,2],[1,2]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e intervals = [[1,2],[2,3]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You don\u0026#39;t need to remove any of the intervals since they\u0026#39;re already non-overlapping.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= intervals.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eintervals[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-5 * 10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= start\u003csub\u003ei\u003c/sub\u003e \u0026lt; end\u003csub\u003ei\u003c/sub\u003e \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":244,"example_test_cases":"[[1,2],[2,3],[3,4],[1,3]]\n[[1,2],[1,2],[1,2]]\n[[1,2],[2,3]]","frontend_id":"435","id":"435","is_paid_only":false,"likes":8777,"title":"Non-overlapping Intervals","title_slug":"non-overlapping-intervals","topic_tags":["Array","Dynamic Programming","Greedy","Sorting"],"total_accepted":837139,"total_submissions":1499249,"url":"https://leetcode.com/problems/non-overlapping-intervals/"}
{"acceptance_rate":0.6267421622563732,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int numIslands(vector\u003cvector\u003cchar\u003e\u003e\u0026 grid) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        ","lang":"python3"},{"code":"int numIslands(char** grid, int gridSize, int* gridColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};","lang":"javascript"},{"code":"function numIslands(grid: string[][]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func numIslands(_ grid: [[Character]]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun numIslands(grid: Array\u003cCharArray\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int numIslands(List\u003cList\u003cString\u003e\u003e grid) {\n    \n  }\n}","lang":"dart"},{"code":"func numIslands(grid [][]byte) int {\n    \n}","lang":"golang"},{"code":"# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn num_islands(grid: Vec\u003cVec\u003cchar\u003e\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (num-islands grid)\n  (-\u003e (listof (listof char?)) exact-integer?)\n  )","lang":"racket"},{"code":"-spec num_islands(Grid :: [[char()]]) -\u003e integer().\nnum_islands(Grid) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec num_islands(grid :: [[char]]) :: integer\n  def num_islands(grid) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e 2D binary grid \u003ccode\u003egrid\u003c/code\u003e which represents a map of \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003es (land) and \u003ccode\u003e\u0026#39;0\u0026#39;\u003c/code\u003es (water), return \u003cem\u003ethe number of islands\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eisland\u003c/strong\u003e is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid = [\n  [\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;]\n]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e grid = [\n  [\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;],\n  [\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;1\u0026quot;]\n]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003em == grid.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003en == grid[i].length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= m, n \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egrid[i][j]\u003c/code\u003e is \u003ccode\u003e\u0026#39;0\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;1\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":577,"example_test_cases":"[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]","frontend_id":"200","id":"200","is_paid_only":false,"likes":24096,"title":"Number of Islands","title_slug":"number-of-islands","topic_tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"],"total_accepted":3588772,"total_submissions":5726074,"url":"https://leetcode.com/problems/number-of-islands/"}
{"acceptance_rate":0.5945635191251238,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isPalindrome(self, x: int) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isPalindrome(int x) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};","lang":"javascript"},{"code":"function isPalindrome(x: number): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isPalindrome(_ x: Int) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}","lang":"dart"},{"code":"func isPalindrome(x int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_palindrome(x: i32) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-palindrome x)\n  (-\u003e exact-integer? boolean?)\n  )","lang":"racket"},{"code":"-spec is_palindrome(X :: integer()) -\u003e boolean().\nis_palindrome(X) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer \u003ccode\u003ex\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e is a \u003c/em\u003e\u003cspan data-keyword=\"palindrome-integer\"\u003e\u003cem\u003e\u003cstrong\u003epalindrome\u003c/strong\u003e\u003c/em\u003e\u003c/span\u003e\u003cem\u003e, and \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e x = 121\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 121 reads as 121 from left to right and from right to left.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e x = -121\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e x = 10\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Reads 01 from right to left. Therefore it is not a palindrome.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e\u0026nbsp;\u0026lt;= x \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e\u0026nbsp;- 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you solve it without converting the integer to a string?","difficulty":"Easy","dislikes":2834,"example_test_cases":"121\n-121\n10","frontend_id":"9","id":"9","is_paid_only":false,"likes":14423,"title":"Palindrome Number","title_slug":"palindrome-number","topic_tags":["Math"],"total_accepted":6739431,"total_submissions":11335090,"url":"https://leetcode.com/problems/palindrome-number/"}
{"acceptance_rate":0.7258096201910355,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cstring\u003e\u003e partition(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cString\u003e\u003e partition(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def partition(self, s: str) -\u003e List[List[str]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cstring\u003e\u003e Partition(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    \n};","lang":"javascript"},{"code":"function partition(s: string): string[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String[][]\n     */\n    function partition($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func partition(_ s: String) -\u003e [[String]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun partition(s: String): List\u003cList\u003cString\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cString\u003e\u003e partition(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func partition(s string) [][]string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String[][]}\ndef partition(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def partition(s: String): List[List[String]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn partition(s: String) -\u003e Vec\u003cVec\u003cString\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (partition s)\n  (-\u003e string? (listof (listof string?)))\n  )","lang":"racket"},{"code":"-spec partition(S :: unicode:unicode_binary()) -\u003e [[unicode:unicode_binary()]].\npartition(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec partition(s :: String.t) :: [[String.t]]\n  def partition(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, partition \u003ccode\u003es\u003c/code\u003e such that every \u003cspan data-keyword=\"substring-nonempty\"\u003esubstring\u003c/span\u003e of the partition is a \u003cspan data-keyword=\"palindrome-string\"\u003e\u003cstrong\u003epalindrome\u003c/strong\u003e\u003c/span\u003e. Return \u003cem\u003eall possible palindrome partitioning of \u003c/em\u003e\u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \"aab\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \"a\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[\"a\"]]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 16\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e contains only lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":556,"example_test_cases":"\"aab\"\n\"a\"","frontend_id":"131","id":"131","is_paid_only":false,"likes":13765,"title":"Palindrome Partitioning","title_slug":"palindrome-partitioning","topic_tags":["String","Dynamic Programming","Backtracking"],"total_accepted":1171186,"total_submissions":1613627,"url":"https://leetcode.com/problems/palindrome-partitioning/"}
{"acceptance_rate":0.4866262135556597,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canPartition(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canPartition(self, nums: List[int]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canPartition(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanPartition(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    \n};","lang":"javascript"},{"code":"function canPartition(nums: number[]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canPartition($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canPartition(_ nums: [Int]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canPartition(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func canPartition(nums []int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_partition(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_partition(nums: Vec\u003ci32\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-partition nums)\n  (-\u003e (listof exact-integer?) boolean?)\n  )","lang":"racket"},{"code":"-spec can_partition(Nums :: [integer()]) -\u003e boolean().\ncan_partition(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_partition(nums :: [integer]) :: boolean\n  def can_partition(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif you can partition the array into two subsets such that the sum of the elements in both subsets is equal or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,5,11,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array can be partitioned as [1, 5, 5] and [11].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,5]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array cannot be partitioned into equal sum subsets.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums[i] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":286,"example_test_cases":"[1,5,11,5]\n[1,2,3,5]","frontend_id":"416","id":"416","is_paid_only":false,"likes":13391,"title":"Partition Equal Subset Sum","title_slug":"partition-equal-subset-sum","topic_tags":["Array","Dynamic Programming"],"total_accepted":1291796,"total_submissions":2654596,"url":"https://leetcode.com/problems/partition-equal-subset-sum/"}
{"acceptance_rate":0.8159563381237271,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e partitionLabels(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cInteger\u003e partitionLabels(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def partitionLabels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def partitionLabels(self, s: str) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* partitionLabels(char* s, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cint\u003e PartitionLabels(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number[]}\n */\nvar partitionLabels = function(s) {\n    \n};","lang":"javascript"},{"code":"function partitionLabels(s: string): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function partitionLabels($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func partitionLabels(_ s: String) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun partitionLabels(s: String): List\u003cInt\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e partitionLabels(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func partitionLabels(s string) []int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer[]}\ndef partition_labels(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def partitionLabels(s: String): List[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn partition_labels(s: String) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (partition-labels s)\n  (-\u003e string? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec partition_labels(S :: unicode:unicode_binary()) -\u003e [integer()].\npartition_labels(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec partition_labels(s :: String.t) :: [integer]\n  def partition_labels(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string \u003ccode\u003e\u0026quot;ababcc\u0026quot;\u003c/code\u003e can be partitioned into \u003ccode\u003e[\u0026quot;abab\u0026quot;, \u0026quot;cc\u0026quot;]\u003c/code\u003e, but partitions such as \u003ccode\u003e[\u0026quot;aba\u0026quot;, \u0026quot;bcc\u0026quot;]\u003c/code\u003e or \u003ccode\u003e[\u0026quot;ab\u0026quot;, \u0026quot;ab\u0026quot;, \u0026quot;cc\u0026quot;]\u003c/code\u003e are invalid.\u003c/p\u003e\n\n\u003cp\u003eNote that the partition is done so that after concatenating all the parts in order, the resultant string should be \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea list of integers representing the size of these parts\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;ababcbacadefegdehijhklij\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [9,7,8]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nThe partition is \u0026quot;ababcbaca\u0026quot;, \u0026quot;defegde\u0026quot;, \u0026quot;hijhklij\u0026quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like \u0026quot;ababcbacadefegde\u0026quot;, \u0026quot;hijhklij\u0026quot; is incorrect, because it splits s into less parts.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;eccbbbbdec\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [10]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":434,"example_test_cases":"\"ababcbacadefegdehijhklij\"\n\"eccbbbbdec\"","frontend_id":"763","id":"768","is_paid_only":false,"likes":11039,"title":"Partition Labels","title_slug":"partition-labels","topic_tags":["Hash Table","Two Pointers","String","Greedy"],"total_accepted":733619,"total_submissions":899091,"url":"https://leetcode.com/problems/partition-labels/"}
{"acceptance_rate":0.5582535410466478,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int numSquares(int n) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int numSquares(int n) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def numSquares(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def numSquares(self, n: int) -\u003e int:\n        ","lang":"python3"},{"code":"int numSquares(int n) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int NumSquares(int n) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n    \n};","lang":"javascript"},{"code":"function numSquares(n: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numSquares($n) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func numSquares(_ n: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun numSquares(n: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int numSquares(int n) {\n    \n  }\n}","lang":"dart"},{"code":"func numSquares(n int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} n\n# @return {Integer}\ndef num_squares(n)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def numSquares(n: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn num_squares(n: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (num-squares n)\n  (-\u003e exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec num_squares(N :: integer()) -\u003e integer().\nnum_squares(N) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec num_squares(n :: integer) :: integer\n  def num_squares(n) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe least number of perfect square numbers that sum to\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003eperfect square\u003c/strong\u003e is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e4\u003c/code\u003e, \u003ccode\u003e9\u003c/code\u003e, and \u003ccode\u003e16\u003c/code\u003e are perfect squares while \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e11\u003c/code\u003e are not.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 12\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 12 = 4 + 4 + 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e n = 13\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 13 = 4 + 9.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":485,"example_test_cases":"12\n13","frontend_id":"279","id":"279","is_paid_only":false,"likes":11589,"title":"Perfect Squares","title_slug":"perfect-squares","topic_tags":["Math","Dynamic Programming","Breadth-First Search"],"total_accepted":980478,"total_submissions":1756331,"url":"https://leetcode.com/problems/perfect-squares/"}
{"acceptance_rate":0.80911766499392,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e permute(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e permute(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def permute(self, nums: List[int]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e Permute(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};","lang":"javascript"},{"code":"function permute(nums: number[]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func permute(_ nums: [Int]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun permute(nums: IntArray): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e permute(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func permute(nums []int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn permute(nums: Vec\u003ci32\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (permute nums)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec permute(Nums :: [integer()]) -\u003e [[integer()]].\npermute(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec permute(nums :: [integer]) :: [[integer]]\n  def permute(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e of distinct integers, return all the possible \u003cspan data-keyword=\"permutation-array\"\u003epermutations\u003c/span\u003e. You can return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[0,1],[1,0]]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1]]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 6\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10 \u0026lt;= nums[i] \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the integers of \u003ccode\u003enums\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":364,"example_test_cases":"[1,2,3]\n[0,1]\n[1]","frontend_id":"46","id":"46","is_paid_only":false,"likes":20171,"title":"Permutations","title_slug":"permutations","topic_tags":["Array","Backtracking"],"total_accepted":2706819,"total_submissions":3345396,"url":"https://leetcode.com/problems/permutations/"}
{"acceptance_rate":0.47791765620075083,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e plusOne(vector\u003cint\u003e\u0026 digits) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def plusOne(self, digits: List[int]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] PlusOne(int[] digits) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};","lang":"javascript"},{"code":"function plusOne(digits: number[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func plusOne(_ digits: [Int]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e plusOne(List\u003cint\u003e digits) {\n    \n  }\n}","lang":"dart"},{"code":"func plusOne(digits []int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn plus_one(digits: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (plus-one digits)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec plus_one(Digits :: [integer()]) -\u003e [integer()].\nplus_one(Digits) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec plus_one(digits :: [integer]) :: [integer]\n  def plus_one(digits) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a \u003cstrong\u003elarge integer\u003c/strong\u003e represented as an integer array \u003ccode\u003edigits\u003c/code\u003e, where each \u003ccode\u003edigits[i]\u003c/code\u003e is the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading \u003ccode\u003e0\u003c/code\u003e\u0026#39;s.\u003c/p\u003e\n\n\u003cp\u003eIncrement the large integer by one and return \u003cem\u003ethe resulting array of digits\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e digits = [1,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2,4]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e digits = [4,3,2,1]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [4,3,2,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e digits = [9]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,0]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= digits.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= digits[i] \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003edigits\u003c/code\u003e does not contain any leading \u003ccode\u003e0\u003c/code\u003e\u0026#39;s.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":5520,"example_test_cases":"[1,2,3]\n[4,3,2,1]\n[9]","frontend_id":"66","id":"66","is_paid_only":false,"likes":10594,"title":"Plus One","title_slug":"plus-one","topic_tags":["Array","Math"],"total_accepted":3062850,"total_submissions":6408740,"url":"https://leetcode.com/problems/plus-one/"}
{"acceptance_rate":0.679414360446348,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e productExceptSelf(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def productExceptSelf(self, nums: List[int]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    \n};","lang":"javascript"},{"code":"function productExceptSelf(nums: number[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func productExceptSelf(_ nums: [Int]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e productExceptSelf(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func productExceptSelf(nums []int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn product_except_self(nums: Vec\u003ci32\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (product-except-self nums)\n  (-\u003e (listof exact-integer?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec product_except_self(Nums :: [integer()]) -\u003e [integer()].\nproduct_except_self(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec product_except_self(nums :: [integer]) :: [integer]\n  def product_except_self(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ean array\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e \u003cem\u003esuch that\u003c/em\u003e \u003ccode\u003eanswer[i]\u003c/code\u003e \u003cem\u003eis equal to the product of all the elements of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e \u003cem\u003eexcept\u003c/em\u003e \u003ccode\u003enums[i]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe product of any prefix or suffix of \u003ccode\u003enums\u003c/code\u003e is \u003cstrong\u003eguaranteed\u003c/strong\u003e to fit in a \u003cstrong\u003e32-bit\u003c/strong\u003e integer.\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm that runs in\u0026nbsp;\u003ccode\u003eO(n)\u003c/code\u003e\u0026nbsp;time and without using the division operation.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,4]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [24,12,8,6]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,1,0,-3,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,0,9,0,0]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-30 \u0026lt;= nums[i] \u0026lt;= 30\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe input is generated such that \u003ccode\u003eanswer[i]\u003c/code\u003e is \u003cstrong\u003eguaranteed\u003c/strong\u003e to fit in a \u003cstrong\u003e32-bit\u003c/strong\u003e integer.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u0026nbsp;Can you solve the problem in \u003ccode\u003eO(1)\u003c/code\u003e\u0026nbsp;extra\u0026nbsp;space complexity? (The output array \u003cstrong\u003edoes not\u003c/strong\u003e count as extra space for space complexity analysis.)\u003c/p\u003e\n","difficulty":"Medium","dislikes":1593,"example_test_cases":"[1,2,3,4]\n[-1,1,0,-3,3]","frontend_id":"238","id":"238","is_paid_only":false,"likes":24575,"title":"Product of Array Except Self","title_slug":"product-of-array-except-self","topic_tags":["Array","Prefix Sum"],"total_accepted":3828362,"total_submissions":5634797,"url":"https://leetcode.com/problems/product-of-array-except-self/"}
{"acceptance_rate":0.6476534254373144,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool canConstruct(char* ransomNote, char* magazine) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool CanConstruct(string ransomNote, string magazine) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n    \n};","lang":"javascript"},{"code":"function canConstruct(ransomNote: string, magazine: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $ransomNote\n     * @param String $magazine\n     * @return Boolean\n     */\n    function canConstruct($ransomNote, $magazine) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func canConstruct(_ ransomNote: String, _ magazine: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool canConstruct(String ransomNote, String magazine) {\n    \n  }\n}","lang":"dart"},{"code":"func canConstruct(ransomNote string, magazine string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} ransom_note\n# @param {String} magazine\n# @return {Boolean}\ndef can_construct(ransom_note, magazine)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn can_construct(ransom_note: String, magazine: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (can-construct ransomNote magazine)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec can_construct(RansomNote :: unicode:unicode_binary(), Magazine :: unicode:unicode_binary()) -\u003e boolean().\ncan_construct(RansomNote, Magazine) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec can_construct(ransom_note :: String.t, magazine :: String.t) :: boolean\n  def can_construct(ransom_note, magazine) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003eransomNote\u003c/code\u003e and \u003ccode\u003emagazine\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if \u003c/em\u003e\u003ccode\u003eransomNote\u003c/code\u003e\u003cem\u003e can be constructed by using the letters from \u003c/em\u003e\u003ccode\u003emagazine\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eEach letter in \u003ccode\u003emagazine\u003c/code\u003e can only be used once in \u003ccode\u003eransomNote\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e ransomNote = \"a\", magazine = \"b\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e ransomNote = \"aa\", magazine = \"ab\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e ransomNote = \"aa\", magazine = \"aab\"\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= ransomNote.length, magazine.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eransomNote\u003c/code\u003e and \u003ccode\u003emagazine\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":531,"example_test_cases":"\"a\"\n\"b\"\n\"aa\"\n\"ab\"\n\"aa\"\n\"aab\"","frontend_id":"383","id":"383","is_paid_only":false,"likes":5438,"title":"Ransom Note","title_slug":"ransom-note","topic_tags":["Hash Table","String","Counting"],"total_accepted":1683873,"total_submissions":2599960,"url":"https://leetcode.com/problems/ransom-note/"}
{"acceptance_rate":0.7821131205350447,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string removeStars(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String removeStars(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def removeStars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def removeStars(self, s: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* removeStars(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string RemoveStars(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string}\n */\nvar removeStars = function(s) {\n    \n};","lang":"javascript"},{"code":"function removeStars(s: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeStars($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func removeStars(_ s: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun removeStars(s: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String removeStars(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func removeStars(s string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String}\ndef remove_stars(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def removeStars(s: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn remove_stars(s: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (remove-stars s)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec remove_stars(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nremove_stars(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec remove_stars(s :: String.t) :: String.t\n  def remove_stars(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e, which contains stars \u003ccode\u003e*\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn one operation, you can:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eChoose a star in \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eRemove the closest \u003cstrong\u003enon-star\u003c/strong\u003e character to its \u003cstrong\u003eleft\u003c/strong\u003e, as well as remove the star itself.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe string after \u003cstrong\u003eall\u003c/strong\u003e stars have been removed\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe input will be generated such that the operation is always possible.\u003c/li\u003e\n\t\u003cli\u003eIt can be shown that the resulting string will always be unique.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;leet**cod*e\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;lecoe\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Performing the removals from left to right:\n- The closest character to the 1\u003csup\u003est\u003c/sup\u003e star is \u0026#39;t\u0026#39; in \u0026quot;lee\u003cstrong\u003e\u003cu\u003et\u003c/u\u003e\u003c/strong\u003e**cod*e\u0026quot;. s becomes \u0026quot;lee*cod*e\u0026quot;.\n- The closest character to the 2\u003csup\u003end\u003c/sup\u003e star is \u0026#39;e\u0026#39; in \u0026quot;le\u003cstrong\u003e\u003cu\u003ee\u003c/u\u003e\u003c/strong\u003e*cod*e\u0026quot;. s becomes \u0026quot;lecod*e\u0026quot;.\n- The closest character to the 3\u003csup\u003erd\u003c/sup\u003e star is \u0026#39;d\u0026#39; in \u0026quot;leco\u003cstrong\u003e\u003cu\u003ed\u003c/u\u003e\u003c/strong\u003e*e\u0026quot;. s becomes \u0026quot;lecoe\u0026quot;.\nThere are no more stars, so we return \u0026quot;lecoe\u0026quot;.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;erase*****\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The entire string is removed, so we return an empty string.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of lowercase English letters and stars \u003ccode\u003e*\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe operation above can be performed on \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":226,"example_test_cases":"\"leet**cod*e\"\n\"erase*****\"","frontend_id":"2390","id":"2470","is_paid_only":false,"likes":3117,"title":"Removing Stars From a String","title_slug":"removing-stars-from-a-string","topic_tags":["String","Stack","Simulation"],"total_accepted":531851,"total_submissions":680018,"url":"https://leetcode.com/problems/removing-stars-from-a-string/"}
{"acceptance_rate":0.5876196835194031,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string reverseVowels(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String reverseVowels(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def reverseVowels(self, s: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* reverseVowels(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string ReverseVowels(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseVowels = function(s) {\n    \n};","lang":"javascript"},{"code":"function reverseVowels(s: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseVowels($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func reverseVowels(_ s: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun reverseVowels(s: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String reverseVowels(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func reverseVowels(s string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String}\ndef reverse_vowels(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def reverseVowels(s: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn reverse_vowels(s: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (reverse-vowels s)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec reverse_vowels(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nreverse_vowels(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec reverse_vowels(s :: String.t) :: String.t\n  def reverse_vowels(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, reverse only all the vowels in the string and return it.\u003c/p\u003e\n\n\u003cp\u003eThe vowels are \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;e\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;i\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;o\u0026#39;\u003c/code\u003e, and \u003ccode\u003e\u0026#39;u\u0026#39;\u003c/code\u003e, and they can appear in both lower and upper cases, more than once.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;IceCreAm\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;AceCreIm\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe vowels in \u003ccode\u003es\u003c/code\u003e are \u003ccode\u003e[\u0026#39;I\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;A\u0026#39;]\u003c/code\u003e. On reversing the vowels, s becomes \u003ccode\u003e\u0026quot;AceCreIm\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;leetcode\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;leotcede\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 3 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consist of \u003cstrong\u003eprintable ASCII\u003c/strong\u003e characters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":2839,"example_test_cases":"\"IceCreAm\"\n\"leetcode\"","frontend_id":"345","id":"345","is_paid_only":false,"likes":5052,"title":"Reverse Vowels of a String","title_slug":"reverse-vowels-of-a-string","topic_tags":["Two Pointers","String"],"total_accepted":1341229,"total_submissions":2282478,"url":"https://leetcode.com/problems/reverse-vowels-of-a-string/"}
{"acceptance_rate":0.5285795805440111,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def reverseWords(self, s: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* reverseWords(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};","lang":"javascript"},{"code":"function reverseWords(s: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseWords($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func reverseWords(_ s: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun reverseWords(s: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String reverseWords(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func reverseWords(s string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn reverse_words(s: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (reverse-words s)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec reverse_words(S :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nreverse_words(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec reverse_words(s :: String.t) :: String.t\n  def reverse_words(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an input string \u003ccode\u003es\u003c/code\u003e, reverse the order of the \u003cstrong\u003ewords\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003eword\u003c/strong\u003e is defined as a sequence of non-space characters. The \u003cstrong\u003ewords\u003c/strong\u003e in \u003ccode\u003es\u003c/code\u003e will be separated by at least one space.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea string of the words in reverse order concatenated by a single space.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eNote\u003c/b\u003e that \u003ccode\u003es\u003c/code\u003e may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;the sky is blue\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;blue is sky the\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;  hello world  \u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;world hello\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Your reversed string should not contain leading or trailing spaces.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;a good   example\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;example good a\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e You need to reduce multiple spaces between two words to a single space in the reversed string.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e contains English letters (upper-case and lower-case), digits, and spaces \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThere is \u003cstrong\u003eat least one\u003c/strong\u003e word in \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cb data-stringify-type=\"bold\"\u003eFollow-up:\u0026nbsp;\u003c/b\u003eIf the string data type is mutable in your language, can\u0026nbsp;you solve it\u0026nbsp;\u003cb data-stringify-type=\"bold\"\u003ein-place\u003c/b\u003e\u0026nbsp;with\u0026nbsp;\u003ccode data-stringify-type=\"code\"\u003eO(1)\u003c/code\u003e\u0026nbsp;extra space?\u003c/p\u003e\n","difficulty":"Medium","dislikes":5413,"example_test_cases":"\"the sky is blue\"\n\"  hello world  \"\n\"a good   example\"","frontend_id":"151","id":"151","is_paid_only":false,"likes":9689,"title":"Reverse Words in a String","title_slug":"reverse-words-in-a-string","topic_tags":["Two Pointers","String"],"total_accepted":2500072,"total_submissions":4729793,"url":"https://leetcode.com/problems/reverse-words-in-a-string/"}
{"acceptance_rate":0.652004769968366,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def romanToInt(self, s: str) -\u003e int:\n        ","lang":"python3"},{"code":"int romanToInt(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};","lang":"javascript"},{"code":"function romanToInt(s: string): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func romanToInt(_ s: String) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int romanToInt(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func romanToInt(s string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn roman_to_int(s: String) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (roman-to-int s)\n  (-\u003e string? exact-integer?)\n  )","lang":"racket"},{"code":"-spec roman_to_int(S :: unicode:unicode_binary()) -\u003e integer().\nroman_to_int(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eRoman numerals are represented by seven different symbols:\u0026nbsp;\u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e and \u003ccode\u003eM\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eSymbol\u003c/strong\u003e       \u003cstrong\u003eValue\u003c/strong\u003e\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\u003c/pre\u003e\n\n\u003cp\u003eFor example,\u0026nbsp;\u003ccode\u003e2\u003c/code\u003e is written as \u003ccode\u003eII\u003c/code\u003e\u0026nbsp;in Roman numeral, just two ones added together. \u003ccode\u003e12\u003c/code\u003e is written as\u0026nbsp;\u003ccode\u003eXII\u003c/code\u003e, which is simply \u003ccode\u003eX + II\u003c/code\u003e. The number \u003ccode\u003e27\u003c/code\u003e is written as \u003ccode\u003eXXVII\u003c/code\u003e, which is \u003ccode\u003eXX + V + II\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \u003ccode\u003eIIII\u003c/code\u003e. Instead, the number four is written as \u003ccode\u003eIV\u003c/code\u003e. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \u003ccode\u003eIX\u003c/code\u003e. There are six instances where subtraction is used:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e can be placed before \u003ccode\u003eV\u003c/code\u003e (5) and \u003ccode\u003eX\u003c/code\u003e (10) to make 4 and 9.\u0026nbsp;\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e can be placed before \u003ccode\u003eL\u003c/code\u003e (50) and \u003ccode\u003eC\u003c/code\u003e (100) to make 40 and 90.\u0026nbsp;\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e can be placed before \u003ccode\u003eD\u003c/code\u003e (500) and \u003ccode\u003eM\u003c/code\u003e (1000) to make 400 and 900.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGiven a roman numeral, convert it to an integer.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;III\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003cstrong\u003eExplanation:\u003c/strong\u003e III = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;LVIII\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 58\n\u003cstrong\u003eExplanation:\u003c/strong\u003e L = 50, V= 5, III = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;MCMXCIV\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1994\n\u003cstrong\u003eExplanation:\u003c/strong\u003e M = 1000, CM = 900, XC = 90 and IV = 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 15\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e contains only\u0026nbsp;the characters \u003ccode\u003e(\u0026#39;I\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;M\u0026#39;)\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIt is \u003cstrong\u003eguaranteed\u003c/strong\u003e\u0026nbsp;that \u003ccode\u003es\u003c/code\u003e is a valid roman numeral in the range \u003ccode\u003e[1, 3999]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1133,"example_test_cases":"\"III\"\n\"LVIII\"\n\"MCMXCIV\"","frontend_id":"13","id":"13","is_paid_only":false,"likes":16295,"title":"Roman to Integer","title_slug":"roman-to-integer","topic_tags":["Hash Table","Math","String"],"total_accepted":5048218,"total_submissions":7742609,"url":"https://leetcode.com/problems/roman-to-integer/"}
{"acceptance_rate":0.433735580572919,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    void rotate(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public void rotate(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def rotate(self, nums: List[int], k: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ","lang":"python3"},{"code":"void rotate(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public void Rotate(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"/**\n Do not return anything, modify nums in-place instead.\n */\nfunction rotate(nums: number[], k: number): void {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(\u0026$nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun rotate(nums: IntArray, k: Int): Unit {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  void rotate(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func rotate(nums []int, k int)  {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef rotate(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn rotate(nums: \u0026mut Vec\u003ci32\u003e, k: i32) {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, rotate the array to the right by \u003ccode\u003ek\u003c/code\u003e steps, where \u003ccode\u003ek\u003c/code\u003e is non-negative.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3,4,5,6,7], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [5,6,7,1,2,3,4]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,-100,3,99], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3,99,-1,-100]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= k \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eTry to come up with as many solutions as you can. There are at least \u003cstrong\u003ethree\u003c/strong\u003e different ways to solve this problem.\u003c/li\u003e\n\t\u003cli\u003eCould you do it in-place with \u003ccode\u003eO(1)\u003c/code\u003e extra space?\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":2122,"example_test_cases":"[1,2,3,4,5,6,7]\n3\n[-1,-100,3,99]\n2","frontend_id":"189","id":"189","is_paid_only":false,"likes":19822,"title":"Rotate Array","title_slug":"rotate-array","topic_tags":["Array","Math","Two Pointers"],"total_accepted":3310862,"total_submissions":7633365,"url":"https://leetcode.com/problems/rotate-array/"}
{"acceptance_rate":0.43146793915404574,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int search(vector\u003cint\u003e\u0026 nums, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def search(self, nums: List[int], target: int) -\u003e int:\n        ","lang":"python3"},{"code":"int search(int* nums, int numsSize, int target) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};","lang":"javascript"},{"code":"function search(nums: number[], target: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func search(_ nums: [Int], _ target: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int search(List\u003cint\u003e nums, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func search(nums []int, target int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn search(nums: Vec\u003ci32\u003e, target: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (search nums target)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec search(Nums :: [integer()], Target :: integer()) -\u003e integer().\nsearch(Nums, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThere is an integer array \u003ccode\u003enums\u003c/code\u003e sorted in ascending order (with \u003cstrong\u003edistinct\u003c/strong\u003e values).\u003c/p\u003e\n\n\u003cp\u003ePrior to being passed to your function, \u003ccode\u003enums\u003c/code\u003e is \u003cstrong\u003epossibly rotated\u003c/strong\u003e at an unknown pivot index \u003ccode\u003ek\u003c/code\u003e (\u003ccode\u003e1 \u0026lt;= k \u0026lt; nums.length\u003c/code\u003e) such that the resulting array is \u003ccode\u003e[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\u003c/code\u003e (\u003cstrong\u003e0-indexed\u003c/strong\u003e). For example, \u003ccode\u003e[0,1,2,4,5,6,7]\u003c/code\u003e might be rotated at pivot index \u003ccode\u003e3\u003c/code\u003e and become \u003ccode\u003e[4,5,6,7,0,1,2]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven the array \u003ccode\u003enums\u003c/code\u003e \u003cstrong\u003eafter\u003c/strong\u003e the possible rotation and an integer \u003ccode\u003etarget\u003c/code\u003e, return \u003cem\u003ethe index of \u003c/em\u003e\u003ccode\u003etarget\u003c/code\u003e\u003cem\u003e if it is in \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e\u003cem\u003e, or \u003c/em\u003e\u003ccode\u003e-1\u003c/code\u003e\u003cem\u003e if it is not in \u003c/em\u003e\u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm with \u003ccode\u003eO(log n)\u003c/code\u003e runtime complexity.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,5,6,7,0,1,2], target = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,5,6,7,0,1,2], target = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1], target = 0\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll values of \u003ccode\u003enums\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e is an ascending array that is possibly rotated.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= target \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1728,"example_test_cases":"[4,5,6,7,0,1,2]\n0\n[4,5,6,7,0,1,2]\n3\n[1]\n0","frontend_id":"33","id":"33","is_paid_only":false,"likes":28485,"title":"Search in Rotated Sorted Array","title_slug":"search-in-rotated-sorted-array","topic_tags":["Array","Binary Search"],"total_accepted":3769061,"total_submissions":8735437,"url":"https://leetcode.com/problems/search-in-rotated-sorted-array/"}
{"acceptance_rate":0.4939433816004484,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int searchInsert(vector\u003cint\u003e\u0026 nums, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -\u003e int:\n        ","lang":"python3"},{"code":"int searchInsert(int* nums, int numsSize, int target) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};","lang":"javascript"},{"code":"function searchInsert(nums: number[], target: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int searchInsert(List\u003cint\u003e nums, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func searchInsert(nums []int, target int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn search_insert(nums: Vec\u003ci32\u003e, target: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (search-insert nums target)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec search_insert(Nums :: [integer()], Target :: integer()) -\u003e integer().\nsearch_insert(Nums, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\u003c/p\u003e\n\n\u003cp\u003eYou must\u0026nbsp;write an algorithm with\u0026nbsp;\u003ccode\u003eO(log n)\u003c/code\u003e runtime complexity.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,3,5,6], target = 5\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,3,5,6], target = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,3,5,6], target = 7\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e contains \u003cstrong\u003edistinct\u003c/strong\u003e values sorted in \u003cstrong\u003eascending\u003c/strong\u003e order.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= target \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":844,"example_test_cases":"[1,3,5,6]\n5\n[1,3,5,6]\n2\n[1,3,5,6]\n7","frontend_id":"35","id":"35","is_paid_only":false,"likes":17746,"title":"Search Insert Position","title_slug":"search-insert-position","topic_tags":["Array","Binary Search"],"total_accepted":4011820,"total_submissions":8122024,"url":"https://leetcode.com/problems/search-insert-position/"}
{"acceptance_rate":0.6507186482710839,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cstring\u003e\u003e suggestedProducts(vector\u003cstring\u003e\u0026 products, string searchWord) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cString\u003e\u003e suggestedProducts(String[] products, String searchWord) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def suggestedProducts(self, products, searchWord):\n        \"\"\"\n        :type products: List[str]\n        :type searchWord: str\n        :rtype: List[List[str]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def suggestedProducts(self, products: List[str], searchWord: str) -\u003e List[List[str]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** suggestedProducts(char** products, int productsSize, char* searchWord, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cstring\u003e\u003e SuggestedProducts(string[] products, string searchWord) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string[]} products\n * @param {string} searchWord\n * @return {string[][]}\n */\nvar suggestedProducts = function(products, searchWord) {\n    \n};","lang":"javascript"},{"code":"function suggestedProducts(products: string[], searchWord: string): string[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[] $products\n     * @param String $searchWord\n     * @return String[][]\n     */\n    function suggestedProducts($products, $searchWord) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func suggestedProducts(_ products: [String], _ searchWord: String) -\u003e [[String]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun suggestedProducts(products: Array\u003cString\u003e, searchWord: String): List\u003cList\u003cString\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cString\u003e\u003e suggestedProducts(List\u003cString\u003e products, String searchWord) {\n    \n  }\n}","lang":"dart"},{"code":"func suggestedProducts(products []string, searchWord string) [][]string {\n    \n}","lang":"golang"},{"code":"# @param {String[]} products\n# @param {String} search_word\n# @return {String[][]}\ndef suggested_products(products, search_word)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def suggestedProducts(products: Array[String], searchWord: String): List[List[String]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn suggested_products(products: Vec\u003cString\u003e, search_word: String) -\u003e Vec\u003cVec\u003cString\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (suggested-products products searchWord)\n  (-\u003e (listof string?) string? (listof (listof string?)))\n  )","lang":"racket"},{"code":"-spec suggested_products(Products :: [unicode:unicode_binary()], SearchWord :: unicode:unicode_binary()) -\u003e [[unicode:unicode_binary()]].\nsuggested_products(Products, SearchWord) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec suggested_products(products :: [String.t], search_word :: String.t) :: [[String.t]]\n  def suggested_products(products, search_word) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array of strings \u003ccode\u003eproducts\u003c/code\u003e and a string \u003ccode\u003esearchWord\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDesign a system that suggests at most three product names from \u003ccode\u003eproducts\u003c/code\u003e after each character of \u003ccode\u003esearchWord\u003c/code\u003e is typed. Suggested products should have common prefix with \u003ccode\u003esearchWord\u003c/code\u003e. If there are more than three products with a common prefix return the three lexicographically minimums products.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ea list of lists of the suggested products after each character of \u003c/em\u003e\u003ccode\u003esearchWord\u003c/code\u003e\u003cem\u003e is typed\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e products = [\u0026quot;mobile\u0026quot;,\u0026quot;mouse\u0026quot;,\u0026quot;moneypot\u0026quot;,\u0026quot;monitor\u0026quot;,\u0026quot;mousepad\u0026quot;], searchWord = \u0026quot;mouse\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[\u0026quot;mobile\u0026quot;,\u0026quot;moneypot\u0026quot;,\u0026quot;monitor\u0026quot;],[\u0026quot;mobile\u0026quot;,\u0026quot;moneypot\u0026quot;,\u0026quot;monitor\u0026quot;],[\u0026quot;mouse\u0026quot;,\u0026quot;mousepad\u0026quot;],[\u0026quot;mouse\u0026quot;,\u0026quot;mousepad\u0026quot;],[\u0026quot;mouse\u0026quot;,\u0026quot;mousepad\u0026quot;]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e products sorted lexicographically = [\u0026quot;mobile\u0026quot;,\u0026quot;moneypot\u0026quot;,\u0026quot;monitor\u0026quot;,\u0026quot;mouse\u0026quot;,\u0026quot;mousepad\u0026quot;].\nAfter typing m and mo all products match and we show user [\u0026quot;mobile\u0026quot;,\u0026quot;moneypot\u0026quot;,\u0026quot;monitor\u0026quot;].\nAfter typing mou, mous and mouse the system suggests [\u0026quot;mouse\u0026quot;,\u0026quot;mousepad\u0026quot;].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e products = [\u0026quot;havana\u0026quot;], searchWord = \u0026quot;havana\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[\u0026quot;havana\u0026quot;],[\u0026quot;havana\u0026quot;],[\u0026quot;havana\u0026quot;],[\u0026quot;havana\u0026quot;],[\u0026quot;havana\u0026quot;],[\u0026quot;havana\u0026quot;]]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only word \u0026quot;havana\u0026quot; will be always suggested while typing the search word.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= products.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= products[i].length \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= sum(products[i].length) \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the strings of \u003ccode\u003eproducts\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eproducts[i]\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= searchWord.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003esearchWord\u003c/code\u003e consists of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":260,"example_test_cases":"[\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"]\n\"mouse\"\n[\"havana\"]\n\"havana\"","frontend_id":"1268","id":"1397","is_paid_only":false,"likes":5017,"title":"Search Suggestions System","title_slug":"search-suggestions-system","topic_tags":["Array","String","Binary Search","Trie","Sorting","Heap (Priority Queue)"],"total_accepted":401986,"total_submissions":617757,"url":"https://leetcode.com/problems/search-suggestions-system/"}
{"acceptance_rate":0.48356231348440565,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def simplifyPath(self, path: str) -\u003e str:\n        ","lang":"python3"},{"code":"char* simplifyPath(char* path) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};","lang":"javascript"},{"code":"function simplifyPath(path: string): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func simplifyPath(_ path: String) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String simplifyPath(String path) {\n    \n  }\n}","lang":"dart"},{"code":"func simplifyPath(path string) string {\n    \n}","lang":"golang"},{"code":"# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn simplify_path(path: String) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (simplify-path path)\n  (-\u003e string? string?)\n  )","lang":"racket"},{"code":"-spec simplify_path(Path :: unicode:unicode_binary()) -\u003e unicode:unicode_binary().\nsimplify_path(Path) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an \u003cem\u003eabsolute\u003c/em\u003e path for a Unix-style file system, which always begins with a slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e. Your task is to transform this absolute path into its \u003cstrong\u003esimplified canonical path\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003erules\u003c/em\u003e of a Unix-style file system are as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA single period \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e represents the current directory.\u003c/li\u003e\n\t\u003cli\u003eA double period \u003ccode\u003e\u0026#39;..\u0026#39;\u003c/code\u003e represents the previous/parent directory.\u003c/li\u003e\n\t\u003cli\u003eMultiple consecutive slashes such as \u003ccode\u003e\u0026#39;//\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;///\u0026#39;\u003c/code\u003e are treated as a single slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eAny sequence of periods that does \u003cstrong\u003enot match\u003c/strong\u003e the rules above should be treated as a \u003cstrong\u003evalid directory or\u003c/strong\u003e \u003cstrong\u003efile \u003c/strong\u003e\u003cstrong\u003ename\u003c/strong\u003e. For example, \u003ccode\u003e\u0026#39;...\u0026#39; \u003c/code\u003eand \u003ccode\u003e\u0026#39;....\u0026#39;\u003c/code\u003e are valid directory or file names.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe simplified canonical path should follow these \u003cem\u003erules\u003c/em\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe path must start with a single slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eDirectories within the path must be separated by exactly one slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe path must not end with a slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e, unless it is the root directory.\u003c/li\u003e\n\t\u003cli\u003eThe path must not have any single or double periods (\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;..\u0026#39;\u003c/code\u003e) used to denote current or parent directories.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn the \u003cstrong\u003esimplified canonical path\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epath = \u0026quot;/home/\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;/home\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe trailing slash should be removed.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epath = \u0026quot;/home//foo/\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;/home/foo\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eMultiple consecutive slashes are replaced by a single one.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epath = \u0026quot;/home/user/Documents/../Pictures\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;/home/user/Pictures\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eA double period \u003ccode\u003e\u0026quot;..\u0026quot;\u003c/code\u003e refers to the directory up a level (the parent directory).\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epath = \u0026quot;/../\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;/\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eGoing one level up from the root directory is not possible.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epath = \u0026quot;/.../a/../b/c/../d/./\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e\u0026quot;/.../b/d\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026quot;...\u0026quot;\u003c/code\u003e is a valid name for a directory in this problem.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= path.length \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epath\u003c/code\u003e consists of English letters, digits, period \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e, slash \u003ccode\u003e\u0026#39;/\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;_\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epath\u003c/code\u003e is a valid absolute Unix path.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1377,"example_test_cases":"\"/home/\"\n\"/home//foo/\"\n\"/home/user/Documents/../Pictures\"\n\"/../\"\n\"/.../a/../b/c/../d/./\"","frontend_id":"71","id":"71","is_paid_only":false,"likes":6214,"title":"Simplify Path","title_slug":"simplify-path","topic_tags":["String","Stack"],"total_accepted":1133619,"total_submissions":2344308,"url":"https://leetcode.com/problems/simplify-path/"}
{"acceptance_rate":0.6558285309532962,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int singleNumber(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int singleNumber(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};","lang":"javascript"},{"code":"function singleNumber(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func singleNumber(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int singleNumber(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func singleNumber(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn single_number(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (single-number nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec single_number(Nums :: [integer()]) -\u003e integer().\nsingle_number(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e where\u0026nbsp;every element appears \u003cstrong\u003ethree times\u003c/strong\u003e except for one, which appears \u003cstrong\u003eexactly once\u003c/strong\u003e. \u003cem\u003eFind the single element and return it\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must\u0026nbsp;implement a solution with a linear runtime complexity and use\u0026nbsp;only constant\u0026nbsp;extra space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,2,3,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,0,1,0,1,99]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 99\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eEach element in \u003ccode\u003enums\u003c/code\u003e appears exactly \u003cstrong\u003ethree times\u003c/strong\u003e except for one element which appears \u003cstrong\u003eonce\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":730,"example_test_cases":"[2,2,3,2]\n[0,1,0,1,0,1,99]","frontend_id":"137","id":"137","is_paid_only":false,"likes":8387,"title":"Single Number II","title_slug":"single-number-ii","topic_tags":["Array","Bit Manipulation"],"total_accepted":769420,"total_submissions":1173203,"url":"https://leetcode.com/problems/single-number-ii/"}
{"acceptance_rate":0.7632666640219423,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int singleNumber(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        ","lang":"python3"},{"code":"int singleNumber(int* nums, int numsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};","lang":"javascript"},{"code":"function singleNumber(nums: number[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func singleNumber(_ nums: [Int]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int singleNumber(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func singleNumber(nums []int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn single_number(nums: Vec\u003ci32\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (single-number nums)\n  (-\u003e (listof exact-integer?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec single_number(Nums :: [integer()]) -\u003e integer().\nsingle_number(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a \u003cstrong\u003enon-empty\u003c/strong\u003e\u0026nbsp;array of integers \u003ccode\u003enums\u003c/code\u003e, every element appears \u003cem\u003etwice\u003c/em\u003e except for one. Find that single one.\u003c/p\u003e\n\n\u003cp\u003eYou must\u0026nbsp;implement a solution with a linear runtime complexity and use\u0026nbsp;only constant\u0026nbsp;extra space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enums = [2,2,1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enums = [4,1,2,1,2]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e4\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003enums = [1]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-3 * 10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eEach element in the array appears twice except for one element which appears only once.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":831,"example_test_cases":"[2,2,1]\n[4,1,2,1,2]\n[1]","frontend_id":"136","id":"136","is_paid_only":false,"likes":17865,"title":"Single Number","title_slug":"single-number","topic_tags":["Array","Bit Manipulation"],"total_accepted":3886476,"total_submissions":5091898,"url":"https://leetcode.com/problems/single-number/"}
{"acceptance_rate":0.477961982425192,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e maxSlidingWindow(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] MaxSlidingWindow(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function maxSlidingWindow(nums: number[], k: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSlidingWindow($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun maxSlidingWindow(nums: IntArray, k: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e maxSlidingWindow(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func maxSlidingWindow(nums []int, k int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn max_sliding_window(nums: Vec\u003ci32\u003e, k: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (max-sliding-window nums k)\n  (-\u003e (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec max_sliding_window(Nums :: [integer()], K :: integer()) -\u003e [integer()].\nmax_sliding_window(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec max_sliding_window(nums :: [integer], k :: integer) :: [integer]\n  def max_sliding_window(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given an array of integers\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e, there is a sliding window of size \u003ccode\u003ek\u003c/code\u003e which is moving from the very left of the array to the very right. You can only see the \u003ccode\u003ek\u003c/code\u003e numbers in the window. Each time the sliding window moves right by one position.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe max sliding window\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,3,-1,-3,5,3,6,7], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3,3,5,5,6,7]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       \u003cstrong\u003e3\u003c/strong\u003e\n 1 [3  -1  -3] 5  3  6  7       \u003cstrong\u003e3\u003c/strong\u003e\n 1  3 [-1  -3  5] 3  6  7      \u003cstrong\u003e 5\u003c/strong\u003e\n 1  3  -1 [-3  5  3] 6  7       \u003cstrong\u003e5\u003c/strong\u003e\n 1  3  -1  -3 [5  3  6] 7       \u003cstrong\u003e6\u003c/strong\u003e\n 1  3  -1  -3  5 [3  6  7]      \u003cstrong\u003e7\u003c/strong\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1], k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k \u0026lt;= nums.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":769,"example_test_cases":"[1,3,-1,-3,5,3,6,7]\n3\n[1]\n1","frontend_id":"239","id":"239","is_paid_only":false,"likes":19514,"title":"Sliding Window Maximum","title_slug":"sliding-window-maximum","topic_tags":["Array","Queue","Sliding Window","Heap (Priority Queue)","Monotonic Queue"],"total_accepted":1395909,"total_submissions":2920544,"url":"https://leetcode.com/problems/sliding-window-maximum/"}
{"acceptance_rate":0.405747101896626,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def mySqrt(self, x: int) -\u003e int:\n        ","lang":"python3"},{"code":"int mySqrt(int x) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};","lang":"javascript"},{"code":"function mySqrt(x: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func mySqrt(_ x: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int mySqrt(int x) {\n    \n  }\n}","lang":"dart"},{"code":"func mySqrt(x int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn my_sqrt(x: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (my-sqrt x)\n  (-\u003e exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec my_sqrt(X :: integer()) -\u003e integer().\nmy_sqrt(X) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a non-negative integer \u003ccode\u003ex\u003c/code\u003e, return \u003cem\u003ethe square root of \u003c/em\u003e\u003ccode\u003ex\u003c/code\u003e\u003cem\u003e rounded down to the nearest integer\u003c/em\u003e. The returned integer should be \u003cstrong\u003enon-negative\u003c/strong\u003e as well.\u003c/p\u003e\n\n\u003cp\u003eYou \u003cstrong\u003emust not use\u003c/strong\u003e any built-in exponent function or operator.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, do not use \u003ccode\u003epow(x, 0.5)\u003c/code\u003e in c++ or \u003ccode\u003ex ** 0.5\u003c/code\u003e in python.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e x = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The square root of 4 is 2, so we return 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e x = 8\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= x \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":4597,"example_test_cases":"4\n8","frontend_id":"69","id":"69","is_paid_only":false,"likes":9078,"title":"Sqrt(x)","title_slug":"sqrtx","topic_tags":["Math","Binary Search"],"total_accepted":2698654,"total_submissions":6651074,"url":"https://leetcode.com/problems/sqrtx/"}
{"acceptance_rate":0.5847850346718271,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int compress(vector\u003cchar\u003e\u0026 chars) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int compress(char[] chars) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def compress(self, chars: List[str]) -\u003e int:\n        ","lang":"python3"},{"code":"int compress(char* chars, int charsSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int Compress(char[] chars) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n    \n};","lang":"javascript"},{"code":"function compress(chars: string[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(\u0026$chars) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func compress(_ chars: inout [Character]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun compress(chars: CharArray): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int compress(List\u003cString\u003e chars) {\n    \n  }\n}","lang":"dart"},{"code":"func compress(chars []byte) int {\n    \n}","lang":"golang"},{"code":"# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def compress(chars: Array[Char]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn compress(chars: \u0026mut Vec\u003cchar\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"}],"content":"\u003cp\u003eGiven an array of characters \u003ccode\u003echars\u003c/code\u003e, compress it using the following algorithm:\u003c/p\u003e\n\n\u003cp\u003eBegin with an empty string \u003ccode\u003es\u003c/code\u003e. For each group of \u003cstrong\u003econsecutive repeating characters\u003c/strong\u003e in \u003ccode\u003echars\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIf the group\u0026#39;s length is \u003ccode\u003e1\u003c/code\u003e, append the character to \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eOtherwise, append the character followed by the group\u0026#39;s length.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe compressed string \u003ccode\u003es\u003c/code\u003e \u003cstrong\u003eshould not be returned separately\u003c/strong\u003e, but instead, be stored \u003cstrong\u003ein the input character array \u003ccode\u003echars\u003c/code\u003e\u003c/strong\u003e. Note that group lengths that are \u003ccode\u003e10\u003c/code\u003e or longer will be split into multiple characters in \u003ccode\u003echars\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter you are done \u003cstrong\u003emodifying the input array,\u003c/strong\u003e return \u003cem\u003ethe new length of the array\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou must write an algorithm that uses only constant extra space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e chars = [\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e Return 6, and the first 6 characters of the input array should be: [\u0026quot;a\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;3\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The groups are \u0026quot;aa\u0026quot;, \u0026quot;bb\u0026quot;, and \u0026quot;ccc\u0026quot;. This compresses to \u0026quot;a2b2c3\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e chars = [\u0026quot;a\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e Return 1, and the first character of the input array should be: [\u0026quot;a\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The only group is \u0026quot;a\u0026quot;, which remains uncompressed since it\u0026#39;s a single character.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e chars = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;b\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e Return 4, and the first 4 characters of the input array should be: [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;].\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The groups are \u0026quot;a\u0026quot; and \u0026quot;bbbbbbbbbbbb\u0026quot;. This compresses to \u0026quot;ab12\u0026quot;.\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= chars.length \u0026lt;= 2000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003echars[i]\u003c/code\u003e is a lowercase English letter, uppercase English letter, digit, or symbol.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":8627,"example_test_cases":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n[\"a\"]\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]","frontend_id":"443","id":"443","is_paid_only":false,"likes":5773,"title":"String Compression","title_slug":"string-compression","topic_tags":["Two Pointers","String"],"total_accepted":906563,"total_submissions":1550250,"url":"https://leetcode.com/problems/string-compression/"}
{"acceptance_rate":0.4579291820741108,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int subarraySum(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int subarraySum(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def subarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def subarraySum(self, nums: List[int], k: int) -\u003e int:\n        ","lang":"python3"},{"code":"int subarraySum(int* nums, int numsSize, int k) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function subarraySum(nums: number[], k: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarraySum($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun subarraySum(nums: IntArray, k: Int): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int subarraySum(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func subarraySum(nums []int, k int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def subarraySum(nums: Array[Int], k: Int): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn subarray_sum(nums: Vec\u003ci32\u003e, k: i32) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (subarray-sum nums k)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec subarray_sum(Nums :: [integer()], K :: integer()) -\u003e integer().\nsubarray_sum(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec subarray_sum(nums :: [integer], k :: integer) :: integer\n  def subarray_sum(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe total number of subarrays whose sum equals to\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA subarray is a contiguous \u003cstrong\u003enon-empty\u003c/strong\u003e sequence of elements within an array.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,1], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3], k = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 2 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= nums[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e7\u003c/sup\u003e \u0026lt;= k \u0026lt;= 10\u003csup\u003e7\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":773,"example_test_cases":"[1,1,1]\n2\n[1,2,3]\n3","frontend_id":"560","id":"560","is_paid_only":false,"likes":23663,"title":"Subarray Sum Equals K","title_slug":"subarray-sum-equals-k","topic_tags":["Array","Hash Table","Prefix Sum"],"total_accepted":1913556,"total_submissions":4178716,"url":"https://leetcode.com/problems/subarray-sum-equals-k/"}
{"acceptance_rate":0.8120061221054299,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e subsets(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e subsets(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def subsets(self, nums: List[int]) -\u003e List[List[int]]:\n        ","lang":"python3"},{"code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cIList\u003cint\u003e\u003e Subsets(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};","lang":"javascript"},{"code":"function subsets(nums: number[]): number[][] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func subsets(_ nums: [Int]) -\u003e [[Int]] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun subsets(nums: IntArray): List\u003cList\u003cInt\u003e\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cList\u003cint\u003e\u003e subsets(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func subsets(nums []int) [][]int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn subsets(nums: Vec\u003ci32\u003e) -\u003e Vec\u003cVec\u003ci32\u003e\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (subsets nums)\n  (-\u003e (listof exact-integer?) (listof (listof exact-integer?)))\n  )","lang":"racket"},{"code":"-spec subsets(Nums :: [integer()]) -\u003e [[integer()]].\nsubsets(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec subsets(nums :: [integer]) :: [[integer]]\n  def subsets(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003eunique\u003c/strong\u003e elements, return \u003cem\u003eall possible\u003c/em\u003e \u003cspan data-keyword=\"subset\"\u003e\u003cem\u003esubsets\u003c/em\u003e\u003c/span\u003e \u003cem\u003e(the power set)\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe solution set \u003cstrong\u003emust not\u003c/strong\u003e contain duplicate subsets. Return the solution in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[],[0]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10 \u0026lt;= nums[i] \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the numbers of\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":319,"example_test_cases":"[1,2,3]\n[0]","frontend_id":"78","id":"78","is_paid_only":false,"likes":18479,"title":"Subsets","title_slug":"subsets","topic_tags":["Array","Backtracking","Bit Manipulation"],"total_accepted":2624053,"total_submissions":3231568,"url":"https://leetcode.com/problems/subsets/"}
{"acceptance_rate":0.3315954330481502,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e findSubstring(string s, vector\u003cstring\u003e\u0026 words) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cInteger\u003e findSubstring(String s, String[] words) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def findSubstring(self, s: str, words: List[str]) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cint\u003e FindSubstring(string s, string[] words) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};","lang":"javascript"},{"code":"function findSubstring(s: string, words: string[]): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun findSubstring(s: String, words: Array\u003cString\u003e): List\u003cInt\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e findSubstring(String s, List\u003cString\u003e words) {\n    \n  }\n}","lang":"dart"},{"code":"func findSubstring(s string, words []string) []int {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn find_substring(s: String, words: Vec\u003cString\u003e) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (find-substring s words)\n  (-\u003e string? (listof string?) (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -\u003e [integer()].\nfind_substring(S, Words) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and an array of strings \u003ccode\u003ewords\u003c/code\u003e. All the strings of \u003ccode\u003ewords\u003c/code\u003e are of \u003cstrong\u003ethe same length\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003econcatenated string\u003c/strong\u003e is a string that exactly contains all the strings of any permutation of \u003ccode\u003ewords\u003c/code\u003e concatenated.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eFor example, if \u003ccode\u003ewords = [\u0026quot;ab\u0026quot;,\u0026quot;cd\u0026quot;,\u0026quot;ef\u0026quot;]\u003c/code\u003e, then \u003ccode\u003e\u0026quot;abcdef\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;abefcd\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;cdabef\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;cdefab\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;efabcd\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;efcdab\u0026quot;\u003c/code\u003e are all concatenated strings. \u003ccode\u003e\u0026quot;acdbef\u0026quot;\u003c/code\u003e is not a concatenated string because it is not the concatenation of any permutation of \u003ccode\u003ewords\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn an array of \u003cem\u003ethe starting indices\u003c/em\u003e of all the concatenated substrings in \u003ccode\u003es\u003c/code\u003e. You can return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;barfoothefoobarman\u0026quot;, words = [\u0026quot;foo\u0026quot;,\u0026quot;bar\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[0,9]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe substring starting at 0 is \u003ccode\u003e\u0026quot;barfoo\u0026quot;\u003c/code\u003e. It is the concatenation of \u003ccode\u003e[\u0026quot;bar\u0026quot;,\u0026quot;foo\u0026quot;]\u003c/code\u003e which is a permutation of \u003ccode\u003ewords\u003c/code\u003e.\u003cbr /\u003e\nThe substring starting at 9 is \u003ccode\u003e\u0026quot;foobar\u0026quot;\u003c/code\u003e. It is the concatenation of \u003ccode\u003e[\u0026quot;foo\u0026quot;,\u0026quot;bar\u0026quot;]\u003c/code\u003e which is a permutation of \u003ccode\u003ewords\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;wordgoodgoodgoodbestword\u0026quot;, words = [\u0026quot;word\u0026quot;,\u0026quot;good\u0026quot;,\u0026quot;best\u0026quot;,\u0026quot;word\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is no concatenated substring.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;barfoofoobarthefoobarman\u0026quot;, words = [\u0026quot;bar\u0026quot;,\u0026quot;foo\u0026quot;,\u0026quot;the\u0026quot;]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003e[6,9,12]\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe substring starting at 6 is \u003ccode\u003e\u0026quot;foobarthe\u0026quot;\u003c/code\u003e. It is the concatenation of \u003ccode\u003e[\u0026quot;foo\u0026quot;,\u0026quot;bar\u0026quot;,\u0026quot;the\u0026quot;]\u003c/code\u003e.\u003cbr /\u003e\nThe substring starting at 9 is \u003ccode\u003e\u0026quot;barthefoo\u0026quot;\u003c/code\u003e. It is the concatenation of \u003ccode\u003e[\u0026quot;bar\u0026quot;,\u0026quot;the\u0026quot;,\u0026quot;foo\u0026quot;]\u003c/code\u003e.\u003cbr /\u003e\nThe substring starting at 12 is \u003ccode\u003e\u0026quot;thefoobar\u0026quot;\u003c/code\u003e. It is the concatenation of \u003ccode\u003e[\u0026quot;the\u0026quot;,\u0026quot;foo\u0026quot;,\u0026quot;bar\u0026quot;]\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words[i].length \u0026lt;= 30\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ewords[i]\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":379,"example_test_cases":"\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]","frontend_id":"30","id":"30","is_paid_only":false,"likes":2327,"title":"Substring with Concatenation of All Words","title_slug":"substring-with-concatenation-of-all-words","topic_tags":["Hash Table","String","Sliding Window"],"total_accepted":604589,"total_submissions":1823273,"url":"https://leetcode.com/problems/substring-with-concatenation-of-all-words/"}
{"acceptance_rate":0.45745438532672167,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e successfulPairs(vector\u003cint\u003e\u0026 spells, vector\u003cint\u003e\u0026 potions, long long success) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] successfulPairs(int[] spells, int[] potions, long success) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def successfulPairs(self, spells, potions, success):\n        \"\"\"\n        :type spells: List[int]\n        :type potions: List[int]\n        :type success: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* successfulPairs(int* spells, int spellsSize, int* potions, int potionsSize, long long success, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] SuccessfulPairs(int[] spells, int[] potions, long success) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} spells\n * @param {number[]} potions\n * @param {number} success\n * @return {number[]}\n */\nvar successfulPairs = function(spells, potions, success) {\n    \n};","lang":"javascript"},{"code":"function successfulPairs(spells: number[], potions: number[], success: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $spells\n     * @param Integer[] $potions\n     * @param Integer $success\n     * @return Integer[]\n     */\n    function successfulPairs($spells, $potions, $success) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func successfulPairs(_ spells: [Int], _ potions: [Int], _ success: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun successfulPairs(spells: IntArray, potions: IntArray, success: Long): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e successfulPairs(List\u003cint\u003e spells, List\u003cint\u003e potions, int success) {\n    \n  }\n}","lang":"dart"},{"code":"func successfulPairs(spells []int, potions []int, success int64) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} spells\n# @param {Integer[]} potions\n# @param {Integer} success\n# @return {Integer[]}\ndef successful_pairs(spells, potions, success)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def successfulPairs(spells: Array[Int], potions: Array[Int], success: Long): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn successful_pairs(spells: Vec\u003ci32\u003e, potions: Vec\u003ci32\u003e, success: i64) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (successful-pairs spells potions success)\n  (-\u003e (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec successful_pairs(Spells :: [integer()], Potions :: [integer()], Success :: integer()) -\u003e [integer()].\nsuccessful_pairs(Spells, Potions, Success) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec successful_pairs(spells :: [integer], potions :: [integer], success :: integer) :: [integer]\n  def successful_pairs(spells, potions, success) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given two positive integer arrays \u003ccode\u003espells\u003c/code\u003e and \u003ccode\u003epotions\u003c/code\u003e, of length \u003ccode\u003en\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e respectively, where \u003ccode\u003espells[i]\u003c/code\u003e represents the strength of the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e spell and \u003ccode\u003epotions[j]\u003c/code\u003e represents the strength of the \u003ccode\u003ej\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e potion.\u003c/p\u003e\n\n\u003cp\u003eYou are also given an integer \u003ccode\u003esuccess\u003c/code\u003e. A spell and potion pair is considered \u003cstrong\u003esuccessful\u003c/strong\u003e if the \u003cstrong\u003eproduct\u003c/strong\u003e of their strengths is \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003esuccess\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ean integer array \u003c/em\u003e\u003ccode\u003epairs\u003c/code\u003e\u003cem\u003e of length \u003c/em\u003e\u003ccode\u003en\u003c/code\u003e\u003cem\u003e where \u003c/em\u003e\u003ccode\u003epairs[i]\u003c/code\u003e\u003cem\u003e is the number of \u003cstrong\u003epotions\u003c/strong\u003e that will form a successful pair with the \u003c/em\u003e\u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e\u003cem\u003e spell.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e spells = [5,1,3], potions = [1,2,3,4,5], success = 7\n\u003cstrong\u003eOutput:\u003c/strong\u003e [4,0,3]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n- 0\u003csup\u003eth\u003c/sup\u003e spell: 5 * [1,2,3,4,5] = [5,\u003cu\u003e\u003cstrong\u003e10\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e15\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e20\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e25\u003c/strong\u003e\u003c/u\u003e]. 4 pairs are successful.\n- 1\u003csup\u003est\u003c/sup\u003e spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2\u003csup\u003end\u003c/sup\u003e spell: 3 * [1,2,3,4,5] = [3,6,\u003cu\u003e\u003cstrong\u003e9\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e12\u003c/strong\u003e\u003c/u\u003e,\u003cu\u003e\u003cstrong\u003e15\u003c/strong\u003e\u003c/u\u003e]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e spells = [3,1,2], potions = [8,5,8], success = 16\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2,0,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\n- 0\u003csup\u003eth\u003c/sup\u003e spell: 3 * [8,5,8] = [\u003cu\u003e\u003cstrong\u003e24\u003c/strong\u003e\u003c/u\u003e,15,\u003cu\u003e\u003cstrong\u003e24\u003c/strong\u003e\u003c/u\u003e]. 2 pairs are successful.\n- 1\u003csup\u003est\u003c/sup\u003e spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2\u003csup\u003end\u003c/sup\u003e spell: 2 * [8,5,8] = [\u003cstrong\u003e\u003cu\u003e16\u003c/u\u003e\u003c/strong\u003e,10,\u003cu\u003e\u003cstrong\u003e16\u003c/strong\u003e\u003c/u\u003e]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003en == spells.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003em == potions.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n, m \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= spells[i], potions[i] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= success \u0026lt;= 10\u003csup\u003e10\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":87,"example_test_cases":"[5,1,3]\n[1,2,3,4,5]\n7\n[3,1,2]\n[8,5,8]\n16","frontend_id":"2300","id":"2392","is_paid_only":false,"likes":2748,"title":"Successful Pairs of Spells and Potions","title_slug":"successful-pairs-of-spells-and-potions","topic_tags":["Array","Two Pointers","Binary Search","Sorting"],"total_accepted":238933,"total_submissions":522310,"url":"https://leetcode.com/problems/successful-pairs-of-spells-and-potions/"}
{"acceptance_rate":0.5321159750741686,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cstring\u003e summaryRanges(vector\u003cint\u003e\u0026 nums) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cString\u003e summaryRanges(int[] nums) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def summaryRanges(self, nums: List[int]) -\u003e List[str]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** summaryRanges(int* nums, int numsSize, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cstring\u003e SummaryRanges(int[] nums) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar summaryRanges = function(nums) {\n    \n};","lang":"javascript"},{"code":"function summaryRanges(nums: number[]): string[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String[]\n     */\n    function summaryRanges($nums) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func summaryRanges(_ nums: [Int]) -\u003e [String] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun summaryRanges(nums: IntArray): List\u003cString\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cString\u003e summaryRanges(List\u003cint\u003e nums) {\n    \n  }\n}","lang":"dart"},{"code":"func summaryRanges(nums []int) []string {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @return {String[]}\ndef summary_ranges(nums)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def summaryRanges(nums: Array[Int]): List[String] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn summary_ranges(nums: Vec\u003ci32\u003e) -\u003e Vec\u003cString\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (summary-ranges nums)\n  (-\u003e (listof exact-integer?) (listof string?))\n  )","lang":"racket"},{"code":"-spec summary_ranges(Nums :: [integer()]) -\u003e [unicode:unicode_binary()].\nsummary_ranges(Nums) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec summary_ranges(nums :: [integer]) :: [String.t]\n  def summary_ranges(nums) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a \u003cstrong\u003esorted unique\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003erange\u003c/strong\u003e \u003ccode\u003e[a,b]\u003c/code\u003e is the set of all integers from \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003eb\u003c/code\u003e (inclusive).\u003c/p\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe \u003cstrong\u003esmallest sorted\u003c/strong\u003e list of ranges that \u003cstrong\u003ecover all the numbers in the array exactly\u003c/strong\u003e\u003c/em\u003e. That is, each element of \u003ccode\u003enums\u003c/code\u003e is covered by exactly one of the ranges, and there is no integer \u003ccode\u003ex\u003c/code\u003e such that \u003ccode\u003ex\u003c/code\u003e is in one of the ranges but not in \u003ccode\u003enums\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEach range \u003ccode\u003e[a,b]\u003c/code\u003e in the list should be output as:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026quot;a-\u0026gt;b\u0026quot;\u003c/code\u003e if \u003ccode\u003ea != b\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e if \u003ccode\u003ea == b\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,2,4,5,7]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;0-\u0026gt;2\u0026quot;,\u0026quot;4-\u0026gt;5\u0026quot;,\u0026quot;7\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The ranges are:\n[0,2] --\u0026gt; \u0026quot;0-\u0026gt;2\u0026quot;\n[4,5] --\u0026gt; \u0026quot;4-\u0026gt;5\u0026quot;\n[7,7] --\u0026gt; \u0026quot;7\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,2,3,4,6,8,9]\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;0\u0026quot;,\u0026quot;2-\u0026gt;4\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;8-\u0026gt;9\u0026quot;]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The ranges are:\n[0,0] --\u0026gt; \u0026quot;0\u0026quot;\n[2,4] --\u0026gt; \u0026quot;2-\u0026gt;4\u0026quot;\n[6,6] --\u0026gt; \u0026quot;6\u0026quot;\n[8,9] --\u0026gt; \u0026quot;8-\u0026gt;9\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= nums.length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-2\u003csup\u003e31\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 2\u003csup\u003e31\u003c/sup\u003e - 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the values of \u003ccode\u003enums\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e is sorted in ascending order.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":2334,"example_test_cases":"[0,1,2,4,5,7]\n[0,2,3,4,6,8,9]","frontend_id":"228","id":"228","is_paid_only":false,"likes":4350,"title":"Summary Ranges","title_slug":"summary-ranges","topic_tags":["Array"],"total_accepted":821470,"total_submissions":1543780,"url":"https://leetcode.com/problems/summary-ranges/"}
{"acceptance_rate":0.4860730267851352,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cstring\u003e fullJustify(vector\u003cstring\u003e\u0026 words, int maxWidth) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public List\u003cString\u003e fullJustify(String[] words, int maxWidth) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public IList\u003cstring\u003e FullJustify(string[] words, int maxWidth) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    \n};","lang":"javascript"},{"code":"function fullJustify(words: string[], maxWidth: number): string[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -\u003e [String] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun fullJustify(words: Array\u003cString\u003e, maxWidth: Int): List\u003cString\u003e {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cString\u003e fullJustify(List\u003cString\u003e words, int maxWidth) {\n    \n  }\n}","lang":"dart"},{"code":"func fullJustify(words []string, maxWidth int) []string {\n    \n}","lang":"golang"},{"code":"# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn full_justify(words: Vec\u003cString\u003e, max_width: i32) -\u003e Vec\u003cString\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (full-justify words maxWidth)\n  (-\u003e (listof string?) exact-integer? (listof string?))\n  )","lang":"racket"},{"code":"-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -\u003e [unicode:unicode_binary()].\nfull_justify(Words, MaxWidth) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\n  def full_justify(words, max_width) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of strings \u003ccode\u003ewords\u003c/code\u003e and a width \u003ccode\u003emaxWidth\u003c/code\u003e, format the text such that each line has exactly \u003ccode\u003emaxWidth\u003c/code\u003e characters and is fully (left and right) justified.\u003c/p\u003e\n\n\u003cp\u003eYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e when necessary so that each line has exactly \u003ccode\u003emaxWidth\u003c/code\u003e characters.\u003c/p\u003e\n\n\u003cp\u003eExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\u003c/p\u003e\n\n\u003cp\u003eFor the last line of text, it should be left-justified, and no extra space is inserted between words.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eA word is defined as a character sequence consisting of non-space characters only.\u003c/li\u003e\n\t\u003cli\u003eEach word\u0026#39;s length is guaranteed to be greater than \u003ccode\u003e0\u003c/code\u003e and not exceed \u003ccode\u003emaxWidth\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eThe input array \u003ccode\u003ewords\u003c/code\u003e contains at least one word.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words = [\u0026quot;This\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;an\u0026quot;, \u0026quot;example\u0026quot;, \u0026quot;of\u0026quot;, \u0026quot;text\u0026quot;, \u0026quot;justification.\u0026quot;], maxWidth = 16\n\u003cstrong\u003eOutput:\u003c/strong\u003e\n[\n\u0026nbsp; \u0026nbsp;\u0026quot;This \u0026nbsp; \u0026nbsp;is \u0026nbsp; \u0026nbsp;an\u0026quot;,\n\u0026nbsp; \u0026nbsp;\u0026quot;example \u0026nbsp;of text\u0026quot;,\n\u0026nbsp; \u0026nbsp;\u0026quot;justification. \u0026nbsp;\u0026quot;\n]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words = [\u0026quot;What\u0026quot;,\u0026quot;must\u0026quot;,\u0026quot;be\u0026quot;,\u0026quot;acknowledgment\u0026quot;,\u0026quot;shall\u0026quot;,\u0026quot;be\u0026quot;], maxWidth = 16\n\u003cstrong\u003eOutput:\u003c/strong\u003e\n[\n\u0026nbsp; \u0026quot;What \u0026nbsp; must \u0026nbsp; be\u0026quot;,\n\u0026nbsp; \u0026quot;acknowledgment \u0026nbsp;\u0026quot;,\n\u0026nbsp; \u0026quot;shall be \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026quot;\n]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Note that the last line is \u0026quot;shall be    \u0026quot; instead of \u0026quot;shall     be\u0026quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e words = [\u0026quot;Science\u0026quot;,\u0026quot;is\u0026quot;,\u0026quot;what\u0026quot;,\u0026quot;we\u0026quot;,\u0026quot;understand\u0026quot;,\u0026quot;well\u0026quot;,\u0026quot;enough\u0026quot;,\u0026quot;to\u0026quot;,\u0026quot;explain\u0026quot;,\u0026quot;to\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;computer.\u0026quot;,\u0026quot;Art\u0026quot;,\u0026quot;is\u0026quot;,\u0026quot;everything\u0026quot;,\u0026quot;else\u0026quot;,\u0026quot;we\u0026quot;,\u0026quot;do\u0026quot;], maxWidth = 20\n\u003cstrong\u003eOutput:\u003c/strong\u003e\n[\n\u0026nbsp; \u0026quot;Science \u0026nbsp;is \u0026nbsp;what we\u0026quot;,\n  \u0026quot;understand \u0026nbsp; \u0026nbsp; \u0026nbsp;well\u0026quot;,\n\u0026nbsp; \u0026quot;enough to explain to\u0026quot;,\n\u0026nbsp; \u0026quot;a \u0026nbsp;computer. \u0026nbsp;Art is\u0026quot;,\n\u0026nbsp; \u0026quot;everything \u0026nbsp;else \u0026nbsp;we\u0026quot;,\n\u0026nbsp; \u0026quot;do \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026quot;\n]\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewords[i]\u003c/code\u003e consists of only English letters and symbols.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= maxWidth \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewords[i].length \u0026lt;= maxWidth\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":5171,"example_test_cases":"[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16\n[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16\n[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20","frontend_id":"68","id":"68","is_paid_only":false,"likes":4254,"title":"Text Justification","title_slug":"text-justification","topic_tags":["Array","String","Simulation"],"total_accepted":562107,"total_submissions":1156425,"url":"https://leetcode.com/problems/text-justification/"}
{"acceptance_rate":0.6480326904112271,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e topKFrequent(vector\u003cint\u003e\u0026 nums, int k) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] TopKFrequent(int[] nums, int k) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    \n};","lang":"javascript"},{"code":"function topKFrequent(nums: number[], k: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topKFrequent($nums, $k) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func topKFrequent(_ nums: [Int], _ k: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun topKFrequent(nums: IntArray, k: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e topKFrequent(List\u003cint\u003e nums, int k) {\n    \n  }\n}","lang":"dart"},{"code":"func topKFrequent(nums []int, k int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef top_k_frequent(nums, k)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn top_k_frequent(nums: Vec\u003ci32\u003e, k: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (top-k-frequent nums k)\n  (-\u003e (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec top_k_frequent(Nums :: [integer()], K :: integer()) -\u003e [integer()].\ntop_k_frequent(Nums, K) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec top_k_frequent(nums :: [integer], k :: integer) :: [integer]\n  def top_k_frequent(nums, k) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003emost frequent elements\u003c/em\u003e. You may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,1,2,2,3], k = 2\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\n\u003c/pre\u003e\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1], k = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e is in the range \u003ccode\u003e[1, the number of unique elements in the array]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eIt is \u003cstrong\u003eguaranteed\u003c/strong\u003e that the answer is \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Your algorithm\u0026#39;s time complexity must be better than \u003ccode\u003eO(n log n)\u003c/code\u003e, where n is the array\u0026#39;s size.\u003c/p\u003e\n","difficulty":"Medium","dislikes":733,"example_test_cases":"[1,1,1,2,2,3]\n2\n[1]\n1","frontend_id":"347","id":"347","is_paid_only":false,"likes":18558,"title":"Top K Frequent Elements","title_slug":"top-k-frequent-elements","topic_tags":["Array","Hash Table","Divide and Conquer","Sorting","Heap (Priority Queue)","Bucket Sort","Counting","Quickselect"],"total_accepted":2991895,"total_submissions":4616889,"url":"https://leetcode.com/problems/top-k-frequent-elements/"}
{"acceptance_rate":0.4325083293669681,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    long long totalCost(vector\u003cint\u003e\u0026 costs, int k, int candidates) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public long totalCost(int[] costs, int k, int candidates) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def totalCost(self, costs, k, candidates):\n        \"\"\"\n        :type costs: List[int]\n        :type k: int\n        :type candidates: int\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -\u003e int:\n        ","lang":"python3"},{"code":"long long totalCost(int* costs, int costsSize, int k, int candidates) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public long TotalCost(int[] costs, int k, int candidates) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} costs\n * @param {number} k\n * @param {number} candidates\n * @return {number}\n */\nvar totalCost = function(costs, k, candidates) {\n    \n};","lang":"javascript"},{"code":"function totalCost(costs: number[], k: number, candidates: number): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $costs\n     * @param Integer $k\n     * @param Integer $candidates\n     * @return Integer\n     */\n    function totalCost($costs, $k, $candidates) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func totalCost(_ costs: [Int], _ k: Int, _ candidates: Int) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun totalCost(costs: IntArray, k: Int, candidates: Int): Long {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int totalCost(List\u003cint\u003e costs, int k, int candidates) {\n    \n  }\n}","lang":"dart"},{"code":"func totalCost(costs []int, k int, candidates int) int64 {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} costs\n# @param {Integer} k\n# @param {Integer} candidates\n# @return {Integer}\ndef total_cost(costs, k, candidates)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def totalCost(costs: Array[Int], k: Int, candidates: Int): Long = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn total_cost(costs: Vec\u003ci32\u003e, k: i32, candidates: i32) -\u003e i64 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (total-cost costs k candidates)\n  (-\u003e (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )","lang":"racket"},{"code":"-spec total_cost(Costs :: [integer()], K :: integer(), Candidates :: integer()) -\u003e integer().\ntotal_cost(Costs, K, Candidates) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec total_cost(costs :: [integer], k :: integer, candidates :: integer) :: integer\n  def total_cost(costs, k, candidates) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003ecosts\u003c/code\u003e where \u003ccode\u003ecosts[i]\u003c/code\u003e is the cost of hiring the \u003ccode\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e worker.\u003c/p\u003e\n\n\u003cp\u003eYou are also given two integers \u003ccode\u003ek\u003c/code\u003e and \u003ccode\u003ecandidates\u003c/code\u003e. We want to hire exactly \u003ccode\u003ek\u003c/code\u003e workers according to the following rules:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eYou will run \u003ccode\u003ek\u003c/code\u003e sessions and hire exactly one worker in each session.\u003c/li\u003e\n\t\u003cli\u003eIn each hiring session, choose the worker with the lowest cost from either the first \u003ccode\u003ecandidates\u003c/code\u003e workers or the last \u003ccode\u003ecandidates\u003c/code\u003e workers. Break the tie by the smallest index.\n\t\u003cul\u003e\n\t\t\u003cli\u003eFor example, if \u003ccode\u003ecosts = [3,2,7,7,1,2]\u003c/code\u003e and \u003ccode\u003ecandidates = 2\u003c/code\u003e, then in the first hiring session, we will choose the \u003ccode\u003e4\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e worker because they have the lowest cost \u003ccode\u003e[\u003cu\u003e3,2\u003c/u\u003e,7,7,\u003cu\u003e\u003cstrong\u003e1\u003c/strong\u003e,2\u003c/u\u003e]\u003c/code\u003e.\u003c/li\u003e\n\t\t\u003cli\u003eIn the second hiring session, we will choose \u003ccode\u003e1\u003csup\u003est\u003c/sup\u003e\u003c/code\u003e worker because they have the same lowest cost as \u003ccode\u003e4\u003csup\u003eth\u003c/sup\u003e\u003c/code\u003e worker but they have the smallest index \u003ccode\u003e[\u003cu\u003e3,\u003cstrong\u003e2\u003c/strong\u003e\u003c/u\u003e,7,\u003cu\u003e7,2\u003c/u\u003e]\u003c/code\u003e. Please note that the indexing may be changed in the process.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eIf there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\u003c/li\u003e\n\t\u003cli\u003eA worker can only be chosen once.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReturn \u003cem\u003ethe total cost to hire exactly \u003c/em\u003e\u003ccode\u003ek\u003c/code\u003e\u003cem\u003e workers.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e 11\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [\u003cu\u003e17,12,10,2\u003c/u\u003e,7,\u003cu\u003e2,11,20,8\u003c/u\u003e]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [\u003cu\u003e17,12,10,7\u003c/u\u003e,\u003cu\u003e2,11,20,8\u003c/u\u003e]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [\u003cu\u003e17,12,10,7,11,20,8\u003c/u\u003e]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e costs = [1,2,4,1], k = 3, candidates = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [\u003cu\u003e1,2,4,1\u003c/u\u003e]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [\u003cu\u003e2,4,1\u003c/u\u003e]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [\u003cu\u003e2,4\u003c/u\u003e]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= costs.length \u0026lt;= 10\u003csup\u003e5 \u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= costs[i] \u0026lt;= 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= k, candidates \u0026lt;= costs.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":714,"example_test_cases":"[17,12,10,2,7,2,11,20,8]\n3\n4\n[1,2,4,1]\n3\n3","frontend_id":"2462","id":"2553","is_paid_only":false,"likes":2020,"title":"Total Cost to Hire K Workers","title_slug":"total-cost-to-hire-k-workers","topic_tags":["Array","Two Pointers","Heap (Priority Queue)","Simulation"],"total_accepted":145392,"total_submissions":336160,"url":"https://leetcode.com/problems/total-cost-to-hire-k-workers/"}
{"acceptance_rate":0.5944328684235519,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int minimumTotal(vector\u003cvector\u003cint\u003e\u003e\u0026 triangle) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int minimumTotal(List\u003cList\u003cInteger\u003e\u003e triangle) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -\u003e int:\n        ","lang":"python3"},{"code":"int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int MinimumTotal(IList\u003cIList\u003cint\u003e\u003e triangle) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n    \n};","lang":"javascript"},{"code":"function minimumTotal(triangle: number[][]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[][] $triangle\n     * @return Integer\n     */\n    function minimumTotal($triangle) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun minimumTotal(triangle: List\u003cList\u003cInt\u003e\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int minimumTotal(List\u003cList\u003cint\u003e\u003e triangle) {\n    \n  }\n}","lang":"dart"},{"code":"func minimumTotal(triangle [][]int) int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn minimum_total(triangle: Vec\u003cVec\u003ci32\u003e\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (minimum-total triangle)\n  (-\u003e (listof (listof exact-integer?)) exact-integer?)\n  )","lang":"racket"},{"code":"-spec minimum_total(Triangle :: [[integer()]]) -\u003e integer().\nminimum_total(Triangle) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec minimum_total(triangle :: [[integer]]) :: integer\n  def minimum_total(triangle) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a \u003ccode\u003etriangle\u003c/code\u003e array, return \u003cem\u003ethe minimum path sum from top to bottom\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor each step, you may move to an adjacent number of the row below. More formally, if you are on index \u003ccode\u003ei\u003c/code\u003e on the current row, you may move to either index \u003ccode\u003ei\u003c/code\u003e or index \u003ccode\u003ei + 1\u003c/code\u003e on the next row.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 11\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The triangle looks like:\n   \u003cu\u003e2\u003c/u\u003e\n  \u003cu\u003e3\u003c/u\u003e 4\n 6 \u003cu\u003e5\u003c/u\u003e 7\n4 \u003cu\u003e1\u003c/u\u003e 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e triangle = [[-10]]\n\u003cstrong\u003eOutput:\u003c/strong\u003e -10\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= triangle.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003etriangle[0].length == 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003etriangle[i].length == triangle[i - 1].length + 1\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e4\u003c/sup\u003e \u0026lt;= triangle[i][j] \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow up:\u003c/strong\u003e Could you\u0026nbsp;do this using only \u003ccode\u003eO(n)\u003c/code\u003e extra space, where \u003ccode\u003en\u003c/code\u003e is the total number of rows in the triangle?","difficulty":"Medium","dislikes":580,"example_test_cases":"[[2],[3,4],[6,5,7],[4,1,8,3]]\n[[-10]]","frontend_id":"120","id":"120","is_paid_only":false,"likes":10157,"title":"Triangle","title_slug":"triangle","topic_tags":["Array","Dynamic Programming"],"total_accepted":1038989,"total_submissions":1747866,"url":"https://leetcode.com/problems/triangle/"}
{"acceptance_rate":0.6365394092148917,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 numbers, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def twoSum(self, numbers: List[int], target: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] TwoSum(int[] numbers, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    \n};","lang":"javascript"},{"code":"function twoSum(numbers: number[], target: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $numbers\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($numbers, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func twoSum(_ numbers: [Int], _ target: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e twoSum(List\u003cint\u003e numbers, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func twoSum(numbers []int, target int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} numbers\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(numbers, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def twoSum(numbers: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn two_sum(numbers: Vec\u003ci32\u003e, target: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (two-sum numbers target)\n  (-\u003e (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec two_sum(Numbers :: [integer()], Target :: integer()) -\u003e [integer()].\ntwo_sum(Numbers, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec two_sum(numbers :: [integer], target :: integer) :: [integer]\n  def two_sum(numbers, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a \u003cstrong\u003e1-indexed\u003c/strong\u003e array of integers \u003ccode\u003enumbers\u003c/code\u003e that is already \u003cstrong\u003e\u003cem\u003esorted in non-decreasing order\u003c/em\u003e\u003c/strong\u003e, find two numbers such that they add up to a specific \u003ccode\u003etarget\u003c/code\u003e number. Let these two numbers be \u003ccode\u003enumbers[index\u003csub\u003e1\u003c/sub\u003e]\u003c/code\u003e and \u003ccode\u003enumbers[index\u003csub\u003e2\u003c/sub\u003e]\u003c/code\u003e where \u003ccode\u003e1 \u0026lt;= index\u003csub\u003e1\u003c/sub\u003e \u0026lt; index\u003csub\u003e2\u003c/sub\u003e \u0026lt;= numbers.length\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eReturn\u003cem\u003e the indices of the two numbers, \u003c/em\u003e\u003ccode\u003eindex\u003csub\u003e1\u003c/sub\u003e\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003eindex\u003csub\u003e2\u003c/sub\u003e\u003c/code\u003e\u003cem\u003e, \u003cstrong\u003eadded by one\u003c/strong\u003e as an integer array \u003c/em\u003e\u003ccode\u003e[index\u003csub\u003e1\u003c/sub\u003e, index\u003csub\u003e2\u003c/sub\u003e]\u003c/code\u003e\u003cem\u003e of length 2.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe tests are generated such that there is \u003cstrong\u003eexactly one solution\u003c/strong\u003e. You \u003cstrong\u003emay not\u003c/strong\u003e use the same element twice.\u003c/p\u003e\n\n\u003cp\u003eYour solution must use only constant extra space.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numbers = [\u003cu\u003e2\u003c/u\u003e,\u003cu\u003e7\u003c/u\u003e,11,15], target = 9\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum of 2 and 7 is 9. Therefore, index\u003csub\u003e1\u003c/sub\u003e = 1, index\u003csub\u003e2\u003c/sub\u003e = 2. We return [1, 2].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numbers = [\u003cu\u003e2\u003c/u\u003e,3,\u003cu\u003e4\u003c/u\u003e], target = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,3]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum of 2 and 4 is 6. Therefore index\u003csub\u003e1\u003c/sub\u003e = 1, index\u003csub\u003e2\u003c/sub\u003e = 3. We return [1, 3].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e numbers = [\u003cu\u003e-1\u003c/u\u003e,\u003cu\u003e0\u003c/u\u003e], target = -1\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum of -1 and 0 is -1. Therefore index\u003csub\u003e1\u003c/sub\u003e = 1, index\u003csub\u003e2\u003c/sub\u003e = 2. We return [1, 2].\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= numbers.length \u0026lt;= 3 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= numbers[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enumbers\u003c/code\u003e is sorted in \u003cstrong\u003enon-decreasing order\u003c/strong\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= target \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eThe tests are generated such that there is \u003cstrong\u003eexactly one solution\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":1484,"example_test_cases":"[2,7,11,15]\n9\n[2,3,4]\n6\n[-1,0]\n-1","frontend_id":"167","id":"167","is_paid_only":false,"likes":12721,"title":"Two Sum II - Input Array Is Sorted","title_slug":"two-sum-ii-input-array-is-sorted","topic_tags":["Array","Two Pointers","Binary Search"],"total_accepted":2839158,"total_submissions":4460302,"url":"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"}
{"acceptance_rate":0.5607335232470193,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def twoSum(self, nums: List[int], target: int) -\u003e List[int]:\n        ","lang":"python3"},{"code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};","lang":"javascript"},{"code":"function twoSum(nums: number[], target: number): number[] {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -\u003e [Int] {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  List\u003cint\u003e twoSum(List\u003cint\u003e nums, int target) {\n    \n  }\n}","lang":"dart"},{"code":"func twoSum(nums []int, target int) []int {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn two_sum(nums: Vec\u003ci32\u003e, target: i32) -\u003e Vec\u003ci32\u003e {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (two-sum nums target)\n  (-\u003e (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )","lang":"racket"},{"code":"-spec two_sum(Nums :: [integer()], Target :: integer()) -\u003e [integer()].\ntwo_sum(Nums, Target) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e\u0026nbsp;and an integer \u003ccode\u003etarget\u003c/code\u003e, return \u003cem\u003eindices of the two numbers such that they add up to \u003ccode\u003etarget\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may assume that each input would have \u003cstrong\u003e\u003cem\u003eexactly\u003c/em\u003e one solution\u003c/strong\u003e, and you may not use the \u003cem\u003esame\u003c/em\u003e element twice.\u003c/p\u003e\n\n\u003cp\u003eYou can return the answer in any order.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,7,11,15], target = 9\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1]\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Because nums[0] + nums[1] == 9, we return [0, 1].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,2,4], target = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3,3], target = 6\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= nums.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= nums[i] \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10\u003csup\u003e9\u003c/sup\u003e \u0026lt;= target \u0026lt;= 10\u003csup\u003e9\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eOnly one valid answer exists.\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cstrong\u003eFollow-up:\u0026nbsp;\u003c/strong\u003eCan you come up with an algorithm that is less than \u003ccode\u003eO(n\u003csup\u003e2\u003c/sup\u003e)\u003c/code\u003e\u003cfont face=\"monospace\"\u003e\u0026nbsp;\u003c/font\u003etime complexity?","difficulty":"Easy","dislikes":2303,"example_test_cases":"[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6","frontend_id":"1","id":"1","is_paid_only":false,"likes":63328,"title":"Two Sum","title_slug":"two-sum","topic_tags":["Array","Hash Table"],"total_accepted":18243145,"total_submissions":32534429,"url":"https://leetcode.com/problems/two-sum/"}
{"acceptance_rate":0.7838120762651257,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool uniqueOccurrences(vector\u003cint\u003e\u0026 arr) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean uniqueOccurrences(int[] arr) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def uniqueOccurrences(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool uniqueOccurrences(int* arr, int arrSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool UniqueOccurrences(int[] arr) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    \n};","lang":"javascript"},{"code":"function uniqueOccurrences(arr: number[]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function uniqueOccurrences($arr) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func uniqueOccurrences(_ arr: [Int]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun uniqueOccurrences(arr: IntArray): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool uniqueOccurrences(List\u003cint\u003e arr) {\n    \n  }\n}","lang":"dart"},{"code":"func uniqueOccurrences(arr []int) bool {\n    \n}","lang":"golang"},{"code":"# @param {Integer[]} arr\n# @return {Boolean}\ndef unique_occurrences(arr)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def uniqueOccurrences(arr: Array[Int]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn unique_occurrences(arr: Vec\u003ci32\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (unique-occurrences arr)\n  (-\u003e (listof exact-integer?) boolean?)\n  )","lang":"racket"},{"code":"-spec unique_occurrences(Arr :: [integer()]) -\u003e boolean().\nunique_occurrences(Arr) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec unique_occurrences(arr :: [integer]) :: boolean\n  def unique_occurrences(arr) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven an array of integers \u003ccode\u003earr\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif the number of occurrences of each value in the array is \u003cstrong\u003eunique\u003c/strong\u003e or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr = [1,2,2,1,1,3]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr = [1,2]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e arr = [-3,0,1,-3,1,1,1,-3,10,0]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= arr.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= arr[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":153,"example_test_cases":"[1,2,2,1,1,3]\n[1,2]\n[-3,0,1,-3,1,1,1,-3,10,0]","frontend_id":"1207","id":"1319","is_paid_only":false,"likes":5389,"title":"Unique Number of Occurrences","title_slug":"unique-number-of-occurrences","topic_tags":["Array","Hash Table"],"total_accepted":876791,"total_submissions":1118624,"url":"https://leetcode.com/problems/unique-number-of-occurrences/"}
{"acceptance_rate":0.6694022513552611,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isAnagram(String s, String t) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isAnagram(self, s: str, t: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isAnagram(char* s, char* t) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsAnagram(string s, string t) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    \n};","lang":"javascript"},{"code":"function isAnagram(s: string, t: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isAnagram($s, $t) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isAnagram(_ s: String, _ t: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isAnagram(s: String, t: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isAnagram(String s, String t) {\n    \n  }\n}","lang":"dart"},{"code":"func isAnagram(s string, t string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_anagram(s, t)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isAnagram(s: String, t: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_anagram(s: String, t: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-anagram s t)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec is_anagram(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -\u003e boolean().\nis_anagram(S, T) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_anagram(s :: String.t, t :: String.t) :: boolean\n  def is_anagram(s, t) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003et\u003c/code\u003e is an \u003cspan data-keyword=\"anagram\"\u003eanagram\u003c/span\u003e of \u003ccode\u003es\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;anagram\u0026quot;, t = \u0026quot;nagaram\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;rat\u0026quot;, t = \u0026quot;car\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length, t.length \u0026lt;= 5 * 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\u003c/p\u003e\n","difficulty":"Easy","dislikes":446,"example_test_cases":"\"anagram\"\n\"nagaram\"\n\"rat\"\n\"car\"","frontend_id":"242","id":"242","is_paid_only":false,"likes":13336,"title":"Valid Anagram","title_slug":"valid-anagram","topic_tags":["Hash Table","String","Sorting"],"total_accepted":5070301,"total_submissions":7574371,"url":"https://leetcode.com/problems/valid-anagram/"}
{"acceptance_rate":0.5140205586367431,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isPalindrome(self, s: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isPalindrome(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsPalindrome(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};","lang":"javascript"},{"code":"function isPalindrome(s: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isPalindrome(_ s: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isPalindrome(s: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isPalindrome(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func isPalindrome(s string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_palindrome(s: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-palindrome s)\n  (-\u003e string? boolean?)\n  )","lang":"racket"},{"code":"-spec is_palindrome(S :: unicode:unicode_binary()) -\u003e boolean().\nis_palindrome(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eA phrase is a \u003cstrong\u003epalindrome\u003c/strong\u003e if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\u003c/p\u003e\n\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e\u003cem\u003e if it is a \u003cstrong\u003epalindrome\u003c/strong\u003e, or \u003c/em\u003e\u003ccode\u003efalse\u003c/code\u003e\u003cem\u003e otherwise\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;A man, a plan, a canal: Panama\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;amanaplanacanalpanama\u0026quot; is a palindrome.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;race a car\u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;raceacar\u0026quot; is not a palindrome.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot; \u0026quot;\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e s is an empty string \u0026quot;\u0026quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 2 * 10\u003csup\u003e5\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists only of printable ASCII characters.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":8570,"example_test_cases":"\"A man, a plan, a canal: Panama\"\n\"race a car\"\n\" \"","frontend_id":"125","id":"125","is_paid_only":false,"likes":10639,"title":"Valid Palindrome","title_slug":"valid-palindrome","topic_tags":["Two Pointers","String"],"total_accepted":4487327,"total_submissions":8729859,"url":"https://leetcode.com/problems/valid-palindrome/"}
{"acceptance_rate":0.4260973882695519,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool isValid(char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};","lang":"javascript"},{"code":"function isValid(s: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func isValid(_ s: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool isValid(String s) {\n    \n  }\n}","lang":"dart"},{"code":"func isValid(s string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn is_valid(s: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (is-valid s)\n  (-\u003e string? boolean?)\n  )","lang":"racket"},{"code":"-spec is_valid(S :: unicode:unicode_binary()) -\u003e boolean().\nis_valid(S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e containing just the characters \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;{\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;}\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;[\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;]\u0026#39;\u003c/code\u003e, determine if the input string is valid.\u003c/p\u003e\n\n\u003cp\u003eAn input string is valid if:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eOpen brackets must be closed by the same type of brackets.\u003c/li\u003e\n\t\u003cli\u003eOpen brackets must be closed in the correct order.\u003c/li\u003e\n\t\u003cli\u003eEvery close bracket has a corresponding open bracket of the same type.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;()\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;()[]{}\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;(]\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;([])\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003es = \u0026quot;([)]\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 10\u003csup\u003e4\u003c/sup\u003e\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of parentheses only \u003ccode\u003e\u0026#39;()[]{}\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1921,"example_test_cases":"\"()\"\n\"()[]{}\"\n\"(]\"\n\"([])\"\n\"([)]\"","frontend_id":"20","id":"20","is_paid_only":false,"likes":26276,"title":"Valid Parentheses","title_slug":"valid-parentheses","topic_tags":["String","Stack"],"total_accepted":6375561,"total_submissions":14962685,"url":"https://leetcode.com/problems/valid-parentheses/"}
{"acceptance_rate":0.48458143164619744,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool wordBreak(string s, vector\u003cstring\u003e\u0026 wordDict) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean wordBreak(String s, List\u003cString\u003e wordDict) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        ","lang":"python3"},{"code":"bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool WordBreak(string s, IList\u003cstring\u003e wordDict) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};","lang":"javascript"},{"code":"function wordBreak(s: string, wordDict: string[]): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return Boolean\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun wordBreak(s: String, wordDict: List\u003cString\u003e): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool wordBreak(String s, List\u003cString\u003e wordDict) {\n    \n  }\n}","lang":"dart"},{"code":"func wordBreak(s string, wordDict []string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {String[]} word_dict\n# @return {Boolean}\ndef word_break(s, word_dict)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn word_break(s: String, word_dict: Vec\u003cString\u003e) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (word-break s wordDict)\n  (-\u003e string? (listof string?) boolean?)\n  )","lang":"racket"},{"code":"-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -\u003e boolean().\nword_break(S, WordDict) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\n  def word_break(s, word_dict) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e and a dictionary of strings \u003ccode\u003ewordDict\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003es\u003c/code\u003e can be segmented into a space-separated sequence of one or more dictionary words.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the same word in the dictionary may be reused multiple times in the segmentation.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;leetcode\u0026quot;, wordDict = [\u0026quot;leet\u0026quot;,\u0026quot;code\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Return true because \u0026quot;leetcode\u0026quot; can be segmented as \u0026quot;leet code\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;applepenapple\u0026quot;, wordDict = [\u0026quot;apple\u0026quot;,\u0026quot;pen\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Return true because \u0026quot;applepenapple\u0026quot; can be segmented as \u0026quot;apple pen apple\u0026quot;.\nNote that you are allowed to reuse a dictionary word.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;catsandog\u0026quot;, wordDict = [\u0026quot;cats\u0026quot;,\u0026quot;dog\u0026quot;,\u0026quot;sand\u0026quot;,\u0026quot;and\u0026quot;,\u0026quot;cat\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordDict.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordDict[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ewordDict[i]\u003c/code\u003e consist of only lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003eAll the strings of \u003ccode\u003ewordDict\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":869,"example_test_cases":"\"leetcode\"\n[\"leet\",\"code\"]\n\"applepenapple\"\n[\"apple\",\"pen\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]","frontend_id":"139","id":"139","is_paid_only":false,"likes":18162,"title":"Word Break","title_slug":"word-break","topic_tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"],"total_accepted":2129842,"total_submissions":4395220,"url":"https://leetcode.com/problems/word-break/"}
{"acceptance_rate":0.4334479057348438,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector\u003cstring\u003e\u0026 wordList) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List\u003cString\u003e wordList) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -\u003e int:\n        ","lang":"python3"},{"code":"int ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public int LadderLength(string beginWord, string endWord, IList\u003cstring\u003e wordList) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nvar ladderLength = function(beginWord, endWord, wordList) {\n    \n};","lang":"javascript"},{"code":"function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $beginWord\n     * @param String $endWord\n     * @param String[] $wordList\n     * @return Integer\n     */\n    function ladderLength($beginWord, $endWord, $wordList) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -\u003e Int {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun ladderLength(beginWord: String, endWord: String, wordList: List\u003cString\u003e): Int {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  int ladderLength(String beginWord, String endWord, List\u003cString\u003e wordList) {\n    \n  }\n}","lang":"dart"},{"code":"func ladderLength(beginWord string, endWord string, wordList []string) int {\n    \n}","lang":"golang"},{"code":"# @param {String} begin_word\n# @param {String} end_word\n# @param {String[]} word_list\n# @return {Integer}\ndef ladder_length(begin_word, end_word, word_list)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn ladder_length(begin_word: String, end_word: String, word_list: Vec\u003cString\u003e) -\u003e i32 {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (ladder-length beginWord endWord wordList)\n  (-\u003e string? string? (listof string?) exact-integer?)\n  )","lang":"racket"},{"code":"-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -\u003e integer().\nladder_length(BeginWord, EndWord, WordList) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\n  def ladder_length(begin_word, end_word, word_list) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eA \u003cstrong\u003etransformation sequence\u003c/strong\u003e from word \u003ccode\u003ebeginWord\u003c/code\u003e to word \u003ccode\u003eendWord\u003c/code\u003e using a dictionary \u003ccode\u003ewordList\u003c/code\u003e is a sequence of words \u003ccode\u003ebeginWord -\u0026gt; s\u003csub\u003e1\u003c/sub\u003e -\u0026gt; s\u003csub\u003e2\u003c/sub\u003e -\u0026gt; ... -\u0026gt; s\u003csub\u003ek\u003c/sub\u003e\u003c/code\u003e such that:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEvery adjacent pair of words differs by a single letter.\u003c/li\u003e\n\t\u003cli\u003eEvery \u003ccode\u003es\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e for \u003ccode\u003e1 \u0026lt;= i \u0026lt;= k\u003c/code\u003e is in \u003ccode\u003ewordList\u003c/code\u003e. Note that \u003ccode\u003ebeginWord\u003c/code\u003e does not need to be in \u003ccode\u003ewordList\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003csub\u003ek\u003c/sub\u003e == endWord\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eGiven two words, \u003ccode\u003ebeginWord\u003c/code\u003e and \u003ccode\u003eendWord\u003c/code\u003e, and a dictionary \u003ccode\u003ewordList\u003c/code\u003e, return \u003cem\u003ethe \u003cstrong\u003enumber of words\u003c/strong\u003e in the \u003cstrong\u003eshortest transformation sequence\u003c/strong\u003e from\u003c/em\u003e \u003ccode\u003ebeginWord\u003c/code\u003e \u003cem\u003eto\u003c/em\u003e \u003ccode\u003eendWord\u003c/code\u003e\u003cem\u003e, or \u003c/em\u003e\u003ccode\u003e0\u003c/code\u003e\u003cem\u003e if no such sequence exists.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e beginWord = \u0026quot;hit\u0026quot;, endWord = \u0026quot;cog\u0026quot;, wordList = [\u0026quot;hot\u0026quot;,\u0026quot;dot\u0026quot;,\u0026quot;dog\u0026quot;,\u0026quot;lot\u0026quot;,\u0026quot;log\u0026quot;,\u0026quot;cog\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\n\u003cstrong\u003eExplanation:\u003c/strong\u003e One shortest transformation sequence is \u0026quot;hit\u0026quot; -\u0026gt; \u0026quot;hot\u0026quot; -\u0026gt; \u0026quot;dot\u0026quot; -\u0026gt; \u0026quot;dog\u0026quot; -\u0026gt; cog\u0026quot;, which is 5 words long.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e beginWord = \u0026quot;hit\u0026quot;, endWord = \u0026quot;cog\u0026quot;, wordList = [\u0026quot;hot\u0026quot;,\u0026quot;dot\u0026quot;,\u0026quot;dog\u0026quot;,\u0026quot;lot\u0026quot;,\u0026quot;log\u0026quot;]\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The endWord \u0026quot;cog\u0026quot; is not in wordList, therefore there is no valid transformation sequence.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= beginWord.length \u0026lt;= 10\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eendWord.length == beginWord.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordList.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewordList[i].length == beginWord.length\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ebeginWord\u003c/code\u003e, \u003ccode\u003eendWord\u003c/code\u003e, and \u003ccode\u003ewordList[i]\u003c/code\u003e consist of lowercase English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ebeginWord != endWord\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003eAll the words in \u003ccode\u003ewordList\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Hard","dislikes":1941,"example_test_cases":"\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","frontend_id":"127","id":"127","is_paid_only":false,"likes":12959,"title":"Word Ladder","title_slug":"word-ladder","topic_tags":["Hash Table","String","Breadth-First Search"],"total_accepted":1413774,"total_submissions":3261693,"url":"https://leetcode.com/problems/word-ladder/"}
{"acceptance_rate":0.4322248974211791,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        ","lang":"python3"},{"code":"bool wordPattern(char* pattern, char* s) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};","lang":"javascript"},{"code":"function wordPattern(pattern: string, s: string): boolean {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -\u003e Bool {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  bool wordPattern(String pattern, String s) {\n    \n  }\n}","lang":"dart"},{"code":"func wordPattern(pattern string, s string) bool {\n    \n}","lang":"golang"},{"code":"# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -\u003e bool {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (word-pattern pattern s)\n  (-\u003e string? string? boolean?)\n  )","lang":"racket"},{"code":"-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -\u003e boolean().\nword_pattern(Pattern, S) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern(pattern, s) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eGiven a \u003ccode\u003epattern\u003c/code\u003e and a string \u003ccode\u003es\u003c/code\u003e, find if \u003ccode\u003es\u003c/code\u003e\u0026nbsp;follows the same pattern.\u003c/p\u003e\n\n\u003cp\u003eHere \u003cb\u003efollow\u003c/b\u003e means a full match, such that there is a bijection between a letter in \u003ccode\u003epattern\u003c/code\u003e and a \u003cb\u003enon-empty\u003c/b\u003e word in \u003ccode\u003es\u003c/code\u003e. Specifically:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEach letter in \u003ccode\u003epattern\u003c/code\u003e maps to \u003cstrong\u003eexactly\u003c/strong\u003e one unique word in \u003ccode\u003es\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eEach unique word in \u003ccode\u003es\u003c/code\u003e maps to \u003cstrong\u003eexactly\u003c/strong\u003e one letter in \u003ccode\u003epattern\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003eNo two letters map to the same word, and no two words map to the same letter.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epattern = \u0026quot;abba\u0026quot;, s = \u0026quot;dog cat cat dog\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003etrue\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe bijection can be established as:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e maps to \u003ccode\u003e\u0026quot;dog\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e maps to \u003ccode\u003e\u0026quot;cat\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epattern = \u0026quot;abba\u0026quot;, s = \u0026quot;dog cat cat fish\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"example-block\"\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003epattern = \u0026quot;aaaa\u0026quot;, s = \u0026quot;dog cat cat dog\u0026quot;\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003cspan class=\"example-io\"\u003efalse\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pattern.length \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epattern\u003c/code\u003e contains only lower-case English letters.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 3000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e contains only lowercase English letters and spaces \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e \u003cstrong\u003edoes not contain\u003c/strong\u003e any leading or trailing spaces.\u003c/li\u003e\n\t\u003cli\u003eAll the words in \u003ccode\u003es\u003c/code\u003e are separated by a \u003cstrong\u003esingle space\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Easy","dislikes":1108,"example_test_cases":"\"abba\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog cat cat fish\"\n\"aaaa\"\n\"dog cat cat dog\"","frontend_id":"290","id":"290","is_paid_only":false,"likes":7720,"title":"Word Pattern","title_slug":"word-pattern","topic_tags":["Hash Table","String"],"total_accepted":975867,"total_submissions":2257776,"url":"https://leetcode.com/problems/word-pattern/"}
{"acceptance_rate":0.5201257414151084,"category":"Algorithms","code_snippets":[{"code":"class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};","lang":"cpp"},{"code":"class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}","lang":"java"},{"code":"class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        ","lang":"python"},{"code":"class Solution:\n    def convert(self, s: str, numRows: int) -\u003e str:\n        ","lang":"python3"},{"code":"char* convert(char* s, int numRows) {\n    \n}","lang":"c"},{"code":"public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}","lang":"csharp"},{"code":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};","lang":"javascript"},{"code":"function convert(s: string, numRows: number): string {\n    \n};","lang":"typescript"},{"code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}","lang":"php"},{"code":"class Solution {\n    func convert(_ s: String, _ numRows: Int) -\u003e String {\n        \n    }\n}","lang":"swift"},{"code":"class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}","lang":"kotlin"},{"code":"class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}","lang":"dart"},{"code":"func convert(s string, numRows int) string {\n    \n}","lang":"golang"},{"code":"# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend","lang":"ruby"},{"code":"object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}","lang":"scala"},{"code":"impl Solution {\n    pub fn convert(s: String, num_rows: i32) -\u003e String {\n        \n    }\n}","lang":"rust"},{"code":"(define/contract (convert s numRows)\n  (-\u003e string? exact-integer? string?)\n  )","lang":"racket"},{"code":"-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -\u003e unicode:unicode_binary().\nconvert(S, NumRows) -\u003e\n  .","lang":"erlang"},{"code":"defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend","lang":"elixir"}],"content":"\u003cp\u003eThe string \u003ccode\u003e\u0026quot;PAYPALISHIRING\u0026quot;\u003c/code\u003e is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\u003c/p\u003e\n\n\u003cpre\u003e\nP   A   H   N\nA P L S I I G\nY   I   R\n\u003c/pre\u003e\n\n\u003cp\u003eAnd then read line by line: \u003ccode\u003e\u0026quot;PAHNAPLSIIGYIR\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWrite the code that will take a string and make this conversion given a number of rows:\u003c/p\u003e\n\n\u003cpre\u003e\nstring convert(string s, int numRows);\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;PAYPALISHIRING\u0026quot;, numRows = 3\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;PAHNAPLSIIGYIR\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;PAYPALISHIRING\u0026quot;, numRows = 4\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;PINALSIGYAHRPI\u0026quot;\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong class=\"example\"\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;A\u0026quot;, numRows = 1\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;A\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of English letters (lower-case and upper-case), \u003ccode\u003e\u0026#39;,\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= numRows \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","difficulty":"Medium","dislikes":15512,"example_test_cases":"\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1","frontend_id":"6","id":"6","is_paid_only":false,"likes":8686,"title":"Zigzag Conversion","title_slug":"zigzag-conversion","topic_tags":["String"],"total_accepted":1849499,"total_submissions":3555869,"url":"https://leetcode.com/problems/zigzag-conversion/"}
