{"Question":{"Data":{"Question":{"questionFrontendId":"238","questionId":"238","Content":"<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The input is generated such that <code>answer[i]</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n","SampleTestCase":"[1,2,3,4]","ExampleTestcases":"[1,2,3,4]\n[-1,1,0,-3,3]","Difficulty":"Medium","Title":"Product of Array Except Self","TitleSlug":"product-of-array-except-self","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.8M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 3765849, \"totalSubmissionRaw\": 5548330, \"acRate\": \"67.9%\"}","Likes":24414,"Dislikes":1582,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjYxMDY4","Name":"Prefix Sum","Slug":"prefix-sum"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function productExceptSelf(nums: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> productExceptSelf(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func productExceptSelf(nums []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (product-except-self nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec product_except_self(Nums :: [integer()]) -> [integer()].\nproduct_except_self(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec product_except_self(nums :: [integer]) :: [integer]\n  def product_except_self(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:55:30.443191838+02:00","AcRate":"67.9","TotalSubmissions":5548330,"TotalAccepted":3765849,"AcceptanceRate":0.6787355834998999,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/product-of-array-except-self/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n \nExample 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\nExample 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n \nConstraints:\n\t2 <= nums.length <= 10^5\n\t-30 <= nums[i] <= 30\n\tThe input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.\n \nFollow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        answer = [0] * length\n        \n        # Step 1: Compute the prefix products\n        prefix_product = 1\n        for i in range(length):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Step 2: Compute the suffix products and the final result\n        suffix_product = 1\n        for i in range(length - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        answer = [0] * length\n        \n        # Step 1: Compute the prefix products\n        prefix_product = 1\n        for i in range(length):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Step 2: Compute the suffix products and the final result\n        suffix_product = 1\n        for i in range(length - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n","Model":"gpt-4o-2024-08-06","Latency":1702093234,"SolvedAt":"2025-07-18T15:10:56.108187904+02:00","PromptTokens":426,"OutputTokens":143}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"238","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        answer = [0] * length\n        \n        # Step 1: Compute the prefix products\n        prefix_product = 1\n        for i in range(length):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Step 2: Compute the suffix products and the final result\n        suffix_product = 1\n        for i in range(length - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n"},"SubmissionId":1725401781,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:34:11.722973838+02:00"}}}
