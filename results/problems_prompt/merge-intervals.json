{"Question":{"Data":{"Question":{"questionFrontendId":"56","questionId":"56","Content":"<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[[1,3],[2,6],[8,10],[15,18]]","ExampleTestcases":"[[1,3],[2,6],[8,10],[15,18]]\n[[1,4],[4,5]]","Difficulty":"Medium","Title":"Merge Intervals","TitleSlug":"merge-intervals","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.3M\", \"totalSubmission\": \"6.7M\", \"totalAcceptedRaw\": 3306949, \"totalSubmissionRaw\": 6671727, \"acRate\": \"49.6%\"}","Likes":23584,"Dislikes":854,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[][] Merge(int[][] intervals) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function merge(intervals: number[][]): number[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<int>> merge(List<List<int>> intervals) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func merge(intervals [][]int) [][]int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (merge intervals)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\nmerge(Intervals) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\n  def merge(intervals) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:53:51.623837139+02:00","AcRate":"49.6","TotalSubmissions":6671727,"TotalAccepted":3306949,"AcceptanceRate":0.4956661146356858,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/merge-intervals/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n \nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\nExample 2:\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n \nConstraints:\n\t1 <= intervals.length <= 10^4\n\tintervals[i].length == 2\n\t0 <= starti <= endi <= 10^4\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return []\n        \n        # Sort the intervals by starting time\n        intervals.sort(key=lambda x: x[0])\n        \n        merged_intervals = [intervals[0]]\n        \n        for current in intervals[1:]:\n            prev = merged_intervals[-1]\n            if current[0] <= prev[1]:\n                # If current interval overlaps with the previous one, merge them\n                prev[1] = max(prev[1], current[1])\n            else:\n                # Otherwise, add the current interval to the list\n                merged_intervals.append(current)\n        \n        return merged_intervals\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return []\n        \n        # Sort the intervals by starting time\n        intervals.sort(key=lambda x: x[0])\n        \n        merged_intervals = [intervals[0]]\n        \n        for current in intervals[1:]:\n            prev = merged_intervals[-1]\n            if current[0] <= prev[1]:\n                # If current interval overlaps with the previous one, merge them\n                prev[1] = max(prev[1], current[1])\n            else:\n                # Otherwise, add the current interval to the list\n                merged_intervals.append(current)\n        \n        return merged_intervals\n","Model":"gpt-4o-2024-08-06","Latency":2263395044,"SolvedAt":"2025-07-18T15:09:52.773816546+02:00","PromptTokens":402,"OutputTokens":158}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"56","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return []\n        \n        # Sort the intervals by starting time\n        intervals.sort(key=lambda x: x[0])\n        \n        merged_intervals = [intervals[0]]\n        \n        for current in intervals[1:]:\n            prev = merged_intervals[-1]\n            if current[0] <= prev[1]:\n                # If current interval overlaps with the previous one, merge them\n                prev[1] = max(prev[1], current[1])\n            else:\n                # Otherwise, add the current interval to the list\n                merged_intervals.append(current)\n        \n        return merged_intervals\n"},"SubmissionId":1725398231,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:30:05.62566811+02:00"}}}
