{"Question":{"Data":{"Question":{"questionFrontendId":"216","questionId":"216","Content":"<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n\n<ul>\n\t<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n\t<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 7\n<strong>Output:</strong> [[1,2,4]]\n<strong>Explanation:</strong>\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 9\n<strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]\n<strong>Explanation:</strong>\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4, n = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n","SampleTestCase":"3\n7","ExampleTestcases":"3\n7\n3\n9\n4\n1","Difficulty":"Medium","Title":"Combination Sum III","TitleSlug":"combination-sum-iii","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"686.2K\", \"totalSubmission\": \"952.1K\", \"totalAcceptedRaw\": 686187, \"totalSubmissionRaw\": 952066, \"acRate\": \"72.1%\"}","Likes":6388,"Dislikes":119,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<int>> combinationSum3(int k, int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum3(int k, int n, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<IList<int>> CombinationSum3(int k, int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function combinationSum3(k: number, n: number): number[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function combinationSum3($k, $n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun combinationSum3(k: Int, n: Int): List<List<Int>> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<int>> combinationSum3(int k, int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func combinationSum3(k int, n int) [][]int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} k\n# @param {Integer} n\n# @return {Integer[][]}\ndef combination_sum3(k, n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn combination_sum3(k: i32, n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (combination-sum3 k n)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec combination_sum3(K :: integer(), N :: integer()) -> [[integer()]].\ncombination_sum3(K, N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec combination_sum3(k :: integer, n :: integer) :: [[integer]]\n  def combination_sum3(k, n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:48:48.933488841+02:00","AcRate":"72.1","TotalSubmissions":952066,"TotalAccepted":686187,"AcceptanceRate":0.720734696964286,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/combination-sum-iii/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\tOnly numbers 1 through 9 are used.\n\tEach number is used at most once.\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n \nExample 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.\nExample 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\nExample 3:\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n \nConstraints:\n\t2 <= k <= 9\n\t1 <= n <= 60\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        def backtrack(start, k, n, path, result):\n            if k == 0 and n == 0:\n                result.append(path[:])\n                return\n            if k == 0 or n == 0:\n                return\n            for i in range(start, 10):\n                if i > n:\n                    break\n                path.append(i)\n                backtrack(i + 1, k - 1, n - i, path, result)\n                path.pop()\n        \n        result = []\n        backtrack(1, k, n, [], result)\n        return result\n```","TypedCode":"\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        def backtrack(start, k, n, path, result):\n            if k == 0 and n == 0:\n                result.append(path[:])\n                return\n            if k == 0 or n == 0:\n                return\n            for i in range(start, 10):\n                if i > n:\n                    break\n                path.append(i)\n                backtrack(i + 1, k - 1, n - i, path, result)\n                path.pop()\n        \n        result = []\n        backtrack(1, k, n, [], result)\n        return result\n","Model":"gpt-4o-2024-08-06","Latency":1728409292,"SolvedAt":"2025-07-18T15:06:47.744931999+02:00","PromptTokens":501,"OutputTokens":149}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"216","typed_code":"\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        def backtrack(start, k, n, path, result):\n            if k == 0 and n == 0:\n                result.append(path[:])\n                return\n            if k == 0 or n == 0:\n                return\n            for i in range(start, 10):\n                if i > n:\n                    break\n                path.append(i)\n                backtrack(i + 1, k - 1, n - i, path, result)\n                path.pop()\n        \n        result = []\n        backtrack(1, k, n, [], result)\n        return result\n"},"SubmissionId":1725603208,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T14:06:36.002114273+02:00"}}}
