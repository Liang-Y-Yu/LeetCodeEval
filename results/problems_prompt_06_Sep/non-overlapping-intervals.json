{"Question":{"Data":{"Question":{"questionFrontendId":"435","questionId":"435","Content":"<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p><strong>Note</strong> that intervals which only touch at a point are <strong>non-overlapping</strong>. For example, <code>[1, 2]</code> and <code>[2, 3]</code> are non-overlapping.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[[1,2],[2,3],[3,4],[1,3]]","ExampleTestcases":"[[1,2],[2,3],[3,4],[1,3]]\n[[1,2],[1,2],[1,2]]\n[[1,2],[2,3]]","Difficulty":"Medium","Title":"Non-overlapping Intervals","TitleSlug":"non-overlapping-intervals","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"860.2K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 860214, \"totalSubmissionRaw\": 1536400, \"acRate\": \"56.0%\"}","Likes":8826,"Dislikes":246,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int EraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function eraseOverlapIntervals(intervals: number[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func eraseOverlapIntervals(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun eraseOverlapIntervals(intervals: Array<IntArray>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int eraseOverlapIntervals(List<List<int>> intervals) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func eraseOverlapIntervals(intervals [][]int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn erase_overlap_intervals(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (erase-overlap-intervals intervals)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec erase_overlap_intervals(Intervals :: [[integer()]]) -> integer().\nerase_overlap_intervals(Intervals) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec erase_overlap_intervals(intervals :: [[integer]]) :: integer\n  def erase_overlap_intervals(intervals) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:56:38.008410439+02:00","AcRate":"56.0","TotalSubmissions":1536400,"TotalAccepted":860214,"AcceptanceRate":0.5598893517313199,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/non-overlapping-intervals/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\n \nExample 1:\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\nExample 2:\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\nExample 3:\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n \nConstraints:\n\t1 <= intervals.length <= 10^5\n\tintervals[i].length == 2\n\t-5 * 10^4 <= starti < endi <= 5 * 10^4\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # Sort the intervals based on the end time\n        intervals.sort(key=lambda x: x[1])\n        \n        # Initialize count of overlapping intervals to remove and the end of the last non-overlapping interval\n        removed_count = 0\n        last_end = float('-inf')\n        \n        # Iterate through the sorted intervals\n        for start, end in intervals:\n            # If the current interval overlaps with the last non-overlapping interval, remove it\n            if start < last_end:\n                removed_count += 1\n            else:\n                # Update last_end to the end time of the current interval\n                last_end = end\n        \n        return removed_count\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # Sort the intervals based on the end time\n        intervals.sort(key=lambda x: x[1])\n        \n        # Initialize count of overlapping intervals to remove and the end of the last non-overlapping interval\n        removed_count = 0\n        last_end = float('-inf')\n        \n        # Iterate through the sorted intervals\n        for start, end in intervals:\n            # If the current interval overlaps with the last non-overlapping interval, remove it\n            if start < last_end:\n                removed_count += 1\n            else:\n                # Update last_end to the end time of the current interval\n                last_end = end\n        \n        return removed_count\n","Model":"gpt-4o-2024-08-06","Latency":1849079375,"SolvedAt":"2025-09-06T21:49:27.675111705+02:00","PromptTokens":474,"OutputTokens":164}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"435","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # Sort the intervals based on the end time\n        intervals.sort(key=lambda x: x[1])\n        \n        # Initialize count of overlapping intervals to remove and the end of the last non-overlapping interval\n        removed_count = 0\n        last_end = float('-inf')\n        \n        # Iterate through the sorted intervals\n        for start, end in intervals:\n            # If the current interval overlaps with the last non-overlapping interval, remove it\n            if start < last_end:\n                removed_count += 1\n            else:\n                # Update last_end to the end time of the current interval\n                last_end = end\n        \n        return removed_count\n"},"SubmissionId":1761889663,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:14:05.282053617+02:00"}}}
