{"Question":{"Data":{"Question":{"questionFrontendId":"394","questionId":"394","Content":"<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n","SampleTestCase":"\"3[a]2[bc]\"","ExampleTestcases":"\"3[a]2[bc]\"\n\"3[a2[c]]\"\n\"2[abc]3[cd]ef\"","Difficulty":"Medium","Title":"Decode String","TitleSlug":"decode-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 1066295, \"totalSubmissionRaw\": 1733156, \"acRate\": \"61.5%\"}","Likes":13562,"Dislikes":677,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjMx","Name":"Recursion","Slug":"recursion"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string decodeString(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String decodeString(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def decodeString(self, s: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* decodeString(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string DecodeString(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function decodeString(s: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func decodeString(_ s: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun decodeString(s: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String decodeString(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func decodeString(s string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {String}\ndef decode_string(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn decode_string(s: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (decode-string s)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec decode_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ndecode_string(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec decode_string(s :: String.t) :: String.t\n  def decode_string(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:52:16.335537183+02:00","AcRate":"61.5","TotalSubmissions":1733156,"TotalAccepted":1066295,"AcceptanceRate":0.6152331353900052,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/decode-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\nThe test cases are generated so that the length of the output will never exceed 10^5.\n \nExample 1:\nInput: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"\nExample 2:\nInput: s = \"3[a2[c]]\"\nOutput: \"accaccacc\"\nExample 3:\nInput: s = \"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"\n \nConstraints:\n\t1 <= s.length <= 30\n\ts consists of lowercase English letters, digits, and square brackets '[]'.\n\ts is guaranteed to be a valid input.\n\tAll the integers in s are in the range [1, 300].\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def decodeString(self, s: str) -> str:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        num = 0\n        current_string = \"\"\n        \n        for char in s:\n            if char.isdigit():\n                num = num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, num))\n                current_string = \"\"\n                num = 0\n            elif char == ']':\n                last_string, last_num = stack.pop()\n                current_string = last_string + current_string * last_num\n            else:\n                current_string += char\n        \n        return current_string\n```","TypedCode":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        num = 0\n        current_string = \"\"\n        \n        for char in s:\n            if char.isdigit():\n                num = num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, num))\n                current_string = \"\"\n                num = 0\n            elif char == ']':\n                last_string, last_num = stack.pop()\n                current_string = last_string + current_string * last_num\n            else:\n                current_string += char\n        \n        return current_string\n","Model":"gpt-4o-2024-08-06","Latency":1165766884,"SolvedAt":"2025-09-06T21:46:42.583749017+02:00","PromptTokens":472,"OutputTokens":129}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"394","typed_code":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        num = 0\n        current_string = \"\"\n        \n        for char in s:\n            if char.isdigit():\n                num = num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, num))\n                current_string = \"\"\n                num = 0\n            elif char == ']':\n                last_string, last_num = stack.pop()\n                current_string = last_string + current_string * last_num\n            else:\n                current_string += char\n        \n        return current_string\n"},"SubmissionId":1761878195,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T21:57:25.883851097+02:00"}}}
