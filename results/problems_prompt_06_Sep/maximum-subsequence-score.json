{"Question":{"Data":{"Question":{"questionFrontendId":"2542","questionId":"2636","Content":"<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of equal length <code>n</code> and a positive integer <code>k</code>. You must choose a <strong>subsequence</strong> of indices from <code>nums1</code> of length <code>k</code>.</p>\n\n<p>For chosen indices <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, ..., <code>i<sub>k - 1</sub></code>, your <strong>score</strong> is defined as:</p>\n\n<ul>\n\t<li>The sum of the selected elements from <code>nums1</code> multiplied with the <strong>minimum</strong> of the selected elements from <code>nums2</code>.</li>\n\t<li>It can defined simply as: <code>(nums1[i<sub>0</sub>] + nums1[i<sub>1</sub>] +...+ nums1[i<sub>k - 1</sub>]) * min(nums2[i<sub>0</sub>] , nums2[i<sub>1</sub>], ... ,nums2[i<sub>k - 1</sub>])</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> possible score.</em></p>\n\n<p>A <strong>subsequence</strong> of indices of an array is a set that can be derived from the set <code>{0, 1, ..., n-1}</code> by deleting some or no elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n","SampleTestCase":"[1,3,3,2]\n[2,1,3,4]\n3","ExampleTestcases":"[1,3,3,2]\n[2,1,3,4]\n3\n[4,2,3,1,1]\n[7,5,10,9,6]\n1","Difficulty":"Medium","Title":"Maximum Subsequence Score","TitleSlug":"maximum-subsequence-score","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"136.7K\", \"totalSubmission\": \"251.4K\", \"totalAcceptedRaw\": 136696, \"totalSubmissionRaw\": 251433, \"acRate\": \"54.4%\"}","Likes":3057,"Dislikes":206,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUw","Name":"Heap (Priority Queue)","Slug":"heap-priority-queue"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public long maxScore(int[] nums1, int[] nums2, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxScore(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"long long maxScore(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public long MaxScore(int[] nums1, int[] nums2, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar maxScore = function(nums1, nums2, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxScore(nums1: number[], nums2: number[], k: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxScore($nums1, $nums2, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxScore(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxScore(nums1: IntArray, nums2: IntArray, k: Int): Long {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxScore(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxScore(nums1 []int, nums2 []int, k int) int64 {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef max_score(nums1, nums2, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxScore(nums1: Array[Int], nums2: Array[Int], k: Int): Long = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_score(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-score nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_score(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nmax_score(Nums1, Nums2, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_score(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def max_score(nums1, nums2, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:55:47.878000857+02:00","AcRate":"54.4","TotalSubmissions":251433,"TotalAccepted":136696,"AcceptanceRate":0.5436676967621593,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/maximum-subsequence-score/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.\nFor chosen indices i0, i1, ..., ik - 1, your score is defined as:\n\tThe sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.\n\tIt can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).\nReturn the maximum possible score.\nA subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.\n \nExample 1:\nInput: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\nOutput: 12\nExplanation: \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\nExample 2:\nInput: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\nOutput: 30\nExplanation: \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n \nConstraints:\n\tn == nums1.length == nums2.length\n\t1 <= n <= 10^5\n\t0 <= nums1[i], nums2[j] <= 10^5\n\t1 <= k <= n\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        n = len(nums1)\n        index_pairs = [(nums2[i], nums1[i]) for i in range(n)]\n        index_pairs.sort(reverse=True)\n\n        max_score = 0\n        sum_nums1 = 0\n        min_heap = []\n\n        for i in range(k - 1):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n\n        for i in range(k - 1, n):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n            min_value = index_pairs[i][0]\n            max_score = max(max_score, sum_nums1 * min_value)\n\n            sum_nums1 -= heapq.heappop(min_heap)\n\n        return max_score\n```","TypedCode":"\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        n = len(nums1)\n        index_pairs = [(nums2[i], nums1[i]) for i in range(n)]\n        index_pairs.sort(reverse=True)\n\n        max_score = 0\n        sum_nums1 = 0\n        min_heap = []\n\n        for i in range(k - 1):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n\n        for i in range(k - 1, n):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n            min_value = index_pairs[i][0]\n            max_score = max(max_score, sum_nums1 * min_value)\n\n            sum_nums1 -= heapq.heappop(min_heap)\n\n        return max_score\n","Model":"gpt-4o-2024-08-06","Latency":1835722500,"SolvedAt":"2025-09-06T21:48:48.880305636+02:00","PromptTokens":739,"OutputTokens":212}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"2636","typed_code":"\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        n = len(nums1)\n        index_pairs = [(nums2[i], nums1[i]) for i in range(n)]\n        index_pairs.sort(reverse=True)\n\n        max_score = 0\n        sum_nums1 = 0\n        min_heap = []\n\n        for i in range(k - 1):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n\n        for i in range(k - 1, n):\n            sum_nums1 += index_pairs[i][1]\n            heapq.heappush(min_heap, index_pairs[i][1])\n            min_value = index_pairs[i][0]\n            max_score = max(max_score, sum_nums1 * min_value)\n\n            sum_nums1 -= heapq.heappop(min_heap)\n\n        return max_score\n"},"SubmissionId":1761887112,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:10:18.94001973+02:00"}}}
