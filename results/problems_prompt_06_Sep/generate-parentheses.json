{"Question":{"Data":{"Question":{"questionFrontendId":"22","questionId":"22","Content":"<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n","SampleTestCase":"3","ExampleTestcases":"3\n1","Difficulty":"Medium","Title":"Generate Parentheses","TitleSlug":"generate-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 2528504, \"totalSubmissionRaw\": 3258247, \"acRate\": \"77.6%\"}","Likes":22594,"Dislikes":1056,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function generateParenthesis(n: number): string[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func generateParenthesis(n int) []string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:53:03.31129051+02:00","AcRate":"77.6","TotalSubmissions":3258247,"TotalAccepted":2528504,"AcceptanceRate":0.7760320196719279,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/generate-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n \nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n \nConstraints:\n\t1 <= n <= 8\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(s: str, open_count: int, close_count: int):\n            if len(s) == 2 * n:\n                result.append(s)\n                return\n            \n            if open_count < n:\n                backtrack(s + '(', open_count + 1, close_count)\n            \n            if close_count < open_count:\n                backtrack(s + ')', open_count, close_count + 1)\n        \n        result = []\n        backtrack('', 0, 0)\n        return result\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(s: str, open_count: int, close_count: int):\n            if len(s) == 2 * n:\n                result.append(s)\n                return\n            \n            if open_count < n:\n                backtrack(s + '(', open_count + 1, close_count)\n            \n            if close_count < open_count:\n                backtrack(s + ')', open_count, close_count + 1)\n        \n        result = []\n        backtrack('', 0, 0)\n        return result\n","Model":"gpt-4o-2024-08-06","Latency":1604814674,"SolvedAt":"2025-09-06T21:47:24.748253442+02:00","PromptTokens":289,"OutputTokens":132}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"22","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(s: str, open_count: int, close_count: int):\n            if len(s) == 2 * n:\n                result.append(s)\n                return\n            \n            if open_count < n:\n                backtrack(s + '(', open_count + 1, close_count)\n            \n            if close_count < open_count:\n                backtrack(s + ')', open_count, close_count + 1)\n        \n        result = []\n        backtrack('', 0, 0)\n        return result\n"},"SubmissionId":1761881238,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:01:39.961931585+02:00"}}}
