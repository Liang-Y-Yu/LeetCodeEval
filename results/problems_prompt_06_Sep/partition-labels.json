{"Question":{"Data":{"Question":{"questionFrontendId":"763","questionId":"768","Content":"<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string <code>&quot;ababcc&quot;</code> can be partitioned into <code>[&quot;abab&quot;, &quot;cc&quot;]</code>, but partitions such as <code>[&quot;aba&quot;, &quot;bcc&quot;]</code> or <code>[&quot;ab&quot;, &quot;ab&quot;, &quot;cc&quot;]</code> are invalid.</p>\n\n<p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p>\n\n<p>Return <em>a list of integers representing the size of these parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababcbacadefegdehijhklij&quot;\n<strong>Output:</strong> [9,7,8]\n<strong>Explanation:</strong>\nThe partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits s into less parts.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eccbbbbdec&quot;\n<strong>Output:</strong> [10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"ababcbacadefegdehijhklij\"","ExampleTestcases":"\"ababcbacadefegdehijhklij\"\n\"eccbbbbdec\"","Difficulty":"Medium","Title":"Partition Labels","TitleSlug":"partition-labels","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"742.5K\", \"totalSubmission\": \"909.5K\", \"totalAcceptedRaw\": 742507, \"totalSubmissionRaw\": 909539, \"acRate\": \"81.6%\"}","Likes":11066,"Dislikes":435,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> partitionLabels(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<Integer> partitionLabels(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def partitionLabels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* partitionLabels(char* s, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<int> PartitionLabels(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number[]}\n */\nvar partitionLabels = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function partitionLabels(s: string): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function partitionLabels($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func partitionLabels(_ s: String) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun partitionLabels(s: String): List<Int> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> partitionLabels(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func partitionLabels(s string) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer[]}\ndef partition_labels(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def partitionLabels(s: String): List[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn partition_labels(s: String) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (partition-labels s)\n  (-> string? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec partition_labels(S :: unicode:unicode_binary()) -> [integer()].\npartition_labels(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec partition_labels(s :: String.t) :: [integer]\n  def partition_labels(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:57:35.45671128+02:00","AcRate":"81.6","TotalSubmissions":909539,"TotalAccepted":742507,"AcceptanceRate":0.8163553184635294,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/partition-labels/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string \"ababcc\" can be partitioned into [\"abab\", \"cc\"], but partitions such as [\"aba\", \"bcc\"] or [\"ab\", \"ab\", \"cc\"] are invalid.\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\nReturn a list of integers representing the size of these parts.\n \nExample 1:\nInput: s = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\nExample 2:\nInput: s = \"eccbbbbdec\"\nOutput: [10]\n \nConstraints:\n\t1 <= s.length <= 500\n\ts consists of lowercase English letters.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: idx for idx, char in enumerate(s)}\n        partitions = []\n        start, end = 0, 0\n        \n        for idx, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if idx == end:\n                partitions.append(end - start + 1)\n                start = idx + 1\n                \n        return partitions\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: idx for idx, char in enumerate(s)}\n        partitions = []\n        start, end = 0, 0\n        \n        for idx, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if idx == end:\n                partitions.append(end - start + 1)\n                start = idx + 1\n                \n        return partitions\n","Model":"gpt-4o-2024-08-06","Latency":1011973799,"SolvedAt":"2025-09-06T21:49:40.835427828+02:00","PromptTokens":452,"OutputTokens":108}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"768","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: idx for idx, char in enumerate(s)}\n        partitions = []\n        start, end = 0, 0\n        \n        for idx, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if idx == end:\n                partitions.append(end - start + 1)\n                start = idx + 1\n                \n        return partitions\n"},"SubmissionId":1761890405,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:15:12.8578784+02:00"}}}
