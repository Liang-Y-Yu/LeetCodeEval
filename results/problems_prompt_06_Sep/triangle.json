{"Question":{"Data":{"Question":{"questionFrontendId":"120","questionId":"120","Content":"<p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>\n\n<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The triangle looks like:\n   <u>2</u>\n  <u>3</u> 4\n 6 <u>5</u> 7\n4 <u>1</u> 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[-10]]\n<strong>Output:</strong> -10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= triangle.length &lt;= 200</code></li>\n\t<li><code>triangle[0].length == 1</code></li>\n\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you&nbsp;do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?","SampleTestCase":"[[2],[3,4],[6,5,7],[4,1,8,3]]","ExampleTestcases":"[[2],[3,4],[6,5,7],[4,1,8,3]]\n[[-10]]","Difficulty":"Medium","Title":"Triangle","TitleSlug":"triangle","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1061309, \"totalSubmissionRaw\": 1788518, \"acRate\": \"59.3%\"}","Likes":10224,"Dislikes":585,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinimumTotal(IList<IList<int>> triangle) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minimumTotal(triangle: number[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[][] $triangle\n     * @return Integer\n     */\n    function minimumTotal($triangle) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minimumTotal(triangle: List<List<Int>>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minimumTotal(List<List<int>> triangle) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minimumTotal(triangle [][]int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn minimum_total(triangle: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (minimum-total triangle)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec minimum_total(Triangle :: [[integer()]]) -> integer().\nminimum_total(Triangle) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec minimum_total(triangle :: [[integer]]) :: integer\n  def minimum_total(triangle) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:59:55.727552493+02:00","AcRate":"59.3","TotalSubmissions":1788518,"TotalAccepted":1061309,"AcceptanceRate":0.5934013524046166,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/triangle/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n \nExample 1:\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\nExample 2:\nInput: triangle = [[-10]]\nOutput: -10\n \nConstraints:\n\t1 <= triangle.length <= 200\n\ttriangle[0].length == 1\n\ttriangle[i].length == triangle[i - 1].length + 1\n\t-10^4 <= triangle[i][j] <= 10^4\n \nFollow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if not triangle:\n            return 0\n        \n        # Start from the second to last row and move upwards\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                # Update the current cell by adding the minimum of the possible paths from below\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # Return the minimum path sum at the top of the triangle\n        return triangle[0][0]\n```","TypedCode":"\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if not triangle:\n            return 0\n        \n        # Start from the second to last row and move upwards\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                # Update the current cell by adding the minimum of the possible paths from below\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # Return the minimum path sum at the top of the triangle\n        return triangle[0][0]\n","Model":"gpt-4o-2024-08-06","Latency":1235634922,"SolvedAt":"2025-09-06T21:50:47.066031721+02:00","PromptTokens":472,"OutputTokens":143}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"120","typed_code":"\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if not triangle:\n            return 0\n        \n        # Start from the second to last row and move upwards\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                # Update the current cell by adding the minimum of the possible paths from below\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # Return the minimum path sum at the top of the triangle\n        return triangle[0][0]\n"},"SubmissionId":1761895104,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:22:23.811693667+02:00"}}}
