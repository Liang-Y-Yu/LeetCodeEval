{"Question":{"Data":{"Question":{"questionFrontendId":"28","questionId":"28","Content":"<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n","SampleTestCase":"\"sadbutsad\"\n\"sad\"","ExampleTestcases":"\"sadbutsad\"\n\"sad\"\n\"leetcode\"\n\"leeto\"","Difficulty":"Easy","Title":"Find the Index of the First Occurrence in a String","TitleSlug":"find-the-index-of-the-first-occurrence-in-a-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.5M\", \"totalSubmission\": \"7.8M\", \"totalAcceptedRaw\": 3546054, \"totalSubmissionRaw\": 7805459, \"acRate\": \"45.4%\"}","Likes":7041,"Dislikes":529,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUy","Name":"String Matching","Slug":"string-matching"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int strStr(char* haystack, char* needle) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function strStr(haystack: string, needle: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func strStr(haystack string, needle string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:53:25.275414225+02:00","AcRate":"45.4","TotalSubmissions":7805459,"TotalAccepted":3546054,"AcceptanceRate":0.4543043528894329,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n \nExample 1:\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\nExample 2:\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n \nConstraints:\n\t1 <= haystack.length, needle.length <= 10^4\n\thaystack and needle consist of only lowercase English characters.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        # Handle the case where needle is an empty string\n        if not needle:\n            return 0\n\n        # Get the length of needle and haystack\n        len_needle = len(needle)\n        len_haystack = len(haystack)\n\n        # Iterate over haystack to find the first occurrence of needle\n        for i in range(len_haystack - len_needle + 1):\n            # Check if the substring of haystack matches needle\n            if haystack[i:i + len_needle] == needle:\n                return i\n        \n        # If no match is found, return -1\n        return -1\n```","TypedCode":"\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        # Handle the case where needle is an empty string\n        if not needle:\n            return 0\n\n        # Get the length of needle and haystack\n        len_needle = len(needle)\n        len_haystack = len(haystack)\n\n        # Iterate over haystack to find the first occurrence of needle\n        for i in range(len_haystack - len_needle + 1):\n            # Check if the substring of haystack matches needle\n            if haystack[i:i + len_needle] == needle:\n                return i\n        \n        # If no match is found, return -1\n        return -1\n","Model":"gpt-4o-2024-08-06","Latency":1589697689,"SolvedAt":"2025-09-06T21:47:16.413605772+02:00","PromptTokens":374,"OutputTokens":157}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"28","typed_code":"\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        # Handle the case where needle is an empty string\n        if not needle:\n            return 0\n\n        # Get the length of needle and haystack\n        len_needle = len(needle)\n        len_haystack = len(haystack)\n\n        # Iterate over haystack to find the first occurrence of needle\n        for i in range(len_haystack - len_needle + 1):\n            # Check if the substring of haystack matches needle\n            if haystack[i:i + len_needle] == needle:\n                return i\n        \n        # If no match is found, return -1\n        return -1\n"},"SubmissionId":1761880772,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:00:58.96684588+02:00"}}}
