{"Question":{"Data":{"Question":{"questionFrontendId":"279","questionId":"279","Content":"<p>Given an integer <code>n</code>, return <em>the least number of perfect square numbers that sum to</em> <code>n</code>.</p>\n\n<p>A <strong>perfect square</strong> is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 12 = 4 + 4 + 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 13 = 4 + 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"12","ExampleTestcases":"12\n13","Difficulty":"Medium","Title":"Perfect Squares","TitleSlug":"perfect-squares","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"991.4K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 991429, \"totalSubmissionRaw\": 1773188, \"acRate\": \"55.9%\"}","Likes":11642,"Dislikes":485,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int numSquares(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int numSquares(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def numSquares(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def numSquares(self, n: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int numSquares(int n) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int NumSquares(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function numSquares(n: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numSquares($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func numSquares(_ n: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun numSquares(n: Int): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int numSquares(int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func numSquares(n int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @return {Integer}\ndef num_squares(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def numSquares(n: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn num_squares(n: i32) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (num-squares n)\n  (-> exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec num_squares(N :: integer()) -> integer().\nnum_squares(N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec num_squares(n :: integer) :: integer\n  def num_squares(n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:57:39.909621845+02:00","AcRate":"55.9","TotalSubmissions":1773188,"TotalAccepted":991429,"AcceptanceRate":0.5591223265666133,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/perfect-squares/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n \nExample 1:\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\nExample 2:\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n \nConstraints:\n\t1 <= n <= 10^4\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def numSquares(self, n: int) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nimport math\nfrom collections import deque\n\nclass Solution:\n    def numSquares(self, n: int) -> int:\n        # Generate all perfect squares less than or equal to n\n        squares = []\n        i = 1\n        while i * i <= n:\n            squares.append(i * i)\n            i += 1\n        \n        # Use BFS to find the least number of perfect squares that sum to n\n        queue = deque([(n, 0)])\n        visited = set()\n        \n        while queue:\n            current, level = queue.popleft()\n            \n            for square in squares:\n                next_val = current - square\n                if next_val == 0:\n                    return level + 1\n                if next_val > 0 and next_val not in visited:\n                    visited.add(next_val)\n                    queue.append((next_val, level + 1))\n        \n        return -1  # Fallback for unexpected cases, should not happen\n```","TypedCode":"\nimport math\nfrom collections import deque\n\nclass Solution:\n    def numSquares(self, n: int) -> int:\n        # Generate all perfect squares less than or equal to n\n        squares = []\n        i = 1\n        while i * i <= n:\n            squares.append(i * i)\n            i += 1\n        \n        # Use BFS to find the least number of perfect squares that sum to n\n        queue = deque([(n, 0)])\n        visited = set()\n        \n        while queue:\n            current, level = queue.popleft()\n            \n            for square in squares:\n                next_val = current - square\n                if next_val == 0:\n                    return level + 1\n                if next_val > 0 and next_val not in visited:\n                    visited.add(next_val)\n                    queue.append((next_val, level + 1))\n        \n        return -1  # Fallback for unexpected cases, should not happen\n","Model":"gpt-4o-2024-08-06","Latency":1569399684,"SolvedAt":"2025-09-06T21:49:43.407542667+02:00","PromptTokens":353,"OutputTokens":198}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"279","typed_code":"\nimport math\nfrom collections import deque\n\nclass Solution:\n    def numSquares(self, n: int) -> int:\n        # Generate all perfect squares less than or equal to n\n        squares = []\n        i = 1\n        while i * i <= n:\n            squares.append(i * i)\n            i += 1\n        \n        # Use BFS to find the least number of perfect squares that sum to n\n        queue = deque([(n, 0)])\n        visited = set()\n        \n        while queue:\n            current, level = queue.popleft()\n            \n            for square in squares:\n                next_val = current - square\n                if next_val == 0:\n                    return level + 1\n                if next_val > 0 and next_val not in visited:\n                    visited.add(next_val)\n                    queue.append((next_val, level + 1))\n        \n        return -1  # Fallback for unexpected cases, should not happen\n"},"SubmissionId":1761890637,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T22:15:33.740222507+02:00"}}}
