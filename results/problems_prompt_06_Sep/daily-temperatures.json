{"Question":{"Data":{"Question":{"questionFrontendId":"739","questionId":"739","Content":"<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n","SampleTestCase":"[73,74,75,71,69,72,76,73]","ExampleTestcases":"[73,74,75,71,69,72,76,73]\n[30,40,50,60]\n[30,60,90]","Difficulty":"Medium","Title":"Daily Temperatures","TitleSlug":"daily-temperatures","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1420597, \"totalSubmissionRaw\": 2099579, \"acRate\": \"67.7%\"}","Likes":14120,"Dislikes":358,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU0","Name":"Monotonic Stack","Slug":"monotonic-stack"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& temperatures) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* temperatures, int temperaturesSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] DailyTemperatures(int[] temperatures) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function dailyTemperatures(temperatures: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $temperatures\n     * @return Integer[]\n     */\n    function dailyTemperatures($temperatures) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func dailyTemperatures(_ temperatures: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun dailyTemperatures(temperatures: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> dailyTemperatures(List<int> temperatures) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func dailyTemperatures(temperatures []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} temperatures\n# @return {Integer[]}\ndef daily_temperatures(temperatures)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn daily_temperatures(temperatures: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (daily-temperatures temperatures)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec daily_temperatures(Temperatures :: [integer()]) -> [integer()].\ndaily_temperatures(Temperatures) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\n  def daily_temperatures(temperatures) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T10:52:24.177627826+02:00","AcRate":"67.7","TotalSubmissions":2099579,"TotalAccepted":1420597,"AcceptanceRate":0.6766104061814298,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/daily-temperatures/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the i^th day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\n \nExample 1:\nInput: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\nExample 2:\nInput: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\nExample 3:\nInput: temperatures = [30,60,90]\nOutput: [1,1,0]\n \nConstraints:\n\t1 <= temperatures.length <= 10^5\n\t30 <= temperatures[i] <= 100\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []  # This will store indices of temperature\n\n        for i in range(n):\n            # Pop indices from stack while current temperature is higher than the temperature at the stored index\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                index = stack.pop()\n                answer[index] = i - index  # Calculate number of days to wait\n            stack.append(i)  # Push current index onto stack\n\n        return answer\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []  # This will store indices of temperature\n\n        for i in range(n):\n            # Pop indices from stack while current temperature is higher than the temperature at the stored index\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                index = stack.pop()\n                answer[index] = i - index  # Calculate number of days to wait\n            stack.append(i)  # Push current index onto stack\n\n        return answer\n","Model":"gpt-4o-2024-08-06","Latency":1709389927,"SolvedAt":"2025-09-06T21:46:40.405077371+02:00","PromptTokens":399,"OutputTokens":139}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"739","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []  # This will store indices of temperature\n\n        for i in range(n):\n            # Pop indices from stack while current temperature is higher than the temperature at the stored index\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                index = stack.pop()\n                answer[index] = i - index  # Calculate number of days to wait\n            stack.append(i)  # Push current index onto stack\n\n        return answer\n"},"SubmissionId":1761878043,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T21:57:12.350768351+02:00"}}}
