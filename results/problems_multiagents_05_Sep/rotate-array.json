{"Question":{"Data":{"Question":{"questionFrontendId":"189","questionId":"189","Content":"<p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3\n<strong>Output:</strong> [5,6,7,1,2,3,4]\n<strong>Explanation:</strong>\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-100,3,99], k = 2\n<strong>Output:</strong> [3,99,-1,-100]\n<strong>Explanation:</strong> \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.</li>\n\t<li>Could you do it in-place with <code>O(1)</code> extra space?</li>\n</ul>\n","SampleTestCase":"[1,2,3,4,5,6,7]\n3","ExampleTestcases":"[1,2,3,4,5,6,7]\n3\n[-1,-100,3,99]\n2","Difficulty":"Medium","Title":"Rotate Array","TitleSlug":"rotate-array","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.4M\", \"totalSubmission\": \"7.8M\", \"totalAcceptedRaw\": 3396512, \"totalSubmissionRaw\": 7792638, \"acRate\": \"43.6%\"}","Likes":19989,"Dislikes":2130,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public void rotate(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "},{"Lang":"C","LangSlug":"c","Code":"void rotate(int* nums, int numsSize, int k) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public void Rotate(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"/**\n Do not return anything, modify nums in-place instead.\n */\nfunction rotate(nums: number[], k: number): void {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(&$nums, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun rotate(nums: IntArray, k: Int): Unit {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  void rotate(List<int> nums, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func rotate(nums []int, k int)  {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef rotate(nums, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn rotate(nums: &mut Vec<i32>, k: i32) {\n        \n    }\n}"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:35:35.852955783+02:00","AcRate":"43.6","TotalSubmissions":7792638,"TotalAccepted":3396512,"AcceptanceRate":0.4358616427453707,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/rotate-array/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        k = k % n  # actual number of rotation steps needed\n        # reverse the entire array\n        nums.reverse()\n        # reverse the first k elements\n        nums[:k] = reversed(nums[:k])\n        # reverse the remaining elements\n        nums[k:] = reversed(nums[k:])\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        # Calculate actual number of rotation steps needed\n        k = k % n\n        \n        # Step 1: Reverse the entire array\n        nums.reverse()\n        \n        # Step 2: Reverse the first k elements\n        nums[:k] = reversed(nums[:k])\n        \n        # Step 3: Reverse the remaining elements\n        nums[k:] = reversed(nums[k:])\n```\n\n**Algorithm Choice**:\nThe algorithm chosen here is based on reversing parts of the array to achieve the right rotation. By reversing the entire array and then the individual parts, we effectively rotate the array without needing extra space.\n\n**Step-by-Step Approach**:\n1. Calculate `k % n` to handle cases where k >= n. This optimizes the number of rotations necessary.\n2. Reverse the full array. This step repositions all elements.\n3. Reverse the first `k` elements to their original order before rotation, contributing to the final rotated structure.\n4. Reverse the remaining elements to their original order, completing the rotated configuration.\n\n**Data Structures**:\nThe main data structure used is the list itself (`nums`), which will be modified in place.\n\n**Time Complexity**:\nThe time complexity of this approach is O(n), where n is the length of the array. Each reversal operation (full array, first `k` elements, remaining elements) takes linear time relative to the number of elements being reversed.\n\n**Space Complexity**:\nThe space complexity is O(1), meaning it operates with a constant amount of extra space. The reversals are done in-place, so no additional data structures are required.\n\n**Pseudocode**:\n```\nfunction rotate(nums, k):\n    n = length of nums\n    k = k mod n\n    reverse(nums, 0, n - 1)\n    reverse(nums, 0, k - 1)\n    reverse(nums, k, n - 1)\n\nfunction reverse(arr, start, end):\n    while start < end:\n        swap arr[start] and arr[end]\n        increment start\n        decrement end\n```\n\nThe actual implementation uses Python's list slicing and native `reverse()` method to simplify these steps.\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        k = k % n\n        nums.reverse()\n        nums[:k] = reversed(nums[:k])\n        nums[k:] = reversed(nums[k:])\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        k = k % n\n        \n        # Step 1: Reverse the entire array\n        nums.reverse()\n        \n        # Step 2: Reverse the first k elements\n        nums[:k] = reversed(nums[:k])\n        \n        # Step 3: Reverse the remaining elements\n        nums[k:] = reversed(nums[k:])\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        k = k % n\n        nums.reverse()\n        nums[:k] = reversed(nums[:k])\n        nums[k:] = reversed(nums[k:])\n","Model":"se-gpt-4o","Latency":6786849067,"SolvedAt":"2025-09-05T23:53:20.613023918+02:00","PromptTokens":4042,"OutputTokens":732}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"189","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        n = len(nums)\n        k = k % n\n        nums.reverse()\n        nums[:k] = reversed(nums[:k])\n        nums[k:] = reversed(nums[k:])\n"},"SubmissionId":1760937819,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:24:04.354724681+02:00"}}}
