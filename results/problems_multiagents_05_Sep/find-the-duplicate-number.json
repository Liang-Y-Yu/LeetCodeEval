{"Question":{"Data":{"Question":{"questionFrontendId":"287","questionId":"287","Content":"<p>Given an array of integers <code>nums</code> containing&nbsp;<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p>\n\n<p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this&nbsp;repeated&nbsp;number</em>.</p>\n\n<p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code>&nbsp;and using only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,2,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,3,4,2]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3,3,3]\n<strong>Output:</strong> 3</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums.length == n + 1</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b></p>\n\n<ul>\n\t<li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li>\n\t<li>Can you solve the problem in linear runtime complexity?</li>\n</ul>\n","SampleTestCase":"[1,3,4,2,2]","ExampleTestcases":"[1,3,4,2,2]\n[3,1,3,4,2]\n[3,3,3,3,3]","Difficulty":"Medium","Title":"Find the Duplicate Number","TitleSlug":"find-the-duplicate-number","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 2292666, \"totalSubmissionRaw\": 3621286, \"acRate\": \"63.3%\"}","Likes":24745,"Dislikes":5446,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjE5","Name":"Bit Manipulation","Slug":"bit-manipulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int findDuplicate(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int findDuplicate(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int FindDuplicate(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDuplicate = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findDuplicate(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findDuplicate($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findDuplicate(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int findDuplicate(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findDuplicate(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_duplicate(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_duplicate(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-duplicate nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_duplicate(Nums :: [integer()]) -> integer().\nfind_duplicate(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_duplicate(nums :: [integer]) :: integer\n  def find_duplicate(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:30:11.092932994+02:00","AcRate":"63.3","TotalSubmissions":3621286,"TotalAccepted":2292666,"AcceptanceRate":0.6331082383440579,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-the-duplicate-number/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        # Using Floyd's Tortoise and Hare cycle detection algorithm\n        # Phase 1: Finding the intersection point of the two runners\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        # Phase 2: Finding the entrance to the cycle\n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        # Implementing Floyd's Tortoise and Hare cycle detection algorithm\n        \n        # Phase 1: Finding the intersection point of the two runners\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        # Phase 2: Finding the entrance to the cycle\n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n```\n\n","TypedCode":"\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n","Model":"se-gpt-4o","Latency":5219790985,"SolvedAt":"2025-09-05T23:44:42.866266244+02:00","PromptTokens":3206,"OutputTokens":509}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"287","typed_code":"\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        while True:\n            tortoise = nums[tortoise]\n            hare = nums[nums[hare]]\n            if tortoise == hare:\n                break\n        \n        tortoise = nums[0]\n        while tortoise != hare:\n            tortoise = nums[tortoise]\n            hare = nums[hare]\n        \n        return hare\n"},"SubmissionId":1760931562,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:06:51.853152185+02:00"}}}
