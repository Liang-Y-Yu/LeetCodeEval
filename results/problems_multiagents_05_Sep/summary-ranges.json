{"Question":{"Data":{"Question":{"questionFrontendId":"228","questionId":"228","Content":"<p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p>\n\n<p>A <strong>range</strong> <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p>\n\n<p>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover all the numbers in the array exactly</strong></em>. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p>\n\n<p>Each range <code>[a,b]</code> in the list should be output as:</p>\n\n<ul>\n\t<li><code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></li>\n\t<li><code>&quot;a&quot;</code> if <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,4,5,7]\n<strong>Output:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,2] --&gt; &quot;0-&gt;2&quot;\n[4,5] --&gt; &quot;4-&gt;5&quot;\n[7,7] --&gt; &quot;7&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,2,3,4,6,8,9]\n<strong>Output:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,0] --&gt; &quot;0&quot;\n[2,4] --&gt; &quot;2-&gt;4&quot;\n[6,6] --&gt; &quot;6&quot;\n[8,9] --&gt; &quot;8-&gt;9&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n","SampleTestCase":"[0,1,2,4,5,7]","ExampleTestcases":"[0,1,2,4,5,7]\n[0,2,3,4,6,8,9]","Difficulty":"Easy","Title":"Summary Ranges","TitleSlug":"summary-ranges","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"837.2K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 837196, \"totalSubmissionRaw\": 1569683, \"acRate\": \"53.3%\"}","Likes":4383,"Dislikes":2345,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<String> summaryRanges(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** summaryRanges(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<string> SummaryRanges(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar summaryRanges = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function summaryRanges(nums: number[]): string[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String[]\n     */\n    function summaryRanges($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func summaryRanges(_ nums: [Int]) -> [String] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun summaryRanges(nums: IntArray): List<String> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<String> summaryRanges(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func summaryRanges(nums []int) []string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {String[]}\ndef summary_ranges(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def summaryRanges(nums: Array[Int]): List[String] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn summary_ranges(nums: Vec<i32>) -> Vec<String> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (summary-ranges nums)\n  (-> (listof exact-integer?) (listof string?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec summary_ranges(Nums :: [integer()]) -> [unicode:unicode_binary()].\nsummary_ranges(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec summary_ranges(nums :: [integer]) :: [String.t]\n  def summary_ranges(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:36:34.192172199+02:00","AcRate":"53.3","TotalSubmissions":1569683,"TotalAccepted":837196,"AcceptanceRate":0.5333535497294677,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/summary-ranges/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n```\n\n","TypedCode":"\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n","Model":"se-gpt-4o","Latency":5357833163,"SolvedAt":"2025-09-05T23:55:01.327864572+02:00","PromptTokens":3664,"OutputTokens":601}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"228","typed_code":"\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                end = nums[i - 1]\n                if start == end:\n                    ranges.append(f\"{start}\")\n                else:\n                    ranges.append(f\"{start}->{end}\")\n                start = nums[i]\n        \n        end = nums[-1]\n        if start == end:\n            ranges.append(f\"{start}\")\n        else:\n            ranges.append(f\"{start}->{end}\")\n        \n        return ranges\n"},"SubmissionId":1760939153,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:27:28.201058278+02:00"}}}
