{"Question":{"Data":{"Question":{"questionFrontendId":"77","questionId":"77","Content":"<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers chosen from the range</em> <code>[1, n]</code>.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n<strong>Explanation:</strong> There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> [[1]]\n<strong>Explanation:</strong> There is 1 choose 1 = 1 total combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n","SampleTestCase":"4\n2","ExampleTestcases":"4\n2\n1\n1","Difficulty":"Medium","Title":"Combinations","TitleSlug":"combinations","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1188053, \"totalSubmissionRaw\": 1618671, \"acRate\": \"73.4%\"}","Likes":8707,"Dislikes":242,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<IList<int>> Combine(int n, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function combine(n: number, k: number): number[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun combine(n: Int, k: Int): List<List<Int>> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<int>> combine(int n, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func combine(n int, k int) [][]int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (combine n k)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec combine(N :: integer(), K :: integer()) -> [[integer()]].\ncombine(N, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec combine(n :: integer, k :: integer) :: [[integer]]\n  def combine(n, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:28:35.742585681+02:00","AcRate":"73.4","TotalSubmissions":1618671,"TotalAccepted":1188053,"AcceptanceRate":0.7339681751263846,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/combinations/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                path.append(i)\n                backtrack(i + 1, path)\n                path.pop()\n        \n        result = []\n        backtrack(1, [])\n        return result\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                # If the path length equals k, add a copy of it to the result\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                # Add the current number to the path\n                path.append(i)\n                # Recurse to extend the path\n                backtrack(i + 1, path)\n                # Backtrack by removing the last number from the path\n                path.pop()\n        \n        # Initialize the result list to store all combinations\n        result = []\n        # Start the backtracking algorithm from 1 with an empty path\n        backtrack(1, [])\n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                path.append(i)\n                backtrack(i + 1, path)\n                path.pop()\n        \n        result = []\n        backtrack(1, [])\n        return result\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                path.append(i)\n                backtrack(i + 1, path)\n                path.pop()\n        \n        result = []\n        backtrack(1, [])\n        return result\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                path.append(i)\n                backtrack(i + 1, path)\n                path.pop()\n        \n        result = []\n        backtrack(1, [])\n        return result\n","Model":"se-gpt-4o","Latency":5178485384,"SolvedAt":"2025-09-05T23:42:25.330255336+02:00","PromptTokens":3012,"OutputTokens":520}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"77","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(start: int, path: List[int]) -> None:\n            if len(path) == k:\n                result.append(path.copy())\n                return\n            \n            for i in range(start, n + 1):\n                path.append(i)\n                backtrack(i + 1, path)\n                path.pop()\n        \n        result = []\n        backtrack(1, [])\n        return result\n"},"SubmissionId":1760929892,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:02:31.445620802+02:00"}}}
