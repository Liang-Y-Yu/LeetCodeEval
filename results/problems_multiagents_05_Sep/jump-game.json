{"Question":{"Data":{"Question":{"questionFrontendId":"55","questionId":"55","Content":"<p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n\n<p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","SampleTestCase":"[2,3,1,1,4]","ExampleTestcases":"[2,3,1,1,4]\n[3,2,1,0,4]","Difficulty":"Medium","Title":"Jump Game","TitleSlug":"jump-game","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"7M\", \"totalAcceptedRaw\": 2802701, \"totalSubmissionRaw\": 7029962, \"acRate\": \"39.9%\"}","Likes":21011,"Dislikes":1426,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool canJump(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function canJump(nums: number[]): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func canJump(nums []int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:31:42.369815538+02:00","AcRate":"39.9","TotalSubmissions":7029962,"TotalAccepted":2802701,"AcceptanceRate":0.39867939542205205,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/jump-game/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n```\n\n=== DESIGN ===\nHere is the solution based on the provided analysis:\n\n```python\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n```\n\nAlgorithm Choice:\n- Use a greedy approach: At each step, update the maximum position you can reach.\n  \nStep-by-Step Approach:\n1. Initialize `maxReach` variable to keep track of the maximum index that can be reached so far.\n2. Iterate over the `nums` array.\n3. Check if the current index `i` is greater than `maxReach`. If so, return `False` as it's impossible to reach beyond this index.\n4. Update `maxReach` to the maximum of its current value and `i + nums[i]`.\n5. If `maxReach` reaches or exceeds the last index, return `True`.\n6. At the end of the loop, return whether `maxReach` is greater than or equal to the last index.\n\nData Structures:\n- A single integer `maxReach` to store the furthest reachable index.\n\nTime Complexity:\n- O(n), since we traverse the list once.\n\nSpace Complexity:\n- O(1), as we use only a few integer variables for computation.\n\nPseudocode:\n```plaintext\nfunction canJump(nums):\n    initialize maxReach to 0\n    n = length of nums\n    \n    for i from 0 to n - 1:\n        if i > maxReach:\n            return False\n        maxReach = max(maxReach, i + nums[i])\n        if maxReach >= n - 1:\n            return True\n    \n    return maxReach >= n - 1\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n","Model":"se-gpt-4o","Latency":6286927489,"SolvedAt":"2025-09-05T23:46:59.284730842+02:00","PromptTokens":3353,"OutputTokens":682}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"55","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        maxReach = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if i > maxReach:\n                return False\n            maxReach = max(maxReach, i + nums[i])\n            if maxReach >= n - 1:\n                return True\n        \n        return maxReach >= n - 1\n"},"SubmissionId":1760933300,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:11:31.304805942+02:00"}}}
