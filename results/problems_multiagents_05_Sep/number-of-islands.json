{"Question":{"Data":{"Question":{"questionFrontendId":"200","questionId":"200","Content":"<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n","SampleTestCase":"[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]","ExampleTestcases":"[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]","Difficulty":"Medium","Title":"Number of Islands","TitleSlug":"number-of-islands","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.7M\", \"totalSubmission\": \"5.8M\", \"totalAcceptedRaw\": 3652986, \"totalSubmissionRaw\": 5810252, \"acRate\": \"62.9%\"}","Likes":24207,"Dislikes":582,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjIx","Name":"Depth-First Search","Slug":"depth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjIz","Name":"Union Find","Slug":"union-find"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUz","Name":"Matrix","Slug":"matrix"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int numIslands(char** grid, int gridSize, int* gridColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function numIslands(grid: string[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func numIslands(_ grid: [[Character]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun numIslands(grid: Array<CharArray>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int numIslands(List<List<String>> grid) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func numIslands(grid [][]byte) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (num-islands grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec num_islands(Grid :: [[char()]]) -> integer().\nnum_islands(Grid) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec num_islands(grid :: [[char]]) :: integer\n  def num_islands(grid) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:34:39.364167501+02:00","AcRate":"62.9","TotalSubmissions":5810252,"TotalAccepted":3652986,"AcceptanceRate":0.628713866455362,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/number-of-islands/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid:\n            return 0\n        \n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'  # Mark as visited\n            # Explore neighbors\n            dfs(x - 1, y)  # Up\n            dfs(x + 1, y)  # Down\n            dfs(x, y - 1)  # Left\n            dfs(x, y + 1)  # Right\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        # Helper function to perform Depth First Search\n        def dfs(x, y):\n            # Base case: out of bounds or water\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            # Mark the current cell as visited (part of water now)\n            grid[x][y] = '0'\n            # Explore all neighbors in four directions\n            dfs(x - 1, y)  # Up\n            dfs(x + 1, y)  # Down\n            dfs(x, y - 1)  # Left\n            dfs(x, y + 1)  # Right\n\n        # Get the dimensions of the grid\n        m, n = len(grid), len(grid[0])\n        # Initialize the number of islands counter\n        island_count = 0\n        \n        # Iterate over each cell in the grid\n        for i in range(m):\n            for j in range(n):\n                # If a cell is land ('1'), it is a part of an island\n                if grid[i][j] == '1':\n                    # Increment the island count\n                    island_count += 1\n                    # Start DFS to mark the entire connected component\n                    dfs(i, j)\n        \n        # Return the number of islands found\n        return island_count\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n","Model":"se-gpt-4o","Latency":9025789030,"SolvedAt":"2025-09-05T23:51:44.577650589+02:00","PromptTokens":3866,"OutputTokens":884}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"200","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n"},"SubmissionId":1760936674,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:20:42.563721033+02:00"}}}
