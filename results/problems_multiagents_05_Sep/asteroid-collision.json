{"Question":{"Data":{"Question":{"questionFrontendId":"735","questionId":"735","Content":"<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n","SampleTestCase":"[5,10,-5]","ExampleTestcases":"[5,10,-5]\n[8,-8]\n[10,2,-5]","Difficulty":"Medium","Title":"Asteroid Collision","TitleSlug":"asteroid-collision","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"865.4K\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 865402, \"totalSubmissionRaw\": 1881804, \"acRate\": \"46.0%\"}","Likes":8927,"Dislikes":1274,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU1","Name":"Simulation","Slug":"simulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def asteroidCollision(self, asteroids):\n        \"\"\"\n        :type asteroids: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] AsteroidCollision(int[] asteroids) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function asteroidCollision(asteroids: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $asteroids\n     * @return Integer[]\n     */\n    function asteroidCollision($asteroids) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func asteroidCollision(_ asteroids: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun asteroidCollision(asteroids: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> asteroidCollision(List<int> asteroids) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func asteroidCollision(asteroids []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} asteroids\n# @return {Integer[]}\ndef asteroid_collision(asteroids)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn asteroid_collision(asteroids: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (asteroid-collision asteroids)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec asteroid_collision(Asteroids :: [integer()]) -> [integer()].\nasteroid_collision(Asteroids) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec asteroid_collision(asteroids :: [integer]) :: [integer]\n  def asteroid_collision(asteroids) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:27:36.906419326+02:00","AcRate":"46.0","TotalSubmissions":1881804,"TotalAccepted":865402,"AcceptanceRate":0.4598789246914131,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/asteroid-collision/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack = []\n        \n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()\n                    continue\n                elif stack[-1] == -asteroid:\n                    stack.pop()\n                break\n            else:\n                stack.append(asteroid)\n        \n        return stack\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        # Stack to handle asteroid collisions\n        stack = []\n        \n        # Iterate through each asteroid\n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()  # The last asteroid in the stack explodes\n                    continue  # Continue to next iteration to check new top of the stack\n                elif stack[-1] == -asteroid:\n                    stack.pop()  # Both asteroids explode\n                break  # Current asteroid explodes, no further action needed\n            else:\n                stack.append(asteroid)  # Add current asteroid to the stack if no collisions\n            \n        return stack\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack = []\n        \n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()\n                    continue\n                elif stack[-1] == -asteroid:\n                    stack.pop()\n                break\n            else:\n                stack.append(asteroid)\n        \n        return stack\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack = []\n        \n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()\n                    continue\n                elif stack[-1] == -asteroid:\n                    stack.pop()\n                break\n            else:\n                stack.append(asteroid)\n        \n        return stack\n```\n\nVerification Report:\n\n1. **Correctness**: The implemented code correctly uses a stack-based approach to simulate collisions between asteroids. It checks for collisions when a negative asteroid encounters a positive one that precedes it in the list.\n\n2. **Edge Cases**: The code correctly handles edge cases like:\n   - All asteroids colliding and resulting in empty space.\n   - Asteroids moving in one direction only, which results in no collision.\n   - Asteroids of the same size colliding and exploding each other.\n\n3. **Complexity**: The algorithm efficiently handles the asteroid collision simulation in O(n) time complexity, where n is the length of the asteroid list. This is due to each asteroid being pushed and popped from the stack at most once. The space complexity is also O(n) in the worst case when no collisions occur and all asteroids need to be stored in the stack.\n\n4. **Code Quality**: The code is clean, structured, and employs good practices. It uses clear variable names, consistent formatting, and logical separation to guide the flow.\n\n5. **Test Cases**: Checked against the provided examples and additional edge case scenarios:\n   - Example 1: `asteroids = [5,10,-5]`, Output is `[5,10]`, which is correct.\n   - Example 2: `asteroids = [8,-8]`, Output is `[]`, which is correct.\n   - Example 3: `asteroids = [10,2,-5]`, Output is `[10]`, which is correct.\n   - Additional: `asteroids = [3, 2, 1, -1, -2, -3]`, expects `[]`, which is handled correctly.\n\n6. **Potential Issues**: There are no major issues with the logic. The code correctly handles all specified scenarios and edge cases.\n\nThe solution is verified as correct, efficient, and following best coding practices.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack = []\n        \n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()\n                    continue\n                elif stack[-1] == -asteroid:\n                    stack.pop()\n                break\n            else:\n                stack.append(asteroid)\n        \n        return stack\n","Model":"se-gpt-4o","Latency":7595073807,"SolvedAt":"2025-09-05T23:40:39.761290385+02:00","PromptTokens":3347,"OutputTokens":881}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"735","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack = []\n        \n        for asteroid in asteroids:\n            while stack and asteroid < 0 < stack[-1]:\n                if stack[-1] < -asteroid:\n                    stack.pop()\n                    continue\n                elif stack[-1] == -asteroid:\n                    stack.pop()\n                break\n            else:\n                stack.append(asteroid)\n        \n        return stack\n"},"SubmissionId":1760928500,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-05T23:58:59.644100128+02:00"}}}
