{"Question":{"Data":{"Question":{"questionFrontendId":"416","questionId":"416","Content":"<p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,11,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n","SampleTestCase":"[1,5,11,5]","ExampleTestcases":"[1,5,11,5]\n[1,2,3,5]","Difficulty":"Medium","Title":"Partition Equal Subset Sum","TitleSlug":"partition-equal-subset-sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1323282, \"totalSubmissionRaw\": 2712283, \"acRate\": \"48.8%\"}","Likes":13463,"Dislikes":290,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool canPartition(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool CanPartition(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function canPartition(nums: number[]): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canPartition($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func canPartition(_ nums: [Int]) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool canPartition(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func canPartition(nums []int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_partition(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn can_partition(nums: Vec<i32>) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (can-partition nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec can_partition(Nums :: [integer()]) -> boolean().\ncan_partition(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec can_partition(nums :: [integer]) :: boolean\n  def can_partition(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:34:24.302860389+02:00","AcRate":"48.8","TotalSubmissions":2712283,"TotalAccepted":1323282,"AcceptanceRate":0.48788492941186445,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/partition-equal-subset-sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        # If the total sum is odd, we cannot partition it into two equal subsets\n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        \n        # Use a dynamic programming set to store the achievable subset sums\n        # Start with only 0 being achievable\n        possible_sums = set([0])\n        \n        for num in nums:\n            new_sums = set()\n            for s in possible_sums:\n                new_sum = s + num\n                if new_sum == subset_sum:\n                    return True\n                if new_sum < subset_sum:\n                    new_sums.add(new_sum)\n            possible_sums.update(new_sums)\n        \n        return False\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        # Calculate the total sum of the array\n        total_sum = sum(nums)\n        \n        # If the total sum is odd, it cannot be partitioned into two equal subsets\n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        \n        # Initialize a dynamic programming array to store the achievable subset sums\n        # dp[i] = True means that a subset with sum i is achievable using elements of nums\n        dp = [False] * (subset_sum + 1)\n        dp[0] = True  # A subset with sum 0 is always achievable (by taking no elements)\n        \n        # Iterate over each number in nums\n        for num in nums:\n            # Traverse the dp array in reverse order from subset_sum down to num\n            # This is to ensure that each number is only used once in achieving any sum\n            for s in range(subset_sum, num - 1, -1):\n                # If subset sum s can be achieved, then subset sum s can be achieved with current num as well\n                if dp[s - num]:\n                    dp[s] = True\n        \n        # Finally, check if a subset sum of subset_sum is achievable\n        return dp[subset_sum]\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        dp = [False] * (subset_sum + 1)\n        dp[0] = True\n        \n        for num in nums:\n            for s in range(subset_sum, num - 1, -1):\n                if dp[s - num]:\n                    dp[s] = True\n        \n        return dp[subset_sum]\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        dp = [False] * (subset_sum + 1)\n        dp[0] = True\n        \n        for num in nums:\n            for s in range(subset_sum, num - 1, -1):\n                if dp[s - num]:\n                    dp[s] = True\n        \n        return dp[subset_sum]\n```\n\n","TypedCode":"\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        dp = [False] * (subset_sum + 1)\n        dp[0] = True\n        \n        for num in nums:\n            for s in range(subset_sum, num - 1, -1):\n                if dp[s - num]:\n                    dp[s] = True\n        \n        return dp[subset_sum]\n","Model":"se-gpt-4o","Latency":7165106818,"SolvedAt":"2025-09-05T23:52:09.372828593+02:00","PromptTokens":3235,"OutputTokens":703}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"416","typed_code":"\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        if total_sum % 2 != 0:\n            return False\n        \n        subset_sum = total_sum // 2\n        dp = [False] * (subset_sum + 1)\n        dp[0] = True\n        \n        for num in nums:\n            for s in range(subset_sum, num - 1, -1):\n                if dp[s - num]:\n                    dp[s] = True\n        \n        return dp[subset_sum]\n"},"SubmissionId":1760936902,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:21:22.878263649+02:00"}}}
