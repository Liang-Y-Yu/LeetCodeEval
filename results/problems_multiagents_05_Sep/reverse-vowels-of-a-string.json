{"Question":{"Data":{"Question":{"questionFrontendId":"345","questionId":"345","Content":"<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p>\n\n<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in both lower and upper cases, more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;IceCreAm&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;AceCreIm&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The vowels in <code>s</code> are <code>[&#39;I&#39;, &#39;e&#39;, &#39;e&#39;, &#39;A&#39;]</code>. On reversing the vowels, s becomes <code>&quot;AceCreIm&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;leotcede&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li>\n</ul>\n","SampleTestCase":"\"IceCreAm\"","ExampleTestcases":"\"IceCreAm\"\n\"leetcode\"","Difficulty":"Easy","Title":"Reverse Vowels of a String","TitleSlug":"reverse-vowels-of-a-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1373358, \"totalSubmissionRaw\": 2324125, \"acRate\": \"59.1%\"}","Likes":5099,"Dislikes":2844,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string reverseVowels(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String reverseVowels(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def reverseVowels(self, s: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* reverseVowels(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string ReverseVowels(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseVowels = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function reverseVowels(s: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseVowels($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func reverseVowels(_ s: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun reverseVowels(s: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String reverseVowels(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func reverseVowels(s string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {String}\ndef reverse_vowels(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def reverseVowels(s: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn reverse_vowels(s: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (reverse-vowels s)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec reverse_vowels(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreverse_vowels(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec reverse_vowels(s :: String.t) :: String.t\n  def reverse_vowels(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:35:40.615853847+02:00","AcRate":"59.1","TotalSubmissions":2324125,"TotalAccepted":1373358,"AcceptanceRate":0.5909139998924327,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/reverse-vowels-of-a-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = set('aeiouAEIOU')\n        vowel_positions = []\n        vowel_chars = []\n        \n        # Collect positions and characters of vowels in the string\n        for i, char in enumerate(s):\n            if char in vowels:\n                vowel_positions.append(i)\n                vowel_chars.append(char)\n        \n        # Reverse the order of vowel characters\n        vowel_chars.reverse()\n        \n        # Convert the string to a list to modify it\n        s_list = list(s)\n        \n        # Place reversed vowels back into their original positions\n        for i, pos in enumerate(vowel_positions):\n            s_list[pos] = vowel_chars[i]\n        \n        # Join list to form the resulting string\n        return ''.join(s_list)\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        # Define a set of vowels for quick lookup\n        vowels = set('aeiouAEIOU')\n        \n        # Convert the string to a list for easy manipulation\n        s_list = list(s)\n        \n        # Initialize two pointers, one at the beginning, one at the end\n        left, right = 0, len(s_list) - 1\n        \n        # Use a two-pointer approach to swap vowels\n        while left < right:\n            # Move left pointer until a vowel is found\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            \n            # Move right pointer until a vowel is found\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            \n            # Swap found vowels\n            if left < right:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n        \n        # Join the list back into a string and return\n        return ''.join(s_list)\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = set('aeiouAEIOU')\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        while left < right:\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            if left < right:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n        return ''.join(s_list)\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = set('aeiouAEIOU')\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        \n        while left < right:\n            # Find the next vowel from the left side\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            \n            # Find the next vowel from the right side\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            \n            # If both positions contain vowels, swap them\n            if left < right:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n        \n        # Recompose the string from the list\n        return ''.join(s_list)\n```\n\n","TypedCode":"\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = set('aeiouAEIOU')\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        while left < right:\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            if left < right:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n        return ''.join(s_list)\n","Model":"se-gpt-4o","Latency":6982839386,"SolvedAt":"2025-09-05T23:53:03.686184644+02:00","PromptTokens":3188,"OutputTokens":739}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"345","typed_code":"\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = set('aeiouAEIOU')\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        while left < right:\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            if left < right:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n        return ''.join(s_list)\n"},"SubmissionId":1760937582,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:23:27.375431966+02:00"}}}
