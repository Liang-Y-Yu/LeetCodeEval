{"Question":{"Data":{"Question":{"questionFrontendId":"290","questionId":"290","Content":"<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>. Specifically:</p>\n\n<ul>\n\t<li>Each letter in <code>pattern</code> maps to <strong>exactly</strong> one unique word in <code>s</code>.</li>\n\t<li>Each unique word in <code>s</code> maps to <strong>exactly</strong> one letter in <code>pattern</code>.</li>\n\t<li>No two letters map to the same word, and no two words map to the same letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bijection can be established as:</p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code> maps to <code>&quot;dog&quot;</code>.</li>\n\t<li><code>&#39;b&#39;</code> maps to <code>&quot;cat&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n","SampleTestCase":"\"abba\"\n\"dog cat cat dog\"","ExampleTestcases":"\"abba\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog cat cat fish\"\n\"aaaa\"\n\"dog cat cat dog\"","Difficulty":"Easy","Title":"Word Pattern","TitleSlug":"word-pattern","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"992.9K\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 992928, \"totalSubmissionRaw\": 2292304, \"acRate\": \"43.3%\"}","Likes":7768,"Dislikes":1113,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool wordPattern(char* pattern, char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function wordPattern(pattern: string, s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool wordPattern(String pattern, String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func wordPattern(pattern string, s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (word-pattern pattern s)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\nword_pattern(Pattern, S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern(pattern, s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:37:58.171954352+02:00","AcRate":"43.3","TotalSubmissions":2292304,"TotalAccepted":992928,"AcceptanceRate":0.4331572077699991,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/word-pattern/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        # Early check: pattern and words must be of the same length\n        if len(pattern) != len(words):\n            return False\n        \n        # Create mappings from pattern to words and words to pattern\n        pattern_to_word = {}\n        word_to_pattern = {}\n        \n        for p, w in zip(pattern, words):\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n        \n        return True\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        # Step 1: Split the given string s into a list of words\n        words = s.split()\n        \n        # Step 2: Early check - pattern and words must be of the same length\n        if len(pattern) != len(words):\n            return False\n        \n        # Step 3: Initialize two empty dictionaries for the bijection mapping\n        # pattern_to_word maps letters in pattern to words in s\n        # word_to_pattern maps words in s to letters in pattern\n        pattern_to_word = {}\n        word_to_pattern = {}\n        \n        # Step 4: Iterate over pairs of letters and words\n        for p, w in zip(pattern, words):\n            # Check if there is a mismatch in established patterns\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n\n            # Check if there is a mismatch in established words\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n\n        # Step 5: If all checks pass, return True\n        return True\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        pattern_to_word = {}\n        word_to_pattern = {}\n        for p, w in zip(pattern, words):\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n        return True\n```\n\n=== VERIFICATION ===\nThe provided implementation of the solution to the problem seems correct and meets all the specifications defined in the problem statement. Here's a detailed verification report based on the criteria provided:\n\n1. **Correctness**: \n   - The implemented code correctly follows the designed algorithm. It maps each character in `pattern` to a word in `s` and vice versa, ensuring a bijection with checks for mismatches. If any mismatch occurs, it promptly returns `False`.\n\n2. **Edge Cases**:\n   - The solution handles edge cases properly. Specifically:\n     - If the lengths of `pattern` and the list of words obtained from `s` do not match, it returns `False`, which is an early check.\n     - It handles scenarios where repeated pattern characters should map to repeated words, ensuring the bijective relationship is maintained throughout.\n\n3. **Complexity**:\n   - The algorithm has a time complexity of O(n), where n is the length of the `pattern` or the number of words in `s`. This is due to a single iteration through the data structures used for mapping.\n   - The space complexity is O(m), where m is the number of unique characters or words, due to the two dictionaries used to store mappings.\n\n4. **Code Quality**:\n   - The code is clean, with well-structured logic and readable conditions. It efficiently splits the input string and uses dictionaries to maintain the mappings between pattern characters and words from `s`.\n\n5. **Test Cases**:\n   - The code correctly solves the provided example test cases:\n     - Example 1: Returns `True` for matching pattern-word relationships.\n     - Example 2 & 3: Returns `False` because of mismatched relationships.\n   - These examples illustrate various scenarios of matching and non-matching pattern-word relationships.\n\n6. **Potential Issues**:\n   - There are no bugs or logical errors identified, and the code works as expected.\n   - The function signature and class name follow the instructions, remaining unchanged.\n\nGiven the assessment, the solution is verified as correct and complete. Below is the code, which was already fully furnished:\n\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        pattern_to_word = {}\n        word_to_pattern = {}\n        for p, w in zip(pattern, words):\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n        return True\n```\n\nThis code is ready for execution and should correctly verify if a string `s` follows the same pattern as described by `pattern`.\n\n","TypedCode":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        pattern_to_word = {}\n        word_to_pattern = {}\n        for p, w in zip(pattern, words):\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n        return True\n","Model":"se-gpt-4o","Latency":9897702465,"SolvedAt":"2025-09-05T23:56:40.928981514+02:00","PromptTokens":3713,"OutputTokens":1178}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"290","typed_code":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        pattern_to_word = {}\n        word_to_pattern = {}\n        for p, w in zip(pattern, words):\n            if p in pattern_to_word:\n                if pattern_to_word[p] != w:\n                    return False\n            else:\n                pattern_to_word[p] = w\n            if w in word_to_pattern:\n                if word_to_pattern[w] != p:\n                    return False\n            else:\n                word_to_pattern[w] = p\n        return True\n"},"SubmissionId":1760940324,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:30:35.299550074+02:00"}}}
