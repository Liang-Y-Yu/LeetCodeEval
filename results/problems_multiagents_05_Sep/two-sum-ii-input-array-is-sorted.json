{"Question":{"Data":{"Question":{"questionFrontendId":"167","questionId":"167","Content":"<p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length</code>.</p>\n\n<p>Return<em> the indices of the two numbers, </em><code>index<sub>1</sub></code><em> and </em><code>index<sub>2</sub></code><em>, <strong>added by one</strong> as an integer array </em><code>[index<sub>1</sub>, index<sub>2</sub>]</code><em> of length 2.</em></p>\n\n<p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p>\n\n<p>Your solution must use only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n\t<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n\t<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li>\n</ul>\n","SampleTestCase":"[2,7,11,15]\n9","ExampleTestcases":"[2,7,11,15]\n9\n[2,3,4]\n6\n[-1,0]\n-1","Difficulty":"Medium","Title":"Two Sum II - Input Array Is Sorted","TitleSlug":"two-sum-ii-input-array-is-sorted","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.9M\", \"totalSubmission\": \"4.5M\", \"totalAcceptedRaw\": 2903328, \"totalSubmissionRaw\": 4549417, \"acRate\": \"63.8%\"}","Likes":12832,"Dislikes":1490,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] TwoSum(int[] numbers, int target) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function twoSum(numbers: number[], target: number): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $numbers\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($numbers, $target) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func twoSum(_ numbers: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> twoSum(List<int> numbers, int target) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func twoSum(numbers []int, target int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} numbers\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(numbers, target)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def twoSum(numbers: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn two_sum(numbers: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (two-sum numbers target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec two_sum(Numbers :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Numbers, Target) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec two_sum(numbers :: [integer], target :: integer) :: [integer]\n  def two_sum(numbers, target) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:37:39.60253374+02:00","AcRate":"63.8","TotalSubmissions":4549417,"TotalAccepted":2903328,"AcceptanceRate":0.6381758365962056,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        # Initialize two pointers\n        left = 0\n        right = len(numbers) - 1\n        \n        # Use a while loop to find the two numbers that add up to the target\n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                # Since the problem specifies 1-indexed return\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        # Initialize two pointers\n        left = 0\n        right = len(numbers) - 1\n        \n        # Use a while loop to find the two numbers that add up to the target\n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                # Since the problem specifies 1-indexed return\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the two-pointer technique to find two numbers in a sorted array that sum to the target. The pointers `left` and `right` are adjusted based on whether the `current_sum` is less than or greater than the `target`.\n\n2. **Edge Cases**: The implemented code assumes that there is exactly one solution, as specified in the problem statement. It correctly handles arrays with two elements and negative numbers, as demonstrated by the examples.\n\n3. **Complexity**: The time complexity is O(n), where n is the number of elements in the `numbers` list. This is efficient for the problem constraints. Space complexity is O(1) (constant space), as required.\n\n4. **Code Quality**: The code is clean, readable, and concise. The usage of meaningful variable names (`left`, `right`, `current_sum`) improves understandability. Proper use of indexing ensures the return of 1-indexed positions.\n\n5. **Test Cases**: The code has been checked against the provided examples and produces the correct outputs:\n   - Input: `[2,7,11,15], target=9`  Output: `[1,2]`\n   - Input: `[2,3,4], target=6`       Output: `[1,3]`\n   - Input: `[-1,0], target=-1`       Output: `[1,2]`\n\n6. **Potential Issues**: There are no apparent bugs or logical errors in the implementation. The code assumes that the test cases provided always have a solution, which is guaranteed by the problem statement.\n\nOverall, the implemented solution successfully meets the problem's requirements, handles the provided test cases correctly, and adheres to constraints with efficient execution.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n","Model":"se-gpt-4o","Latency":7509521175,"SolvedAt":"2025-09-05T23:55:48.953274459+02:00","PromptTokens":3829,"OutputTokens":869}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"167","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n"},"SubmissionId":1760939629,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:28:38.825867756+02:00"}}}
