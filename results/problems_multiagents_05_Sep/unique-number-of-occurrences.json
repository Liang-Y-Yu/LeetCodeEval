{"Question":{"Data":{"Question":{"questionFrontendId":"1207","questionId":"1319","Content":"<p>Given an array of integers <code>arr</code>, return <code>true</code> <em>if the number of occurrences of each value in the array is <strong>unique</strong> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,1,1,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-3,0,1,-3,1,1,1,-3,10,0]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","SampleTestCase":"[1,2,2,1,1,3]","ExampleTestcases":"[1,2,2,1,1,3]\n[1,2]\n[-3,0,1,-3,1,1,1,-3,10,0]","Difficulty":"Easy","Title":"Unique Number of Occurrences","TitleSlug":"unique-number-of-occurrences","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"890.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 890909, \"totalSubmissionRaw\": 1135951, \"acRate\": \"78.4%\"}","Likes":5414,"Dislikes":153,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool uniqueOccurrences(vector<int>& arr) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean uniqueOccurrences(int[] arr) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def uniqueOccurrences(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool uniqueOccurrences(int* arr, int arrSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool UniqueOccurrences(int[] arr) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function uniqueOccurrences(arr: number[]): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function uniqueOccurrences($arr) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func uniqueOccurrences(_ arr: [Int]) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun uniqueOccurrences(arr: IntArray): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool uniqueOccurrences(List<int> arr) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func uniqueOccurrences(arr []int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} arr\n# @return {Boolean}\ndef unique_occurrences(arr)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def uniqueOccurrences(arr: Array[Int]): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn unique_occurrences(arr: Vec<i32>) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (unique-occurrences arr)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec unique_occurrences(Arr :: [integer()]) -> boolean().\nunique_occurrences(Arr) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec unique_occurrences(arr :: [integer]) :: boolean\n  def unique_occurrences(arr) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:37:27.702137662+02:00","AcRate":"78.4","TotalSubmissions":1135951,"TotalAccepted":890909,"AcceptanceRate":0.7842847094637004,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/unique-number-of-occurrences/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        # Use a dictionary to count occurrences of each number in the array\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        \n        # Retrieve all occurrences and check if they are unique\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        # Step 1: Use a dictionary to count occurrences of each number in the array\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n\n        # Step 2: Retrieve all occurrences \n        occurrences = list(occurrence_map.values())\n\n        # Step 3: Check if all occurrences are unique\n        # Convert occurrences to a set and compare its length with the list\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\nVerification Report:\n\n1. **Correctness**:\n   - The code correctly implements the designed algorithm. It uses a dictionary to count occurrences of each integer in the array and then checks if these occurrence counts are unique by comparing the length of the list of occurrences with the length of the set formed from this list.\n\n2. **Edge Cases**:\n   - The solution handles various edge cases effectively, including arrays with a single element, multiple elements with the same count, negative numbers, and zeros. Given the constraints (1 <= arr.length <= 1000 and -1000 <= arr[i] <= 1000), the code is expected to handle the full range of possible input values.\n\n3. **Complexity**:\n   - The time complexity is O(n), where n is the length of the array. This is due to the single pass required to populate the dictionary and another pass to check the uniqueness of occurrence counts.\n   - The space complexity is O(n) due to the storage of occurrence counts in the dictionary.\n\n4. **Code Quality**:\n   - The code is clean and readable, following best practices with appropriate variable names and logical structuring. It efficiently utilizes Python's dictionary and set data structures.\n\n5. **Test Cases**:\n   - The provided examples are correctly handled by the code:\n     - Example 1: `[1,2,2,1,1,3]` returns `true` as occurrences are [3, 2, 1], all unique.\n     - Example 2: `[1,2]` returns `false` as occurrences are [1, 1], not unique.\n     - Example 3: `[-3,0,1,-3,1,1,1,-3,10,0]` returns `true` as occurrences are [3, 2, 4, 1], all unique.\n\n6. **Potential Issues**:\n   - There are no logical errors or bugs in the implementation. The solution is optimal for the problem constraints.\n\nOverall, the implemented solution is correct, efficient, and follows good coding practices. It passes all provided test cases and handles expected edge cases within given constraints.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n","Model":"se-gpt-4o","Latency":8009678954,"SolvedAt":"2025-09-05T23:56:02.295899056+02:00","PromptTokens":2865,"OutputTokens":887}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1319","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n"},"SubmissionId":1760939822,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:29:12.345725002+02:00"}}}
