{"Question":{"Data":{"Question":{"questionFrontendId":"300","questionId":"300","Content":"<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n","SampleTestCase":"[10,9,2,5,3,7,101,18]","ExampleTestcases":"[10,9,2,5,3,7,101,18]\n[0,1,0,3,2,3]\n[7,7,7,7,7,7,7]","Difficulty":"Medium","Title":"Longest Increasing Subsequence","TitleSlug":"longest-increasing-subsequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"4M\", \"totalAcceptedRaw\": 2330561, \"totalSubmissionRaw\": 3995528, \"acRate\": \"58.3%\"}","Likes":22197,"Dislikes":492,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int lengthOfLIS(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LengthOfLIS(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function lengthOfLIS(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function lengthOfLIS($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func lengthOfLIS(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun lengthOfLIS(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int lengthOfLIS(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func lengthOfLIS(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef length_of_lis(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn length_of_lis(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (length-of-lis nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec length_of_lis(Nums :: [integer()]) -> integer().\nlength_of_lis(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec length_of_lis(nums :: [integer]) :: integer\n  def length_of_lis(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:32:39.051967831+02:00","AcRate":"58.3","TotalSubmissions":3995528,"TotalAccepted":2330561,"AcceptanceRate":0.5832923708706333,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-increasing-subsequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Tail array will store the smallest tail of all increasing subsequences\n        # having length i+1 in tail[i].\n        tail = []\n        \n        for num in nums:\n            pos = bisect_left(tail, num)  # Find the insertion point\n            \n            # If num is larger than any element in tail\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        \n        return len(tail)\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Tail array will store the smallest tail of all increasing subsequences\n        # having length i+1 in tail[i].\n        tail = []\n        \n        for num in nums:\n            pos = bisect_left(tail, num)  # Find the insertion point\n            \n            # If num is larger than any element in tail\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        \n        return len(tail)\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n```\n\n=== VERIFICATION ===\nTo verify the implemented solution, I will evaluate the solution code based on the criteria provided:\n\n1. **Correctness**: The solution correctly uses the dynamic programming approach combined with binary search to solve the problem in O(n log(n)) time complexity. It maintains a `tail` list where the `i-th` position contains the smallest tail value of all increasing subsequences of length `i+1`. The `bisect_left` function finds an insertion position for each number while iterating over `nums`, and appropriately updates the `tail` list. The length of the `tail` list at the end represents the length of the longest increasing subsequence.\n\n2. **Edge Cases**: The code handles the edge case where the input list `nums` is empty by returning 0. Given constraints ensure the length of `nums` is at least 1, so this edge case is primarily a guard against incorrect inputs. It also correctly handles arrays with both positive and negative numbers and arrays with repeated values, which is evident in the examples tested.\n\n3. **Complexity**: The code runs in O(n log(n)) time complexity due to the usage of binary search within the main loop iterating over `nums`, which is the optimal complexity for this problem. The space complexity is O(n) because of the `tail` list.\n\n4. **Code Quality**: The code is clean, readable, and follows good practices. The use of meaningful variable names (`tail`, `pos`, `num`) and separation of logic into distinct steps promotes clarity.\n\n5. **Test Cases**: The solution is tested against three examples from the problem description:\n   - `[10,9,2,5,3,7,101,18]` should return 4, which the code correctly outputs.\n   - `[0,1,0,3,2,3]` should return 4, which the code correctly outputs.\n   - `[7,7,7,7,7,7,7]` should return 1, which the code correctly outputs.\n   \n   All provided test cases are correctly handled by the solution.\n\n6. **Potential Issues**: There are no apparent bugs or logical errors. The approach is optimal given the follow-up requirement of O(n log(n)) complexity.\n\nIn conclusion, the solution is correct, efficient, handles all relevant edge cases, and is implemented with high-quality code. Therefore, the solution is valid as presented.\n\nHere is the verified solution:\n\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n```\n\n","TypedCode":"\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n","Model":"se-gpt-4o","Latency":8591313058,"SolvedAt":"2025-09-05T23:48:07.932388551+02:00","PromptTokens":3020,"OutputTokens":985}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"300","typed_code":"\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n"},"SubmissionId":1760934159,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:13:47.245885242+02:00"}}}
