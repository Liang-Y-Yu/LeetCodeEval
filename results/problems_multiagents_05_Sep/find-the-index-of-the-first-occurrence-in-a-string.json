{"Question":{"Data":{"Question":{"questionFrontendId":"28","questionId":"28","Content":"<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n","SampleTestCase":"\"sadbutsad\"\n\"sad\"","ExampleTestcases":"\"sadbutsad\"\n\"sad\"\n\"leetcode\"\n\"leeto\"","Difficulty":"Easy","Title":"Find the Index of the First Occurrence in a String","TitleSlug":"find-the-index-of-the-first-occurrence-in-a-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.5M\", \"totalSubmission\": \"7.8M\", \"totalAcceptedRaw\": 3545323, \"totalSubmissionRaw\": 7804198, \"acRate\": \"45.4%\"}","Likes":7039,"Dislikes":529,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUy","Name":"String Matching","Slug":"string-matching"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int strStr(char* haystack, char* needle) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function strStr(haystack: string, needle: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func strStr(haystack string, needle string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:30:27.127438098+02:00","AcRate":"45.4","TotalSubmissions":7804198,"TotalAccepted":3545323,"AcceptanceRate":0.45428409171576634,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        # Get the lengths of haystack and needle\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        # Early exit if needle is longer than haystack\n        if needle_len > haystack_len:\n            return -1\n        \n        # Iterate through the haystack up to a point where the remaining part to search is at least the length of needle\n        for i in range(haystack_len - needle_len + 1):\n            # Check if the current slice of haystack matches needle\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        # Early exit if needle is longer than haystack\n        if needle_len > haystack_len:\n            return -1\n        \n        # Iterate through haystack to find the first occurrence of needle\n        for i in range(haystack_len - needle_len + 1):\n            # Check if the substring in haystack matches needle\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        if needle_len > haystack_len:\n            return -1\n        \n        for i in range(haystack_len - needle_len + 1):\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        # Early exit if needle is longer than haystack\n        if needle_len > haystack_len:\n            return -1\n        \n        # Iterate through the haystack to find the first occurrence of needle\n        for i in range(haystack_len - needle_len + 1):\n            # Check if the substring in haystack matches needle\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n```\n\n","TypedCode":"\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        if needle_len > haystack_len:\n            return -1\n        \n        for i in range(haystack_len - needle_len + 1):\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n","Model":"se-gpt-4o","Latency":5288194268,"SolvedAt":"2025-09-05T23:44:54.882078748+02:00","PromptTokens":2983,"OutputTokens":526}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"28","typed_code":"\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        haystack_len = len(haystack)\n        needle_len = len(needle)\n        \n        if needle_len > haystack_len:\n            return -1\n        \n        for i in range(haystack_len - needle_len + 1):\n            if haystack[i:i+needle_len] == needle:\n                return i\n        \n        return -1\n"},"SubmissionId":1760931763,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:07:25.156480647+02:00"}}}
