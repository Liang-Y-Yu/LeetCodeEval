{"Question":{"Data":{"Question":{"questionFrontendId":"392","questionId":"392","Content":"<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?","SampleTestCase":"\"abc\"\n\"ahbgdc\"","ExampleTestcases":"\"abc\"\n\"ahbgdc\"\n\"axc\"\n\"ahbgdc\"","Difficulty":"Easy","Title":"Is Subsequence","TitleSlug":"is-subsequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"4.5M\", \"totalAcceptedRaw\": 2201209, \"totalSubmissionRaw\": 4532156, \"acRate\": \"48.6%\"}","Likes":10469,"Dislikes":590,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isSubsequence(char* s, char* t) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsSubsequence(string s, string t) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isSubsequence(s: string, t: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isSubsequence($s, $t) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isSubsequence(String s, String t) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isSubsequence(s string, t string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_subsequence(s, t)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_subsequence(s: String, t: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-subsequence s t)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_subsequence(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_subsequence(S, T) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_subsequence(s :: String.t, t :: String.t) :: boolean\n  def is_subsequence(s, t) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:31:44.642076865+02:00","AcRate":"48.6","TotalSubmissions":4532156,"TotalAccepted":2201209,"AcceptanceRate":0.4856869445800189,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/is-subsequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        # Two pointers technique\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        # Algorithm Choice: Two pointers technique\n        # Step-by-Step Approach:\n        # 1. Initialize two pointers for s and t, i = 0 and j = 0.\n        # 2. Traverse through the string t using pointer j.\n        # 3. If the character at j in string t matches the character at i in string s, move the pointer i forward.\n        # 4. Always move the pointer j forward.\n        # 5. If i reaches the end of s, return true. Otherwise, return false.\n        \n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)\n\n# Follow-Up for Large Number of Subsequences:\n# Suppose there are lots of incoming s1, s2, ..., sk where k >= 10^9.\n# In this scenario, we can preprocess the string t to create a map of each character appearing in t to its list of indices. \n# Using this map, for each incoming s_i, we use a binary search approach to determine if s_i is a subsequence of t.\n\nimport bisect\n\nclass SolutionWithPreprocessing:\n    def preprocess(self, t: str):\n        # Data Structures: A dictionary with characters as keys and lists of indices as values\n        self.char_indices_map = {}\n        for index, char in enumerate(t):\n            if char not in self.char_indices_map:\n                self.char_indices_map[char] = []\n            self.char_indices_map[char].append(index)\n\n    def isSubsequence(self, s: str, t: str) -> bool:\n        current_index_in_t = -1\n        \n        for char in s:\n            if char not in self.char_indices_map:\n                return False\n            \n            indices_list = self.char_indices_map[char]\n            next_index_pos = bisect.bisect_right(indices_list, current_index_in_t)\n            \n            if next_index_pos == len(indices_list):\n                return False\n            \n            current_index_in_t = indices_list[next_index_pos]\n        \n        return True\n\n# Time Complexity: O(n) for the simple two-pointer technique, where n is the length of t.\n# Space Complexity: O(1) for the simple two-pointer technique.\n# Follow-Up:\n# Preprocessing Time Complexity: O(m) where m is the length of t, to create the map.\n# Query Time Complexity: O(log(n) * len(s)) for each s, where log(n) is for searching in indices list and len(s) is the length of s.\n# Space Complexity: O(m) to store character indices map for t.\n```\n\n=== IMPLEMENTATION ===\n```python\nimport bisect\n\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\nclass SolutionWithPreprocessing:\n    def preprocess(self, t: str):\n        self.char_indices_map = {}\n        for index, char in enumerate(t):\n            if char not in self.char_indices_map:\n                self.char_indices_map[char] = []\n            self.char_indices_map[char].append(index)\n\n    def isSubsequence(self, s: str, t: str) -> bool:\n        current_index_in_t = -1\n        for char in s:\n            if char not in self.char_indices_map:\n                return False\n            indices_list = self.char_indices_map[char]\n            next_index_pos = bisect.bisect_right(indices_list, current_index_in_t)\n            if next_index_pos == len(indices_list):\n                return False\n            current_index_in_t = indices_list[next_index_pos]\n        return True\n```\n\n=== VERIFICATION ===\n```python\nimport bisect\n\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\nclass SolutionWithPreprocessing:\n    def preprocess(self, t: str):\n        self.char_indices_map = {}\n        for index, char in enumerate(t):\n            if char not in self.char_indices_map:\n                self.char_indices_map[char] = []\n            self.char_indices_map[char].append(index)\n\n    def isSubsequence(self, s: str, t: str) -> bool:\n        current_index_in_t = -1\n        for char in s:\n            if char not in self.char_indices_map:\n                return False\n            indices_list = self.char_indices_map[char]\n            next_index_pos = bisect.bisect_right(indices_list, current_index_in_t)\n            if next_index_pos == len(indices_list):\n                return False\n            current_index_in_t = indices_list[next_index_pos]\n        return True\n```\n\n","TypedCode":"\nimport bisect\n\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\nclass SolutionWithPreprocessing:\n    def preprocess(self, t: str):\n        self.char_indices_map = {}\n        for index, char in enumerate(t):\n            if char not in self.char_indices_map:\n                self.char_indices_map[char] = []\n            self.char_indices_map[char].append(index)\n\n    def isSubsequence(self, s: str, t: str) -> bool:\n        current_index_in_t = -1\n        for char in s:\n            if char not in self.char_indices_map:\n                return False\n            indices_list = self.char_indices_map[char]\n            next_index_pos = bisect.bisect_right(indices_list, current_index_in_t)\n            if next_index_pos == len(indices_list):\n                return False\n            current_index_in_t = indices_list[next_index_pos]\n        return True\n","Model":"se-gpt-4o","Latency":9273349250,"SolvedAt":"2025-09-05T23:46:40.592583055+02:00","PromptTokens":4067,"OutputTokens":1177}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"392","typed_code":"\nimport bisect\n\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\nclass SolutionWithPreprocessing:\n    def preprocess(self, t: str):\n        self.char_indices_map = {}\n        for index, char in enumerate(t):\n            if char not in self.char_indices_map:\n                self.char_indices_map[char] = []\n            self.char_indices_map[char].append(index)\n\n    def isSubsequence(self, s: str, t: str) -> bool:\n        current_index_in_t = -1\n        for char in s:\n            if char not in self.char_indices_map:\n                return False\n            indices_list = self.char_indices_map[char]\n            next_index_pos = bisect.bisect_right(indices_list, current_index_in_t)\n            if next_index_pos == len(indices_list):\n                return False\n            current_index_in_t = indices_list[next_index_pos]\n        return True\n"},"SubmissionId":1760933074,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:10:56.253320965+02:00"}}}
