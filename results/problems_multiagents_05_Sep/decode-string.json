{"Question":{"Data":{"Question":{"questionFrontendId":"394","questionId":"394","Content":"<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n","SampleTestCase":"\"3[a]2[bc]\"","ExampleTestcases":"\"3[a]2[bc]\"\n\"3[a2[c]]\"\n\"2[abc]3[cd]ef\"","Difficulty":"Medium","Title":"Decode String","TitleSlug":"decode-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 1066090, \"totalSubmissionRaw\": 1732804, \"acRate\": \"61.5%\"}","Likes":13562,"Dislikes":677,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjMx","Name":"Recursion","Slug":"recursion"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string decodeString(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String decodeString(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def decodeString(self, s: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* decodeString(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string DecodeString(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function decodeString(s: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func decodeString(_ s: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun decodeString(s: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String decodeString(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func decodeString(s string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {String}\ndef decode_string(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn decode_string(s: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (decode-string s)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec decode_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ndecode_string(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec decode_string(s :: String.t) :: String.t\n  def decode_string(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:29:27.100383219+02:00","AcRate":"61.5","TotalSubmissions":1732804,"TotalAccepted":1066090,"AcceptanceRate":0.6152398078490123,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/decode-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n\n=== DESIGN ===\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        # Algorithm Choice: Use a stack-based approach to decode the string iteratively.\n        \n        # Step-by-Step Approach:\n        # 1. Initialize a stack to keep track of the current strings and repeat numbers.\n        # 2. Use a variable current_string to build the string as we parse the input.\n        # 3. Use a variable current_num to build multi-digit repeat amounts.\n        # 4. Iterate over each character in the string:\n        #    - If it's a digit, update current_num.\n        #    - If it's '[', push current_string and current_num into the stack, reset current_string, and current_num.\n        #    - If it's ']', pop from the stack to get the previous state, repeat the current_string current_num times and attach to the previous.\n        #    - Otherwise, append the character to current_string.\n        # 5. After parsing, return the current_string which will hold the fully decoded string.\n\n        # Data Structures:\n        # - A stack to handle nested encodings.\n        \n        # Time Complexity: O(n), where n is the length of the input string, as each character is processed once.\n        \n        # Space Complexity: O(n), for the stack to store encoded parts.\n        \n        stack = []\n        current_string = \"\"\n        current_num = 0\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n```\n\n","TypedCode":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n","Model":"se-gpt-4o","Latency":7091995915,"SolvedAt":"2025-09-05T23:43:12.748289405+02:00","PromptTokens":3814,"OutputTokens":776}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"394","typed_code":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n"},"SubmissionId":1760930451,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:03:58.286825867+02:00"}}}
