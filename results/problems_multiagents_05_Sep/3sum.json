{"Question":{"Data":{"Question":{"questionFrontendId":"15","questionId":"15","Content":"<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","SampleTestCase":"[-1,0,1,2,-1,-4]","ExampleTestcases":"[-1,0,1,2,-1,-4]\n[0,1,1]\n[0,0,0]","Difficulty":"Medium","Title":"3Sum","TitleSlug":"3sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"5.1M\", \"totalSubmission\": \"13.5M\", \"totalAcceptedRaw\": 5092276, \"totalSubmissionRaw\": 13535533, \"acRate\": \"37.6%\"}","Likes":33900,"Dislikes":3167,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function threeSum(nums: number[]): number[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func threeSum(nums []int) [][]int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:27:33.557347048+02:00","AcRate":"37.6","TotalSubmissions":13535533,"TotalAccepted":5092276,"AcceptanceRate":0.37621540282159555,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/3sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        triplets = []\n\n        for i in range(n):\n            # Avoid duplicate values for the first element\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n\n            target = -nums[i]\n            left, right = i + 1, n - 1\n\n            while left < right:\n                current_sum = nums[left] + nums[right]\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    # Avoid duplicate values for the second and third elements\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n\n        return triplets\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        # Step 1: Sort the array to facilitate avoiding duplicates and using two-pointers\n        nums.sort()\n        n = len(nums)\n        triplets = []\n\n        for i in range(n):\n            # Step 2: Skip the current element if it's the same as the previous one to avoid duplicate triplets\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n\n            # Step 3: Initialize two pointers\n            target = -nums[i]  # The target sum we want the two other numbers to reach\n            left, right = i + 1, n - 1  # Left starts just after 'i' and right starts at the end\n\n            # Step 4: Move the pointers based on the sum comparison\n            while left < right:\n                current_sum = nums[left] + nums[right]\n\n                # Step 5: Check if we found a valid triplet\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n\n                    # Move pointers inward, avoiding duplicates\n                    left += 1\n                    right -= 1\n\n                    # Skip duplicate elements for second and third positions\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n\n        return triplets\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        triplets = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            target = -nums[i]\n            left, right = i + 1, n - 1\n            while left < right:\n                current_sum = nums[left] + nums[right]\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return triplets\n```\n\n=== VERIFICATION ===\nThe code provided implements the solution for the \"Three Sum\" problem correctly using the two-pointer approach. Here's the verification based on the outlined criteria:\n\n1. **Correctness**:\n   - The code correctly sorts the input list and uses a loop to select the first element of each potential triplet. For each selected element, it uses the two-pointer technique to find two other elements that, together with the selected one, sum up to zero.\n   - The check to avoid duplicate triplets is handled appropriately by skipping elements that are the same as the previous element.\n\n2. **Edge Cases**:\n   - The code handles edge cases such as:\n     - An empty array, which won't enter the loop since the length check will prevent action.\n     - Arrays with fewer than three elements will naturally be handled by the initial condition `3 <= nums.length <= 3000`.\n     - Duplicate numbers (both within the triplet and multiple identical triplets) are managed by the condition checks within the loops.\n\n3. **Complexity**:\n   - The sort operation takes \\(O(n \\log n)\\), and the subsequent loop runs in \\(O(n^2)\\), making the total complexity \\(O(n^2)\\) which is optimal for this problem.\n\n4. **Code Quality**:\n   - The code is clean and readable. It uses descriptive variable names and optimizes the use of two-pointer methodology.\n   - The use of while loops and conditionals is efficient and correctly implemented.\n\n5. **Test Cases**:\n   - The provided examples are handled correctly by the code:\n     - Example 1, [-1,0,1,2,-1,-4], outputs [[-1,-1,2],[-1,0,1]], which is correct.\n     - Example 2, [0,1,1], outputs [], which is correct since no triplet sums to zero.\n     - Example 3, [0,0,0], outputs [[0,0,0]], which is the only valid triplet summing to zero.\n\n6. **Potential Issues**:\n   - No issues, bugs, or logical errors are present in the code.\n   - The implementation is efficient and meets the problem requirements.\n\nGiven these points, the code is verified to be correct, efficient, and well-implemented. Here is the final verified solution:\n\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        triplets = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            target = -nums[i]\n            left, right = i + 1, n - 1\n            while left < right:\n                current_sum = nums[left] + nums[right]\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return triplets\n```\n\n","TypedCode":"\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        triplets = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            target = -nums[i]\n            left, right = i + 1, n - 1\n            while left < right:\n                current_sum = nums[left] + nums[right]\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return triplets\n","Model":"se-gpt-4o","Latency":13657359246,"SolvedAt":"2025-09-05T23:40:26.299711403+02:00","PromptTokens":4384,"OutputTokens":1468}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"15","typed_code":"\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        triplets = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            target = -nums[i]\n            left, right = i + 1, n - 1\n            while left < right:\n                current_sum = nums[left] + nums[right]\n                if current_sum == target:\n                    triplets.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return triplets\n"},"SubmissionId":1760928321,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-05T23:58:32.487800824+02:00"}}}
