{"Question":{"Data":{"Question":{"questionFrontendId":"322","questionId":"322","Content":"<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>\n\n<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>\n\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1,2,5], amount = 11\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 11 = 5 + 5 + 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [2], amount = 3\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[1,2,5]\n11","ExampleTestcases":"[1,2,5]\n11\n[2]\n3\n[1]\n0","Difficulty":"Medium","Title":"Coin Change","TitleSlug":"coin-change","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"5.3M\", \"totalAcceptedRaw\": 2504694, \"totalSubmissionRaw\": 5318725, \"acRate\": \"47.1%\"}","Likes":20274,"Dislikes":517,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def coinChange(self, coins, amount):\n        \"\"\"\n        :type coins: List[int]\n        :type amount: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int coinChange(int* coins, int coinsSize, int amount) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int CoinChange(int[] coins, int amount) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function(coins, amount) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function coinChange(coins: number[], amount: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $amount\n     * @return Integer\n     */\n    function coinChange($coins, $amount) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func coinChange(_ coins: [Int], _ amount: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun coinChange(coins: IntArray, amount: Int): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int coinChange(List<int> coins, int amount) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func coinChange(coins []int, amount int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} coins\n# @param {Integer} amount\n# @return {Integer}\ndef coin_change(coins, amount)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def coinChange(coins: Array[Int], amount: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn coin_change(coins: Vec<i32>, amount: i32) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (coin-change coins amount)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec coin_change(Coins :: [integer()], Amount :: integer()) -> integer().\ncoin_change(Coins, Amount) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec coin_change(coins :: [integer], amount :: integer) :: integer\n  def coin_change(coins, amount) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T23:28:17.621211068+02:00","AcRate":"47.1","TotalSubmissions":5318725,"TotalAccepted":2504694,"AcceptanceRate":0.47092000432434467,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/coin-change/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        # Define a dp array with size amount + 1 and set all values initially to amount + 1\n        # which is larger than any possible number of coins required (since max coin value is 1, at worst we use amount coins)\n        dp = [amount + 1] * (amount + 1)\n        \n        # Base case: If amount is 0, zero coins are needed\n        dp[0] = 0\n        \n        # Iterate over all amounts from 1 to amount\n        for a in range(1, amount + 1):\n            # Try each coin denomination\n            for coin in coins:\n                # If the coin can be used to make up the current amount a\n                if a >= coin:\n                    # Update dp[a] to the minimum coins needed considering current coin\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n                    \n        # If dp[amount] is still amount + 1, it means the amount cannot be made up with given coins\n        return dp[amount] if dp[amount] != amount + 1 else -1\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        # Define a dp array with size amount + 1 and set all values initially to amount + 1\n        # which is larger than any possible number of coins required (since the max coin value is 1, at worst we use amount coins)\n        dp = [amount + 1] * (amount + 1)\n        \n        # Base case: If amount is 0, zero coins are needed\n        dp[0] = 0\n        \n        # Iterate over all amounts from 1 to amount\n        for a in range(1, amount + 1):\n            # Try each coin denomination\n            for coin in coins:\n                # If the coin can be used to make up the current amount a\n                if a >= coin:\n                    # Update dp[a] to the minimum coins needed considering current coin\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n                    \n        # If dp[amount] is still amount + 1, it means the amount cannot be made up with given coins\n        return dp[amount] if dp[amount] != amount + 1 else -1\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n        for a in range(1, amount + 1):\n            for coin in coins:\n                if a >= coin:\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n        return dp[amount] if dp[amount] != amount + 1 else -1\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        # Define a dp array with size amount + 1 and set all values initially to amount + 1\n        dp = [amount + 1] * (amount + 1)\n        \n        # Base case: If amount is 0, zero coins are needed\n        dp[0] = 0\n        \n        # Iterate over all amounts from 1 to amount\n        for a in range(1, amount + 1):\n            # Try each coin denomination\n            for coin in coins:\n                # If the coin can be used to make up the current amount a\n                if a >= coin:\n                    # Update dp[a] to the minimum coins needed considering current coin\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n                    \n        # If dp[amount] is still amount + 1, it means the amount cannot be made up with given coins\n        return dp[amount] if dp[amount] != amount + 1 else -1\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n        for a in range(1, amount + 1):\n            for coin in coins:\n                if a >= coin:\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n        return dp[amount] if dp[amount] != amount + 1 else -1\n","Model":"se-gpt-4o","Latency":7099921498,"SolvedAt":"2025-09-05T23:42:07.264717936+02:00","PromptTokens":3705,"OutputTokens":879}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"322","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n        for a in range(1, amount + 1):\n            for coin in coins:\n                if a >= coin:\n                    dp[a] = min(dp[a], dp[a - coin] + 1)\n        return dp[amount] if dp[amount] != amount + 1 else -1\n"},"SubmissionId":1760929602,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T00:01:41.85656674+02:00"}}}
