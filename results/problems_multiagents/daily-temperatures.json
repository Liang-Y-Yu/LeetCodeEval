{"Question":{"Data":{"Question":{"questionFrontendId":"739","questionId":"739","Content":"<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n","SampleTestCase":"[73,74,75,71,69,72,76,73]","ExampleTestcases":"[73,74,75,71,69,72,76,73]\n[30,40,50,60]\n[30,60,90]","Difficulty":"Medium","Title":"Daily Temperatures","TitleSlug":"daily-temperatures","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1384561, \"totalSubmissionRaw\": 2049726, \"acRate\": \"67.5%\"}","Likes":14029,"Dislikes":356,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU0","Name":"Monotonic Stack","Slug":"monotonic-stack"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& temperatures) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* temperatures, int temperaturesSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] DailyTemperatures(int[] temperatures) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function dailyTemperatures(temperatures: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $temperatures\n     * @return Integer[]\n     */\n    function dailyTemperatures($temperatures) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func dailyTemperatures(_ temperatures: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun dailyTemperatures(temperatures: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> dailyTemperatures(List<int> temperatures) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func dailyTemperatures(temperatures []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} temperatures\n# @return {Integer[]}\ndef daily_temperatures(temperatures)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn daily_temperatures(temperatures: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (daily-temperatures temperatures)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec daily_temperatures(Temperatures :: [integer()]) -> [integer()].\ndaily_temperatures(Temperatures) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\n  def daily_temperatures(temperatures) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:11:14.966089384+02:00","AcRate":"67.5","TotalSubmissions":2049726,"TotalAccepted":1384561,"AcceptanceRate":0.6754858942122021,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/daily-temperatures/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n```\n\n=== VERIFICATION ===\nLet's verify the solution implemented in the code snippet provided.\n\n### Correctness\nThe implemented code correctly solves the problem using a stack-based approach. It iterates over each day's temperature, maintaining the indices of days in a stack where there has been no warmer day found yet. For each day's temperature, it checks against the temperatures at the indices stored in the stack. If the current day's temperature is higher, it calculates the difference in days and updates the result list accordingly.\n\n### Edge Cases\nThe problem constraints ensure that temperatures are between 30 and 100, which eliminates concerns regarding negative or zero temperatures. The implementation correctly handles:\n\n- An array with decreasing temperatures.\n- An array where all temperatures are the same.\n- The minimum length array (length = 1), which would naturally return [0].\n\nThese edge cases are correctly handled by the implementation with the stack mechanism not triggering any modifications for such scenarios.\n\n### Complexity\nThe solution operates in O(n) time complexity, where n is the number of temperature entries. This is because each element is pushed and popped from the stack at most once. The space complexity is O(n) as well due to the storage needs of the result and the stack.\n\n### Code Quality\nThe code is clean and follows best practices. Variable names are meaningful, and the logic is easy to follow:\n\n- `n = len(temperatures)` clearly defines the length of the input array.\n- `answer = [0] * n` initializes the result array with zeros.\n- The use of a stack (`stack = []`) efficiently tracks the indices.\n\n### Test Cases\nBased on the provided examples, the code produces the correct outputs:\n\n1. **Example 1**:\n   - Input: `[73,74,75,71,69,72,76,73]`\n   - Output: `[1,1,4,2,1,1,0,0]`\n   - The implementation correctly calculates waiting days for warmer temperatures.\n\n2. **Example 2**:\n   - Input: `[30,40,50,60]`\n   - Output: `[1,1,1,0]`\n   - The code correctly identifies there is no warmer day post the last day.\n\n3. **Example 3**:\n   - Input: `[30,60,90]`\n   - Output: `[1,1,0]`\n   - Sequential warmer days are acknowledged correctly.\n\n### Potential Issues\nThere are no logical errors, bugs, or anticipated improvements needed. The solution is optimal for the problem scope.\n\n### Conclusion\nThe implemented solution is verified as correct. It meets the problem requirements, handles edge cases effectively, adheres to complexity constraints, and is written with good code quality. The provided output for the example test cases is correct given the problem statement.\n\nHere is the confirmed valid code:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n","Model":"se-gpt-4o","Latency":11004745992,"SolvedAt":"2025-08-07T09:33:25.483973897+02:00","PromptTokens":2797,"OutputTokens":953}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"739","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        answer = [0] * n\n        stack = []\n        \n        for i in range(n):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                idx = stack.pop()\n                answer[idx] = i - idx\n            stack.append(i)\n        \n        return answer\n"},"SubmissionId":1726597235,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:58:17.013324305+02:00"}}}
