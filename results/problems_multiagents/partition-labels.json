{"Question":{"Data":{"Question":{"questionFrontendId":"763","questionId":"768","Content":"<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string <code>&quot;ababcc&quot;</code> can be partitioned into <code>[&quot;abab&quot;, &quot;cc&quot;]</code>, but partitions such as <code>[&quot;aba&quot;, &quot;bcc&quot;]</code> or <code>[&quot;ab&quot;, &quot;ab&quot;, &quot;cc&quot;]</code> are invalid.</p>\n\n<p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p>\n\n<p>Return <em>a list of integers representing the size of these parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababcbacadefegdehijhklij&quot;\n<strong>Output:</strong> [9,7,8]\n<strong>Explanation:</strong>\nThe partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits s into less parts.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eccbbbbdec&quot;\n<strong>Output:</strong> [10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"ababcbacadefegdehijhklij\"","ExampleTestcases":"\"ababcbacadefegdehijhklij\"\n\"eccbbbbdec\"","Difficulty":"Medium","Title":"Partition Labels","TitleSlug":"partition-labels","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"733.6K\", \"totalSubmission\": \"899.1K\", \"totalAcceptedRaw\": 733619, \"totalSubmissionRaw\": 899091, \"acRate\": \"81.6%\"}","Likes":11039,"Dislikes":434,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> partitionLabels(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<Integer> partitionLabels(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def partitionLabels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* partitionLabels(char* s, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<int> PartitionLabels(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number[]}\n */\nvar partitionLabels = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function partitionLabels(s: string): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function partitionLabels($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func partitionLabels(_ s: String) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun partitionLabels(s: String): List<Int> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> partitionLabels(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func partitionLabels(s string) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer[]}\ndef partition_labels(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def partitionLabels(s: String): List[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn partition_labels(s: String) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (partition-labels s)\n  (-> string? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec partition_labels(S :: unicode:unicode_binary()) -> [integer()].\npartition_labels(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec partition_labels(s :: String.t) :: [integer]\n  def partition_labels(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:16:55.994476062+02:00","AcRate":"81.6","TotalSubmissions":899091,"TotalAccepted":733619,"AcceptanceRate":0.8159563381237271,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/partition-labels/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        # Step 1: Get the last occurrence index of each character\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        \n        # Initialize variables\n        start = 0      # Start index of current partition\n        end = 0        # End index of current partition\n        partitions = []  # List to store partition sizes\n        \n        # Step 2: Iterate over the string to determine partitions\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])  # Update the end index\n            \n            if i == end:  # When we reach the end of the partition\n                # Calculate partition size\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                \n                # Move start to the next index after current partition\n                start = i + 1\n        \n        return partitions\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        # Step 1: Get the last occurrence index of each character\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        \n        # Initialize variables\n        start = 0      # Start index of current partition\n        end = 0        # End index of current partition\n        partitions = []  # List to store partition sizes\n        \n        # Step 2: Iterate over the string to determine partitions\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])  # Update the end index\n            \n            if i == end:  # When we reach the end of the partition\n                # Calculate partition size\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                \n                # Move start to the next index after current partition\n                start = i + 1\n        \n        return partitions\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        start = 0\n        end = 0\n        partitions = []\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if i == end:\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                start = i + 1\n        return partitions\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        start = 0\n        end = 0\n        partitions = []\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if i == end:\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                start = i + 1\n        return partitions\n```\n\n","TypedCode":"\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        start = 0\n        end = 0\n        partitions = []\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if i == end:\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                start = i + 1\n        return partitions\n","Model":"se-gpt-4o","Latency":8361461697,"SolvedAt":"2025-08-07T09:45:47.766264891+02:00","PromptTokens":3592,"OutputTokens":636}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"768","typed_code":"\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last_occurrence = {char: i for i, char in enumerate(s)}\n        start = 0\n        end = 0\n        partitions = []\n        for i, char in enumerate(s):\n            end = max(end, last_occurrence[char])\n            if i == end:\n                partition_size = end - start + 1\n                partitions.append(partition_size)\n                start = i + 1\n        return partitions\n"},"SubmissionId":1726610596,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:16:13.823025727+02:00"}}}
