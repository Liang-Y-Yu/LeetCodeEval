{"Question":{"Data":{"Question":{"questionFrontendId":"374","questionId":"374","Content":"<p>We are playing the Guess Game. The game is as follows:</p>\n\n<p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n\n<p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p>\n\n<ul>\n\t<li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li>\n\t<li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li>\n\t<li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li>\n</ul>\n\n<p>Return <em>the number that I picked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, pick = 6\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= pick &lt;= n</code></li>\n</ul>\n","SampleTestCase":"10\n6","ExampleTestcases":"10\n6\n1\n1\n2\n1","Difficulty":"Easy","Title":"Guess Number Higher or Lower","TitleSlug":"guess-number-higher-or-lower","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"885K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 884965, \"totalSubmissionRaw\": 1577884, \"acRate\": \"56.1%\"}","Likes":4078,"Dislikes":648,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU5","Name":"Interactive","Slug":"interactive"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nint guessNumber(int n){\n\t\n}"},{"Lang":"C#","LangSlug":"csharp","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution : GuessGame {\n    public int GuessNumber(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar guessNumber = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n\nfunction guessNumber(n: number): number {\n\n};"},{"Lang":"PHP","LangSlug":"php","Code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * public function guess($num){}\n */\n\nclass Solution extends GuessGame {\n    /**\n     * @param  Integer  $n\n     * @return Integer\n     */\n    function guessNumber($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"/** \n * Forward declaration of guess API.\n * @param  num -> your guess number\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0 \n * func guess(_ num: Int) -> Int \n */\n\nclass Solution : GuessGame {\n    func guessNumber(_ n: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * fun guess(num:Int):Int {}\n */\n\nclass Solution:GuessGame() {\n    override fun guessNumber(n:Int):Int {\n        \n    }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * func guess(num int) int;\n */\n\nfunc guessNumber(n int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num)\n\ndef guessNumber(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * def guess(num: Int): Int = {}\n */\n\nclass Solution extends GuessGame {\n    def guessNumber(n: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * unsafe fn guess(num: i32) -> i32 {}\n */\n\nimpl Solution {\n    unsafe fn guessNumber(n: i32) -> i32 {\n        \n    }\n}"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:12:47.032092536+02:00","AcRate":"56.1","TotalSubmissions":1577884,"TotalAccepted":884965,"AcceptanceRate":0.5608555508516468,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/guess-number-higher-or-lower/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            result = guess(mid)\n            if result == 0:\n                return mid\n            elif result == -1:\n                high = mid - 1\n            else:\n                low = mid + 1\n```\n\n=== DESIGN ===\n```python\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        # Binary search initialization\n        low, high = 1, n\n        \n        # Use binary search to narrow down the guessed number\n        while low <= high:\n            # Find the middle point between low and high\n            mid = (low + high) // 2\n            # Call the guess API with the current mid value\n            result = guess(mid)\n            \n            # If the result from guess is 0, we have found the correct number\n            if result == 0:\n                return mid\n            # If the result is -1, the picked number is lower than mid\n            elif result == -1:\n                high = mid - 1\n            # If the result is 1, the picked number is higher than mid\n            else:\n                low = mid + 1\n```\n\n1. **Algorithm Choice**: Binary Search Algorithm\n\n2. **Step-by-Step Approach**:\n   - Initialize two variables `low` and `high`, representing the range of numbers to consider, starting from `1` to `n`.\n   - While `low` is less than or equal to `high`, perform the following steps:\n     - Calculate the `mid` point of the current range.\n     - Use the `guess` API to check the guessed number.\n     - If the API returns `0`, return `mid` as the correct answer.\n     - If the API returns `-1`, adjust the `high` to `mid - 1`.\n     - If the API returns `1`, adjust the `low` to `mid + 1`.\n\n3. **Data Structures**: Simple variables for `low`, `high`, and `mid`.\n\n4. **Time Complexity**: O(log n), where `n` is the range of numbers, since this uses binary search.\n\n5. **Space Complexity**: O(1), as the space usage is constant and not dependent on input size.\n\n6. **Pseudocode**:\n   ```\n   function guessNumber(n) {\n       low = 1\n       high = n\n       while low <= high {\n           mid = (low + high) // 2\n           result = guess(mid)\n           if result == 0 {\n               return mid\n           } else if result == -1 {\n               high = mid - 1\n           } else {\n               low = mid + 1\n           }\n       }\n   }\n   ```\n\n=== IMPLEMENTATION ===\n```python\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            result = guess(mid)\n            if result == 0:\n                return mid\n            elif result == -1:\n                high = mid - 1\n            else:\n                low = mid + 1\n```\n\n=== VERIFICATION ===\n```python\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            result = guess(mid)\n            if result == 0:\n                return mid\n            elif result == -1:\n                high = mid - 1\n            else: # result == 1\n                low = mid + 1\n```\n\nVerification Report:\n\n1. **Correctness**: The solution correctly implements the binary search algorithm. Each iteration adjusts the search boundaries based on the response from the `guess` API, and it returns the correct number once the guess is accurate.\n\n2. **Edge Cases**: \n   - The code handles the smallest case where `n = 1`, `pick = 1`, correctly by concluding the search immediately.\n   - In the case `n = 2`, `pick = 1`, it verifies the solution correctly by adjusting the high boundary when the guess leads to a response `-1`.\n   - The algorithm is able to handle the largest possible `n` efficiently due to the logarithmic complexity of binary search.\n   \n3. **Complexity**: The design achieves an O(log n) time complexity, which is appropriate for this problem size since binary search is optimal for such ordered guessing scenarios. The space complexity is O(1), as no additional data structures are used beyond a few integer variables for the binary search boundaries.\n\n4. **Code Quality**: The code is clean, readable, and follows good coding practices. It's succinct and uses appropriate variable names (`low`, `high`, `mid`), making the logic easy to understand.\n\n5. **Test Cases**: The solution works correctly on all provided examples:\n   - For `n = 10, pick = 6`, the output is `6`.\n   - For `n = 1, pick = 1`, the output is `1`.\n   - For `n = 2, pick = 1`, the output is `1`.\n\n6. **Potential Issues**: No immediate issues were detected in logic, structure, or boundary handling. The solution is robust and efficient for the problem constraints provided.\n\nConclusion: The implementation is correct and meets the requirements efficiently. It adheres to both correctness and quality standards and handles all specified edge cases effectively.\n\n","TypedCode":"\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            result = guess(mid)\n            if result == 0:\n                return mid\n            elif result == -1:\n                high = mid - 1\n            else:\n                low = mid + 1\n","Model":"se-gpt-4o","Latency":19638811206,"SolvedAt":"2025-08-07T09:36:47.852915984+02:00","PromptTokens":4463,"OutputTokens":1438}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"374","typed_code":"\n# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            result = guess(mid)\n            if result == 0:\n                return mid\n            elif result == -1:\n                high = mid - 1\n            else:\n                low = mid + 1\n"},"SubmissionId":1726601096,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:03:30.062667006+02:00"}}}
