{"Question":{"Data":{"Question":{"questionFrontendId":"1","questionId":"1","Content":"<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?","SampleTestCase":"[2,7,11,15]\n9","ExampleTestcases":"[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6","Difficulty":"Easy","Title":"Two Sum","TitleSlug":"two-sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"18.2M\", \"totalSubmission\": \"32.5M\", \"totalAcceptedRaw\": 18243145, \"totalSubmissionRaw\": 32534429, \"acRate\": \"56.1%\"}","Likes":63328,"Dislikes":2303,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function twoSum(nums: number[], target: number): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func twoSum(nums []int, target int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:24:28.690876013+02:00","AcRate":"56.1","TotalSubmissions":32534429,"TotalAccepted":18243145,"AcceptanceRate":0.5607335232470193,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/two-sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Create a dictionary to store the value-index pairs\n        num_to_index = {}\n        \n        # Iterate through the list of numbers\n        for i, num in enumerate(nums):\n            # Calculate the complement that we need to find\n            complement = target - num\n            \n            # Check if the complement is already in the dictionary\n            if complement in num_to_index:\n                # If found, return the indices of the current number and its complement\n                return [num_to_index[complement], i]\n            \n            # If not found, store the number with its index in the dictionary\n            num_to_index[num] = i\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Step 1: Create a dictionary to keep track of each number's index\n        num_to_index = {}\n        \n        # Step 2: Iterate through the list of numbers\n        for i, num in enumerate(nums):\n            # Step 3: Calculate the complement that we need to find\n            complement = target - num\n            \n            # Step 4: Check if the complement exists in the dictionary\n            if complement in num_to_index:\n                # Step 5: If it exists, return the indices of the current number and the complement\n                return [num_to_index[complement], i]\n            \n            # Step 6: Otherwise, store the number with its index in the dictionary for future reference\n            num_to_index[num] = i\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        num_to_index = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_to_index:\n                return [num_to_index[complement], i]\n            num_to_index[num] = i\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Create a dictionary to store the value-index pairs\n        num_to_index = {}\n        \n        # Iterate through the list of numbers\n        for i, num in enumerate(nums):\n            # Calculate the complement that we need to find\n            complement = target - num\n            \n            # Check if the complement is already in the dictionary\n            if complement in num_to_index:\n                # If found, return the indices of the current number and its complement\n                return [num_to_index[complement], i]\n            \n            # If not found, store the number with its index in the dictionary\n            num_to_index[num] = i\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        num_to_index = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_to_index:\n                return [num_to_index[complement], i]\n            num_to_index[num] = i\n","Model":"se-gpt-4o","Latency":7874648435,"SolvedAt":"2025-08-07T09:50:38.552181521+02:00","PromptTokens":3376,"OutputTokens":583}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        num_to_index = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_to_index:\n                return [num_to_index[complement], i]\n            num_to_index[num] = i\n"},"SubmissionId":1726616699,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:23:58.899284141+02:00"}}}
