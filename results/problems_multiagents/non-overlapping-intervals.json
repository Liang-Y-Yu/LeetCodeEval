{"Question":{"Data":{"Question":{"questionFrontendId":"435","questionId":"435","Content":"<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p><strong>Note</strong> that intervals which only touch at a point are <strong>non-overlapping</strong>. For example, <code>[1, 2]</code> and <code>[2, 3]</code> are non-overlapping.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[[1,2],[2,3],[3,4],[1,3]]","ExampleTestcases":"[[1,2],[2,3],[3,4],[1,3]]\n[[1,2],[1,2],[1,2]]\n[[1,2],[2,3]]","Difficulty":"Medium","Title":"Non-overlapping Intervals","TitleSlug":"non-overlapping-intervals","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"837.1K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 837139, \"totalSubmissionRaw\": 1499249, \"acRate\": \"55.8%\"}","Likes":8777,"Dislikes":244,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int EraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function eraseOverlapIntervals(intervals: number[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func eraseOverlapIntervals(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun eraseOverlapIntervals(intervals: Array<IntArray>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int eraseOverlapIntervals(List<List<int>> intervals) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func eraseOverlapIntervals(intervals [][]int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn erase_overlap_intervals(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (erase-overlap-intervals intervals)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec erase_overlap_intervals(Intervals :: [[integer()]]) -> integer().\nerase_overlap_intervals(Intervals) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec erase_overlap_intervals(intervals :: [[integer]]) :: integer\n  def erase_overlap_intervals(intervals) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:15:52.57592155+02:00","AcRate":"55.8","TotalSubmissions":1499249,"TotalAccepted":837139,"AcceptanceRate":0.5583722250273303,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/non-overlapping-intervals/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        # Sort the intervals based on the end value\n        intervals.sort(key=lambda x: x[1])\n        \n        # Initialize variables\n        count = 0\n        end = intervals[0][1]\n        \n        # Iterate over the sorted intervals\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                # Increment count for overlapping interval\n                count += 1\n            else:\n                # Update end to the end of the current interval\n                end = intervals[i][1]\n        \n        return count\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # Step 1: Check for the empty input\n        if not intervals:\n            return 0\n        \n        # Step 2: Sort the intervals based on their end times\n        intervals.sort(key=lambda x: x[1])\n        \n        # Step 3: Initialize variables\n        end = intervals[0][1]  # set end to the end time of the first interval\n        count = 0  # count of intervals to remove\n        \n        # Step 4: Iterate over the sorted intervals starting from the second interval\n        for i in range(1, len(intervals)):\n            # Step 5: Check if the current interval overlaps with the previous one\n            if intervals[i][0] < end:\n                # Increment the count as the current interval overlaps\n                count += 1\n            else:\n                # Update the end to the current interval's end time as they are non-overlapping\n                end = intervals[i][1]\n        \n        # Step 6: Return the count of overlapping intervals removed\n        return count\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[1])\n        \n        end = intervals[0][1]\n        count = 0\n        \n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        \n        return count\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[1])\n        \n        end = intervals[0][1]\n        count = 0\n        \n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        \n        return count\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[1])\n        \n        end = intervals[0][1]\n        count = 0\n        \n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        \n        return count\n","Model":"se-gpt-4o","Latency":7533216749,"SolvedAt":"2025-08-07T09:44:43.93513709+02:00","PromptTokens":3588,"OutputTokens":614}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"435","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[1])\n        \n        end = intervals[0][1]\n        count = 0\n        \n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        \n        return count\n"},"SubmissionId":1726609588,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:14:58.084118256+02:00"}}}
