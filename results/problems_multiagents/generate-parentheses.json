{"Question":{"Data":{"Question":{"questionFrontendId":"22","questionId":"22","Content":"<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n","SampleTestCase":"3","ExampleTestcases":"3\n1","Difficulty":"Medium","Title":"Generate Parentheses","TitleSlug":"generate-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 2476755, \"totalSubmissionRaw\": 3198150, \"acRate\": \"77.4%\"}","Likes":22458,"Dislikes":1044,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function generateParenthesis(n: number): string[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func generateParenthesis(n int) []string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:11:56.013033954+02:00","AcRate":"77.4","TotalSubmissions":3198150,"TotalAccepted":2476755,"AcceptanceRate":0.7744336569579288,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/generate-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        # Approach:\n        # Use a backtracking algorithm to explore all possible combinations.\n        \n        # Required Data Structures:\n        # A list to hold the result as we generate well-formed combinations.\n        \n        def backtrack(S, left, right):\n            # Base case: if the current string S has length equal to 2*n (which means n pairs), \n            # add it to result.\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            \n            # If the number of '(' characters is less than n, we can add '('.\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            \n            # If the number of ')' characters is less than the number of '(' characters,\n            # we can add ')'.\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        # Result list to store the well-formed combinations.\n        result = []\n        \n        # Initialize backtracking with empty string and zero counts for '(' and ')'.\n        backtrack(\"\", 0, 0)\n        \n        return result\n```\n\n**Algorithm Choice**: The backtracking approach is selected because it effectively explores all potential combinations while allowing easy pruning of incorrect paths (i.e., unbalanced parentheses).\n\n**Step-by-Step Approach**:\n1. Begin with an empty string and two counters for left and right parentheses.\n2. Use a recursive helper function `backtrack` to build the string:\n   - If the string reaches the length of `2*n`, it represents a valid combination and is added to the result list.\n   - If left counter (`left`) is less than `n`, append '(' and increase the left counter.\n   - If right counter (`right`) is less than left, append ')' and increase the right counter.\n3. Continue recursively expanding until all combinations are explored.\n\n**Data Structures**:\n- A list `result` to store valid combinations during recursion.\n\n**Time Complexity**: The time complexity is O(4^n / sqrt(n)), which is the number of combinations of well-formed parentheses.\n\n**Space Complexity**: The space complexity is O(n) due to the recursion stack depth being at most n (number of pairs of parentheses).\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n","Model":"se-gpt-4o","Latency":11145586678,"SolvedAt":"2025-08-07T09:36:15.185333521+02:00","PromptTokens":3218,"OutputTokens":829}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"22","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n"},"SubmissionId":1726600515,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:02:42.347836498+02:00"}}}
