{"Question":{"Data":{"Question":{"questionFrontendId":"200","questionId":"200","Content":"<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n","SampleTestCase":"[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]","ExampleTestcases":"[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]","Difficulty":"Medium","Title":"Number of Islands","TitleSlug":"number-of-islands","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.6M\", \"totalSubmission\": \"5.7M\", \"totalAcceptedRaw\": 3588772, \"totalSubmissionRaw\": 5726074, \"acRate\": \"62.7%\"}","Likes":24096,"Dislikes":577,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjIx","Name":"Depth-First Search","Slug":"depth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjIz","Name":"Union Find","Slug":"union-find"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUz","Name":"Matrix","Slug":"matrix"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int numIslands(char** grid, int gridSize, int* gridColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function numIslands(grid: string[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func numIslands(_ grid: [[Character]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun numIslands(grid: Array<CharArray>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int numIslands(List<List<String>> grid) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func numIslands(grid [][]byte) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (num-islands grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec num_islands(Grid :: [[char()]]) -> integer().\nnum_islands(Grid) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec num_islands(grid :: [[char]]) :: integer\n  def num_islands(grid) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:17:01.561086763+02:00","AcRate":"62.7","TotalSubmissions":5726074,"TotalAccepted":3588772,"AcceptanceRate":0.6267421622563732,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/number-of-islands/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid:\n            return 0\n        \n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'  # Mark as visited\n            \n            # Explore neighbors\n            dfs(x - 1, y)  # Up\n            dfs(x + 1, y)  # Down\n            dfs(x, y - 1)  # Left\n            dfs(x, y + 1)  # Right\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        # Helper function to perform Depth First Search\n        def dfs(x, y):\n            # Base condition for out of bounds or water cells\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            # Mark the cell as visited by changing it to '0'\n            grid[x][y] = '0'\n\n            # Explore neighbors in four directions: Up, Down, Left, Right\n            dfs(x - 1, y)  # Up\n            dfs(x + 1, y)  # Down\n            dfs(x, y - 1)  # Left\n            dfs(x, y + 1)  # Right\n\n        m, n = len(grid), len(grid[0])  # Dimensions of the grid\n        island_count = 0  # Counter to store the number of islands\n\n        # Iterate over each cell in the grid\n        for i in range(m):\n            for j in range(n):\n                # If we encounter a land cell\n                if grid[i][j] == '1':\n                    # Increment the island count\n                    island_count += 1\n                    # Start DFS to mark the entire island\n                    dfs(i, j)\n\n        # Return the count of islands\n        return island_count\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n\n        m, n = len(grid), len(grid[0])\n        island_count = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n\n        return island_count\n```\n\n=== VERIFICATION ===\nThe implemented code snippet provided for solving the \"Number of Islands\" problem contains the following:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n        \n        m, n = len(grid), len(grid[0])\n        island_count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n        \n        return island_count\n```\n\n### Verification Report:\n\n1. **Correctness**:\n   - The code correctly implements the Depth First Search (DFS) algorithm to explore islands (connected '1's) and marks them as visited by changing '1's to '0's.\n   - It increments the island count each time it finds a new land cell '1', thus counting distinct islands accurately.\n\n2. **Edge Cases**:\n   - The code handles grids with varying dimensions, as ensured by fetching `m, n` from `grid`.\n   - It correctly processes small edge cases, like a single cell grid, purely water grids, and grids with no islands.\n   - It deals with boundaries effectively by checking conditions within `dfs(x, y)`.\n\n3. **Complexity**:\n   - **Time Complexity**: The solution runs in O(m * n) time complexity because each cell is visited and marked once.\n   - **Space Complexity**: The space complexity is O(1) for auxiliary data storage but has O(m * n) recursion space due to the depth of DFS calls, which is acceptable given constraints.\n\n4. **Code Quality**:\n   - The solution is clean, readable, and well structured.\n   - It follows Python best practices, using comments to clarify the DFS function and its purpose.\n\n5. **Test Cases**:\n   - The provided examples are correctly solved by the code:\n     - **Example 1**: Produces output `1`, matching expected results.\n     - **Example 2**: Produces output `3`, correctly identifying all islands.\n\n6. **Potential Issues**:\n   - There are no logical or syntactic errors. The function signatures and class names are intact as required.\n\n### Conclusion:\nThe solution provided is correct and meets all the functional, design, and structural expectations for the problem. It handles edge cases well, adheres to complexity limits, and the test cases validate its correctness. Therefore, no changes or improvements are necessary.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n\n        m, n = len(grid), len(grid[0])\n        island_count = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n\n        return island_count\n","Model":"se-gpt-4o","Latency":14579140830,"SolvedAt":"2025-08-07T09:44:58.52860194+02:00","PromptTokens":3852,"OutputTokens":1293}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"200","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == '0':\n                return\n            grid[x][y] = '0'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n\n        m, n = len(grid), len(grid[0])\n        island_count = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    island_count += 1\n                    dfs(i, j)\n\n        return island_count\n"},"SubmissionId":1726609889,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:15:20.459833415+02:00"}}}
