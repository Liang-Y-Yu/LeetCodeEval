{"Question":{"Data":{"Question":{"questionFrontendId":"347","questionId":"347","Content":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Your algorithm&#39;s time complexity must be better than <code>O(n log n)</code>, where n is the array&#39;s size.</p>\n","SampleTestCase":"[1,1,1,2,2,3]\n2","ExampleTestcases":"[1,1,1,2,2,3]\n2\n[1]\n1","Difficulty":"Medium","Title":"Top K Frequent Elements","TitleSlug":"top-k-frequent-elements","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3M\", \"totalSubmission\": \"4.6M\", \"totalAcceptedRaw\": 2991895, \"totalSubmissionRaw\": 4616889, \"acRate\": \"64.8%\"}","Likes":18558,"Dislikes":733,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEy","Name":"Divide and Conquer","Slug":"divide-and-conquer"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUw","Name":"Heap (Priority Queue)","Slug":"heap-priority-queue"},{"Id":"VG9waWNUYWdOb2RlOjYxMDYw","Name":"Bucket Sort","Slug":"bucket-sort"},{"Id":"VG9waWNUYWdOb2RlOjYxMDYy","Name":"Counting","Slug":"counting"},{"Id":"VG9waWNUYWdOb2RlOjYxMDY5","Name":"Quickselect","Slug":"quickselect"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] TopKFrequent(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function topKFrequent(nums: number[], k: number): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topKFrequent($nums, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func topKFrequent(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun topKFrequent(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> topKFrequent(List<int> nums, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func topKFrequent(nums []int, k int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef top_k_frequent(nums, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (top-k-frequent nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec top_k_frequent(Nums :: [integer()], K :: integer()) -> [integer()].\ntop_k_frequent(Nums, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec top_k_frequent(nums :: [integer], k :: integer) :: [integer]\n  def top_k_frequent(nums, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:19:09.459739512+02:00","AcRate":"64.8","TotalSubmissions":4616889,"TotalAccepted":2991895,"AcceptanceRate":0.6480326904112271,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/top-k-frequent-elements/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom collections import Counter\nimport heapq\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        # Step 1: Count the frequency of each element in nums\n        freq_map = Counter(nums)\n        \n        # Step 2: Use a heap to retrieve the k most frequent elements\n        # Use a max-heap where the heap stores tuples of (-frequency, element)\n        # This is because Python has a min-heap by default, and we want to simulate a max-heap behavior.\n        return [element for (frequency, element) in heapq.nlargest(k, freq_map.items(), key=lambda item: item[1])]\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        # Step 1: Count the frequency of each element in nums\n        freq_map = Counter(nums)\n        \n        # Step 2: Create a list of buckets where each index corresponds to frequency\n        # The maximum frequency can be at most the length of nums\n        bucket = [[] for _ in range(len(nums) + 1)]\n        \n        # Step 3: Fill the buckets with numbers based on their frequency\n        for num, freq in freq_map.items():\n            bucket[freq].append(num)\n        \n        # Step 4: Collect the top k frequent elements from the buckets\n        result = []\n        # Since we need the most frequent elements, we traverse the bucket list from highest frequency to lowest\n        for freq in range(len(bucket) - 1, 0, -1):\n            for num in bucket[freq]:\n                result.append(num)\n                # Once we have collected k elements, we can return the result\n                if len(result) == k:\n                    return result\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        freq_map = Counter(nums)\n        bucket = [[] for _ in range(len(nums) + 1)]\n        for num, freq in freq_map.items():\n            bucket[freq].append(num)\n        result = []\n        for freq in range(len(bucket) - 1, 0, -1):\n            for num in bucket[freq]:\n                result.append(num)\n                if len(result) == k:\n                    return result\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        freq_map = Counter(nums)\n        bucket = [[] for _ in range(len(nums) + 1)]\n        for num, freq in freq_map.items():\n            bucket[freq].append(num)\n        result = []\n        for freq in range(len(bucket) - 1, 0, -1):\n            for num in bucket[freq]:\n                result.append(num)\n                if len(result) == k:\n                    return result\n```\n\n","TypedCode":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        freq_map = Counter(nums)\n        bucket = [[] for _ in range(len(nums) + 1)]\n        for num, freq in freq_map.items():\n            bucket[freq].append(num)\n        result = []\n        for freq in range(len(bucket) - 1, 0, -1):\n            for num in bucket[freq]:\n                result.append(num)\n                if len(result) == k:\n                    return result\n","Model":"se-gpt-4o","Latency":8902533459,"SolvedAt":"2025-08-07T09:49:54.231602922+02:00","PromptTokens":3248,"OutputTokens":651}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"347","typed_code":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        freq_map = Counter(nums)\n        bucket = [[] for _ in range(len(nums) + 1)]\n        for num, freq in freq_map.items():\n            bucket[freq].append(num)\n        result = []\n        for freq in range(len(bucket) - 1, 0, -1):\n            for num in bucket[freq]:\n                result.append(num)\n                if len(result) == k:\n                    return result\n"},"SubmissionId":1726616003,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:23:06.81427943+02:00"}}}
