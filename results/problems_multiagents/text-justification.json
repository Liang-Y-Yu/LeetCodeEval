{"Question":{"Data":{"Question":{"questionFrontendId":"68","questionId":"68","Content":"<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n","SampleTestCase":"[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16","ExampleTestcases":"[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16\n[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16\n[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20","Difficulty":"Hard","Title":"Text Justification","TitleSlug":"text-justification","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"562.1K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 562107, \"totalSubmissionRaw\": 1156425, \"acRate\": \"48.6%\"}","Likes":4254,"Dislikes":5171,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU1","Name":"Simulation","Slug":"simulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function fullJustify(words: string[], maxWidth: number): string[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<String> fullJustify(List<String> words, int maxWidth) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func fullJustify(words []string, maxWidth int) []string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (full-justify words maxWidth)\n  (-> (listof string?) exact-integer? (listof string?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\nfull_justify(Words, MaxWidth) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\n  def full_justify(words, max_width) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:18:27.780981027+02:00","AcRate":"48.6","TotalSubmissions":1156425,"TotalAccepted":562107,"AcceptanceRate":0.4860730267851352,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/text-justification/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        def justifyLine(line, lineLength, maxWidth, isLastLine):\n            if isLastLine or len(line) == 1:\n                # Just join the words for the last line, separated by spaces\n                return ' '.join(line).ljust(maxWidth)\n            \n            totalSpaces = maxWidth - lineLength  # Total spaces to distribute\n            spacesBetweenWords = len(line) - 1  # Places where spaces can be added\n            \n            # Evenly distribute the spaces\n            spaceSlots = totalSpaces // spacesBetweenWords\n            extraSpaces = totalSpaces % spacesBetweenWords\n            \n            result = []\n            for i, word in enumerate(line):\n                result.append(word)\n                if i < spacesBetweenWords:\n                    # Add spaces between words\n                    result.append(' ' * (spaceSlots + (1 if i < extraSpaces else 0)))\n            \n            return ''.join(result)\n        \n        results = []\n        currentLine = []\n        currentLineLength = 0\n        \n        for word in words:\n            if currentLineLength + len(word) + len(currentLine) > maxWidth:\n                results.append(justifyLine(currentLine, currentLineLength, maxWidth, False))\n                currentLine = []\n                currentLineLength = 0\n            currentLine.append(word)\n            currentLineLength += len(word)\n        \n        # Add the final line\n        results.append(justifyLine(currentLine, currentLineLength, maxWidth, True))\n        \n        return results\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        def justify_line(line, line_length, max_width, is_last_line):\n            if is_last_line or len(line) == 1:\n                # For the last line or a line with one word, left-justify\n                return ' '.join(line).ljust(max_width)\n            \n            total_spaces = max_width - line_length  # Total spaces to distribute\n            spaces_between_words = len(line) - 1  # Number of gaps between words\n            \n            # Calculate space distribution\n            min_space = total_spaces // spaces_between_words\n            extra_spaces = total_spaces % spaces_between_words\n            \n            result = []\n            for i, word in enumerate(line):\n                result.append(word)\n                if i < spaces_between_words:\n                    # Distribute extra spaces to the left-most gaps\n                    spaces_to_add = min_space + (1 if i < extra_spaces else 0)\n                    result.append(' ' * spaces_to_add)\n            \n            return ''.join(result)\n        \n        results = []\n        current_line = []\n        current_line_length = 0\n        \n        for word in words:\n            # Check if adding this word would exceed maxWidth\n            if current_line_length + len(word) + len(current_line) > maxWidth:\n                # Justify the current line\n                results.append(justify_line(current_line, current_line_length, maxWidth, False))\n                current_line = []\n                current_line_length = 0\n            \n            current_line.append(word)\n            current_line_length += len(word)\n        \n        # Justify the last line, which should be left-justified\n        results.append(justify_line(current_line, current_line_length, maxWidth, True))\n        \n        return results\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        def justifyLine(line, lineLength, maxWidth, isLastLine):\n            if isLastLine or len(line) == 1:\n                return ' '.join(line).ljust(maxWidth)\n            \n            totalSpaces = maxWidth - lineLength\n            spacesBetweenWords = len(line) - 1\n            \n            spaceSlots = totalSpaces // spacesBetweenWords\n            extraSpaces = totalSpaces % spacesBetweenWords\n            \n            result = []\n            for i, word in enumerate(line):\n                result.append(word)\n                if i < spacesBetweenWords:\n                    result.append(' ' * (spaceSlots + (1 if i < extraSpaces else 0)))\n            \n            return ''.join(result)\n        \n        results = []\n        currentLine = []\n        currentLineLength = 0\n        \n        for word in words:\n            if currentLineLength + len(word) + len(currentLine) > maxWidth:\n                results.append(justifyLine(currentLine, currentLineLength, maxWidth, False))\n                currentLine = []\n                currentLineLength = 0\n            currentLine.append(word)\n            currentLineLength += len(word)\n        \n        results.append(justifyLine(currentLine, currentLineLength, maxWidth, True))\n        \n        return results\n```\n\n=== VERIFICATION ===\nThe solution provided for the text justification problem appears to be correct and meets the requirements. Let's proceed with the verification report:\n\n1. **Correctness**: \n   - The code correctly implements the greedy approach to pack as many words as possible in each line, ensures even distribution of spaces, and handles the last line separately for left-justification. \n   - It properly balances spaces between words when multiple words exist on a line, and correctly left-justifies the last line and any line with a single word.\n\n2. **Edge Cases**:\n   - The code can handle scenarios with a single word in a line or the last line, achieving proper left-justification.\n   - It processes array length constraints and word length constraints within the bounds given (1 ≤ words.length ≤ 300 and 1 ≤ words[i].length ≤ 20 with 1 ≤ maxWidth ≤ 100).\n\n3. **Complexity**:\n   - Time complexity: The solution traverses each word exactly once, resulting in O(n) time complexity where n is the number of words.\n   - Space complexity: The solution primarily uses lists to store intermediate lines, resulting in O(n) space complexity particularly for storing words.\n\n4. **Code Quality**:\n   - The code is clean and well-organized into functions and follows good practices. The function names are meaningful and variables are aptly named, aiding in readability.\n\n5. **Test Cases**:\n   - When tested with the provided examples:\n     - Example 1 and Example 2 produce the correct output with appropriate spacing and justification.\n     - Example 3 also handles multi-word and single-word lines correctly with proper spacing and last-line handling.\n   - All samples demonstrate expected behavior confirming its correctness.\n\n6. **Potential Issues**:\n   - The algorithm doesn't seem to have any apparent flaws. Edge cases such as single-word lines and last lines are well addressed, with no evident logical errors.\n\nSince the solution meets all the criteria without any apparent issues, it can be confirmed as valid and correct for the given problem statement.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        def justifyLine(line, lineLength, maxWidth, isLastLine):\n            if isLastLine or len(line) == 1:\n                return ' '.join(line).ljust(maxWidth)\n            \n            totalSpaces = maxWidth - lineLength\n            spacesBetweenWords = len(line) - 1\n            \n            spaceSlots = totalSpaces // spacesBetweenWords\n            extraSpaces = totalSpaces % spacesBetweenWords\n            \n            result = []\n            for i, word in enumerate(line):\n                result.append(word)\n                if i < spacesBetweenWords:\n                    result.append(' ' * (spaceSlots + (1 if i < extraSpaces else 0)))\n            \n            return ''.join(result)\n        \n        results = []\n        currentLine = []\n        currentLineLength = 0\n        \n        for word in words:\n            if currentLineLength + len(word) + len(currentLine) > maxWidth:\n                results.append(justifyLine(currentLine, currentLineLength, maxWidth, False))\n                currentLine = []\n                currentLineLength = 0\n            currentLine.append(word)\n            currentLineLength += len(word)\n        \n        results.append(justifyLine(currentLine, currentLineLength, maxWidth, True))\n        \n        return results\n","Model":"se-gpt-4o","Latency":14085678317,"SolvedAt":"2025-08-07T09:49:45.315165883+02:00","PromptTokens":5772,"OutputTokens":1421}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"68","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        def justifyLine(line, lineLength, maxWidth, isLastLine):\n            if isLastLine or len(line) == 1:\n                return ' '.join(line).ljust(maxWidth)\n            \n            totalSpaces = maxWidth - lineLength\n            spacesBetweenWords = len(line) - 1\n            \n            spaceSlots = totalSpaces // spacesBetweenWords\n            extraSpaces = totalSpaces % spacesBetweenWords\n            \n            result = []\n            for i, word in enumerate(line):\n                result.append(word)\n                if i < spacesBetweenWords:\n                    result.append(' ' * (spaceSlots + (1 if i < extraSpaces else 0)))\n            \n            return ''.join(result)\n        \n        results = []\n        currentLine = []\n        currentLineLength = 0\n        \n        for word in words:\n            if currentLineLength + len(word) + len(currentLine) > maxWidth:\n                results.append(justifyLine(currentLine, currentLineLength, maxWidth, False))\n                currentLine = []\n                currentLineLength = 0\n            currentLine.append(word)\n            currentLineLength += len(word)\n        \n        results.append(justifyLine(currentLine, currentLineLength, maxWidth, True))\n        \n        return results\n"},"SubmissionId":1726615740,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:22:45.983400333+02:00"}}}
