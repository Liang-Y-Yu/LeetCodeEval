{"Question":{"Data":{"Question":{"questionFrontendId":"125","questionId":"125","Content":"<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n","SampleTestCase":"\"A man, a plan, a canal: Panama\"","ExampleTestcases":"\"A man, a plan, a canal: Panama\"\n\"race a car\"\n\" \"","Difficulty":"Easy","Title":"Valid Palindrome","TitleSlug":"valid-palindrome","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4.5M\", \"totalSubmission\": \"8.7M\", \"totalAcceptedRaw\": 4487327, \"totalSubmissionRaw\": 8729859, \"acRate\": \"51.4%\"}","Likes":10639,"Dislikes":8570,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isPalindrome(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsPalindrome(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isPalindrome(s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isPalindrome(s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isPalindrome(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isPalindrome(s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-palindrome s)\n  (-> string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:19:32.522919403+02:00","AcRate":"51.4","TotalSubmissions":8729859,"TotalAccepted":4487327,"AcceptanceRate":0.5140205586367431,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/valid-palindrome/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        # Remove non-alphanumeric characters and convert to lower case\n        filtered_chars = [char.lower() for char in s if char.isalnum()]\n        \n        # Check if the filtered list of characters is a palindrome\n        return filtered_chars == filtered_chars[::-1]\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        # Step 1: Initialize two pointers for the two ends of the string\n        left, right = 0, len(s) - 1\n\n        # Step 2: Iterate through the string while left pointer is less than right pointer\n        while left < right:\n            # Step 3: Move the left pointer to the next alphanumeric character\n            while left < right and not s[left].isalnum():\n                left += 1\n            \n            # Step 4: Move the right pointer to the previous alphanumeric character\n            while left < right and not s[right].isalnum():\n                right -= 1\n            \n            # Step 5: Check if the characters at left and right pointers are the same\n            # Convert both characters to lowercase before comparison\n            if s[left].lower() != s[right].lower():\n                return False\n            \n            # Step 6: Move both pointers towards the center\n            left += 1\n            right -= 1\n        \n        # Step 7: If the loop completes without finding a mismatch, the string is a palindrome\n        return True\n```\n\n**Algorithm Choice**:\nThe algorithm uses two-pointer technique to efficiently check if the given string is a palindrome.\n\n**Step-by-Step Approach**:\n1. Initialize two pointers (`left` and `right`) at the first and last index of the string `s`.\n2. Iterate through the string while `left < right`:\n   - Increment `left` until it points to an alphanumeric character.\n   - Decrement `right` until it points to an alphanumeric character.\n   - Compare the characters at `left` and `right` after converting them to lowercase:\n     - If they are not the same, return `False`.\n   - Move both pointers inward.\n3. If all characters match as expected, return `True`.\n\n**Data Structures**:\nNone required beyond indexing into the string.\n\n**Time Complexity**:\nO(n), where n is the length of the string. We traverse each character at most once.\n\n**Space Complexity**:\nO(1), as we are using a constant amount of extra space.\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            while left < right and not s[right].isalnum():\n                right -= 1\n            if s[left].lower() != s[right].lower():\n                return False\n            left += 1\n            right -= 1\n        return True\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            while left < right and not s[right].isalnum():\n                right -= 1\n            if s[left].lower() != s[right].lower():\n                return False\n            left += 1\n            right -= 1\n        return True\n```\n\n","TypedCode":"\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            while left < right and not s[right].isalnum():\n                right -= 1\n            if s[left].lower() != s[right].lower():\n                return False\n            left += 1\n            right -= 1\n        return True\n","Model":"se-gpt-4o","Latency":10483205811,"SolvedAt":"2025-08-07T09:51:06.831799637+02:00","PromptTokens":3500,"OutputTokens":756}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"125","typed_code":"\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            while left < right and not s[right].isalnum():\n                right -= 1\n            if s[left].lower() != s[right].lower():\n                return False\n            left += 1\n            right -= 1\n        return True\n"},"SubmissionId":1726617276,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:24:44.746108592+02:00"}}}
