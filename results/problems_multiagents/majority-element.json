{"Question":{"Data":{"Question":{"questionFrontendId":"169","questionId":"169","Content":"<p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p>\n\n<p>The majority element is the element that appears more than <code>&lfloor;n / 2&rfloor;</code> times. You may assume that the majority element always exists in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1,1,1,2,2]\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?","SampleTestCase":"[3,2,3]","ExampleTestcases":"[3,2,3]\n[2,2,1,1,1,2,2]","Difficulty":"Easy","Title":"Majority Element","TitleSlug":"majority-element","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4.5M\", \"totalSubmission\": \"6.9M\", \"totalAcceptedRaw\": 4549556, \"totalSubmissionRaw\": 6913318, \"acRate\": \"65.8%\"}","Likes":21436,"Dislikes":751,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEy","Name":"Divide and Conquer","Slug":"divide-and-conquer"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"},{"Id":"VG9waWNUYWdOb2RlOjYxMDYy","Name":"Counting","Slug":"counting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int majorityElement(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function majorityElement(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int majorityElement(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func majorityElement(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:14:41.723759633+02:00","AcRate":"65.8","TotalSubmissions":6913318,"TotalAccepted":4549556,"AcceptanceRate":0.658085741173775,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/majority-element/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        \n        # Implementing Boyer-Moore Voting Algorithm\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        \n        # Implementing Boyer-Moore Voting Algorithm\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        return candidate\n```\n\n=== VERIFICATION ===\nThe provided solution correctly implements the Boyer-Moore Voting Algorithm for the \"Majority Element\" problem. Here's my verification report:\n\n1. **Correctness**: \n   - The algorithm is correctly implemented. It uses the Boyer-Moore Voting Algorithm to find the majority element, which is guaranteed to exist in the input according to the problem statement.\n\n2. **Edge Cases**: \n   - The solution handles edge cases effectively as long as `n >= 1` is maintained, which is ensured by the constraints (`1 <= n`). \n   - It works with the smallest input possible, `nums = [x]`, where `x` can be any integer within the constraints.\n\n3. **Complexity**: \n   - Time Complexity: The solution runs in O(n) linear time, as it iterates through the list of numbers once.\n   - Space Complexity: The solution runs in O(1) space, as it uses a constant amount of extra space for the variables `candidate` and `count`.\n\n4. **Code Quality**: \n   - The code is clean, concise, and follows best practices. It uses meaningful variable names (`candidate`, `count`) and implements the algorithm directly without unnecessary complexity.\n\n5. **Test Cases**: \n   - Walkthrough with Example 1: `nums = [3,2,3]`\n     - After processing: Candidate ends up as 3 with majority element 3.\n   - Walkthrough with Example 2: `nums = [2,2,1,1,1,2,2]`\n     - After processing: Candidate ends up as 2 with majority element 2.\n   - Both provided examples produce correct outputs, verifying the correctness with sample cases.\n\n6. **Potential Issues**: \n   - There are no bugs or logical errors identified in the current implementation. The algorithm theoretically handles all cases as per the problem constraints.\n\nOverall, the solution is correct, efficient, and well-implemented. It fully meets the requirements laid out in the problem statement and follow-up constraints. Here is the final code:\n\n```python\nfrom typing import List\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        return candidate\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        return candidate\n","Model":"se-gpt-4o","Latency":9211887114,"SolvedAt":"2025-08-07T09:40:48.495759295+02:00","PromptTokens":2640,"OutputTokens":777}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"169","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        candidate = None\n        count = 0\n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        return candidate\n"},"SubmissionId":1726605593,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:09:39.357599944+02:00"}}}
