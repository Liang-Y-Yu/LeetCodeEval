{"Question":{"Data":{"Question":{"questionFrontendId":"67","questionId":"67","Content":"<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n","SampleTestCase":"\"11\"\n\"1\"","ExampleTestcases":"\"11\"\n\"1\"\n\"1010\"\n\"1011\"","Difficulty":"Easy","Title":"Add Binary","TitleSlug":"add-binary","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3.5M\", \"totalAcceptedRaw\": 1935081, \"totalSubmissionRaw\": 3461508, \"acRate\": \"55.9%\"}","Likes":10062,"Dislikes":1058,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE5","Name":"Bit Manipulation","Slug":"bit-manipulation"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU1","Name":"Simulation","Slug":"simulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* addBinary(char* a, char* b) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function addBinary(a: string, b: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func addBinary(a string, b string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:09:58.382105143+02:00","AcRate":"55.9","TotalSubmissions":3461508,"TotalAccepted":1935081,"AcceptanceRate":0.5590283194492112,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/add-binary/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        carry = 0\n        result = []\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append('1')\n        \n        return ''.join(reversed(result))\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        # Step 1: Initialize the maximum length based on the lengths of a and b\n        max_length = max(len(a), len(b))\n        \n        # Step 2: Pad the shorter binary string with leading zeros to match lengths\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        # Step 3: Initialize a carry variable and an empty list to hold the result\n        carry = 0\n        result = []\n        \n        # Step 4: Traverse the binary strings from right to left\n        for i in range(max_length - 1, -1, -1):\n            # Step 5: Calculate the sum for the current position including carry\n            total_sum = int(a[i]) + int(b[i]) + carry\n            \n            # Step 6: Update carry (for the next position processing)\n            carry = total_sum // 2\n            \n            # Step 7: Append the current binary digit to the result list\n            result.append(str(total_sum % 2))\n        \n        # Step 8: If carry is still present at the end, append it to the result list\n        if carry:\n            result.append('1')\n        \n        # Step 9: Reverse the result as we appended digits from right to left\n        return ''.join(reversed(result))\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        carry = 0\n        result = []\n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        if carry:\n            result.append('1')\n        return ''.join(reversed(result))\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        carry = 0\n        result = []\n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        if carry:\n            result.append('1')\n        return ''.join(reversed(result))\n```\n\n","TypedCode":"\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        carry = 0\n        result = []\n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        if carry:\n            result.append('1')\n        return ''.join(reversed(result))\n","Model":"se-gpt-4o","Latency":8429508587,"SolvedAt":"2025-08-07T09:29:59.632183023+02:00","PromptTokens":3075,"OutputTokens":703}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"67","typed_code":"\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        carry = 0\n        result = []\n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        if carry:\n            result.append('1')\n        return ''.join(reversed(result))\n"},"SubmissionId":1726593737,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:53:25.694611435+02:00"}}}
