{"Question":{"Data":{"Question":{"questionFrontendId":"210","questionId":"210","Content":"<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n<strong>Output:</strong> [0,2,1,3]\n<strong>Explanation:</strong> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 1, prerequisites = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li>\n</ul>\n","SampleTestCase":"2\n[[1,0]]","ExampleTestcases":"2\n[[1,0]]\n4\n[[1,0],[2,0],[3,1],[3,2]]\n1\n[]","Difficulty":"Medium","Title":"Course Schedule II","TitleSlug":"course-schedule-ii","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1450706, \"totalSubmissionRaw\": 2694731, \"acRate\": \"53.8%\"}","Likes":11532,"Dislikes":371,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjIx","Name":"Depth-First Search","Slug":"depth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"},{"Id":"VG9waWNUYWdOb2RlOjI0","Name":"Graph","Slug":"graph"},{"Id":"VG9waWNUYWdOb2RlOjI2","Name":"Topological Sort","Slug":"topological-sort"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findOrder(numCourses: number, prerequisites: number[][]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Integer[]\n     */\n    function findOrder($numCourses, $prerequisites) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> findOrder(int numCourses, List<List<int>> prerequisites) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findOrder(numCourses int, prerequisites [][]int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Integer[]}\ndef find_order(num_courses, prerequisites)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_order(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-order numCourses prerequisites)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> [integer()].\nfind_order(NumCourses, Prerequisites) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\n  def find_order(num_courses, prerequisites) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:11:11.928620522+02:00","AcRate":"53.8","TotalSubmissions":2694731,"TotalAccepted":1450706,"AcceptanceRate":0.5383490968115184,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/course-schedule-ii/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # Create a graph represented by adjacency list\n        graph = defaultdict(list)\n        \n        # Create an array to track the in-degree of each node\n        in_degree = [0] * numCourses\n        \n        # Build the graph and fill the in-degree array\n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        # Use a queue to keep track of nodes with in-degree zero\n        zero_in_degree_queue = deque()\n        \n        # Initialize queue with all nodes having in-degree zero\n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        # Result list to store the course order\n        result = []\n        \n        # Process the nodes with in-degree zero\n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            # Reduce the in-degree of neighbours by 1\n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                # If in-degree becomes zero, add neighbor to the queue\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        # If result contains all numCourses, it's a valid course order\n        if len(result) == numCourses:\n            return result\n        \n        # Otherwise, it's impossible to complete all courses\n        return []\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # Create a graph represented by adjacency list\n        graph = defaultdict(list)\n        \n        # Create an array to track the in-degree of each node\n        in_degree = [0] * numCourses\n        \n        # Build the graph and fill the in-degree array\n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        # Use a queue to keep track of nodes with in-degree zero\n        zero_in_degree_queue = deque()\n        \n        # Initialize queue with all nodes having in-degree zero\n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        # Result list to store the course order\n        result = []\n        \n        # Process the nodes with in-degree zero\n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            # Reduce the in-degree of neighbours by 1\n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                # If in-degree becomes zero, add neighbor to the queue\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        # If result contains all numCourses, it's a valid course order\n        if len(result) == numCourses:\n            return result\n        \n        # Otherwise, it's impossible to complete all courses\n        return []\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        in_degree = [0] * numCourses\n        \n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        zero_in_degree_queue = deque()\n        \n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        result = []\n        \n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        if len(result) == numCourses:\n            return result\n        \n        return []\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        in_degree = [0] * numCourses\n        \n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        zero_in_degree_queue = deque()\n        \n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        result = []\n        \n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        if len(result) == numCourses:\n            return result\n        \n        return []\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements Kahn's algorithm for computing a topological sort of a directed graph. It processes nodes with zero in-degree, appending them to the ordering, and updates the in-degree of their neighbors appropriately.\n\n2. **Edge Cases**:\n   - The code correctly handles cases where there are no prerequisites (e.g., Example 3).\n   - It handles cases where a valid topological sort is impossible (i.e., cycles in the graph) by returning an empty list, which is consistent with the problem statement.\n\n3. **Complexity**:\n   - **Time Complexity**: The implementation runs in O(V + E) time, where V is the number of vertices (courses) and E is the number of edges (prerequisites). This is optimal for this type of topological sorting problem.\n   - **Space Complexity**: The space complexity is O(V + E) due to storing the adjacency list and the in-degree count.\n\n4. **Code Quality**: The code is clean, readable, and follows best practices:\n   - Use of `defaultdict` for adjacency list simplifies graph construction.\n   - Use of `deque` ensures efficient popping from the front of the queue.\n   - Clearly structured with appropriate variable names.\n\n5. **Test Cases**: The code has been validated against provided example test cases and yields correct outputs:\n   - Example 1 returns `[0, 1]`.\n   - Example 2 returns `[0, 2, 1, 3]` or `[0, 1, 2, 3]`, both valid topological orderings.\n   - Example 3 returns `[0]`.\n\n6. **Potential Issues**: No issues observed. The solution properly handles scenarios where courses cannot be completed due to cyclic dependencies by returning an empty list.\n\nConclusion:\nThe code is correct, efficient, and high-quality. It meets all requirements of the problem statement and constraints. No modifications are necessary.\n\n","TypedCode":"\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        in_degree = [0] * numCourses\n        \n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        zero_in_degree_queue = deque()\n        \n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        result = []\n        \n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        if len(result) == numCourses:\n            return result\n        \n        return []\n","Model":"se-gpt-4o","Latency":17552981414,"SolvedAt":"2025-08-07T09:32:58.685364689+02:00","PromptTokens":4969,"OutputTokens":1490}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"210","typed_code":"\nfrom typing import List\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        in_degree = [0] * numCourses\n        \n        for course, pre in prerequisites:\n            graph[pre].append(course)\n            in_degree[course] += 1\n        \n        zero_in_degree_queue = deque()\n        \n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                zero_in_degree_queue.append(i)\n        \n        result = []\n        \n        while zero_in_degree_queue:\n            node = zero_in_degree_queue.popleft()\n            result.append(node)\n            \n            for neighbor in graph[node]:\n                in_degree[neighbor] -= 1\n                if in_degree[neighbor] == 0:\n                    zero_in_degree_queue.append(neighbor)\n        \n        if len(result) == numCourses:\n            return result\n        \n        return []\n"},"SubmissionId":1726596791,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:57:42.144019048+02:00"}}}
