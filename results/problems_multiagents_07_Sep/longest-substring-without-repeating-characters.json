{"Question":{"Data":{"Question":{"questionFrontendId":"3","questionId":"3","Content":"<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without duplicate characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n","SampleTestCase":"\"abcabcbb\"","ExampleTestcases":"\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"","Difficulty":"Medium","Title":"Longest Substring Without Repeating Characters","TitleSlug":"longest-substring-without-repeating-characters","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"8.1M\", \"totalSubmission\": \"21.6M\", \"totalAcceptedRaw\": 8086137, \"totalSubmissionRaw\": 21564111, \"acRate\": \"37.5%\"}","Likes":43017,"Dislikes":2105,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int lengthOfLongestSubstring(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function lengthOfLongestSubstring(s: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func lengthOfLongestSubstring(s string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:53:40.627733328+02:00","AcRate":"37.5","TotalSubmissions":21564111,"TotalAccepted":8086137,"AcceptanceRate":0.37498123618451046,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-substring-without-repeating-characters/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # Dictionary to store the last positions of the characters\n        last_seen = {}\n        # Start of the current window\n        start = 0\n        # Maximum length of substring without repeating characters\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            # If the character is already in the window, move the start to the next\n            # position after the last occurrence of this character\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            \n            # Update the last seen position of the current character\n            last_seen[char] = end\n            \n            # Update the max length\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # Dictionary to store the last positions of the characters\n        last_seen = {}\n        # Start of the current window\n        start = 0\n        # Maximum length of substring without repeating characters\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            # If the character is already in the window, move the start to the next\n            # position after the last occurrence of this character\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            \n            # Update the last seen position of the current character\n            last_seen[char] = end\n            \n            # Update the max length\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        last_seen = {}\n        start = 0\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            last_seen[char] = end\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        last_seen = {}\n        start = 0\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            last_seen[char] = end\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n```\n\n","TypedCode":"\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        last_seen = {}\n        start = 0\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            last_seen[char] = end\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n","Model":"se-gpt-4o","Latency":5729667841,"SolvedAt":"2025-09-07T16:07:08.591521729+02:00","PromptTokens":3191,"OutputTokens":584}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"3","typed_code":"\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        last_seen = {}\n        start = 0\n        max_length = 0\n        \n        for end, char in enumerate(s):\n            if char in last_seen and last_seen[char] >= start:\n                start = last_seen[char] + 1\n            last_seen[char] = end\n            max_length = max(max_length, end - start + 1)\n        \n        return max_length\n"},"SubmissionId":1762753054,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:32:08.07593878+02:00"}}}
