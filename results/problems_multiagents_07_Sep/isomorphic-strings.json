{"Question":{"Data":{"Question":{"questionFrontendId":"205","questionId":"205","Content":"<p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p>\n\n<p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p>\n\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;egg&quot;, t = &quot;add&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strings <code>s</code> and <code>t</code> can be made identical by:</p>\n\n<ul>\n\t<li>Mapping <code>&#39;e&#39;</code> to <code>&#39;a&#39;</code>.</li>\n\t<li>Mapping <code>&#39;g&#39;</code> to <code>&#39;d&#39;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;foo&quot;, t = &quot;bar&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strings <code>s</code> and <code>t</code> can not be made identical as <code>&#39;o&#39;</code> needs to be mapped to both <code>&#39;a&#39;</code> and <code>&#39;r&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;paper&quot;, t = &quot;title&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>s</code> and <code>t</code> consist of any valid ascii character.</li>\n</ul>\n","SampleTestCase":"\"egg\"\n\"add\"","ExampleTestcases":"\"egg\"\n\"add\"\n\"foo\"\n\"bar\"\n\"paper\"\n\"title\"","Difficulty":"Easy","Title":"Isomorphic Strings","TitleSlug":"isomorphic-strings","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"4M\", \"totalAcceptedRaw\": 1910864, \"totalSubmissionRaw\": 4036935, \"acRate\": \"47.3%\"}","Likes":10029,"Dislikes":2231,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isIsomorphic(char* s, char* t) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsIsomorphic(string s, string t) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isIsomorphic = function(s, t) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isIsomorphic(s: string, t: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isIsomorphic($s, $t) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isIsomorphic(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isIsomorphic(s: String, t: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isIsomorphic(String s, String t) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isIsomorphic(s string, t string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_isomorphic(s, t)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isIsomorphic(s: String, t: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_isomorphic(s: String, t: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-isomorphic s t)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_isomorphic(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_isomorphic(S, T) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_isomorphic(s :: String.t, t :: String.t) :: boolean\n  def is_isomorphic(s, t) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:52:40.459381565+02:00","AcRate":"47.3","TotalSubmissions":4036935,"TotalAccepted":1910864,"AcceptanceRate":0.47334524831338626,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/isomorphic-strings/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        # Maps to store character mappings from s to t and vice versa\n        map_st = {}\n        map_ts = {}\n        \n        # Iterate over the length of the strings\n        for char_s, char_t in zip(s, t):\n            # If current mapping does not exist, create it\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            # Check if existing mappings are consistent\n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        # Maps to store character mappings from s to t and vice versa\n        map_st = {}\n        map_ts = {}\n        \n        # Iterate over the length of the strings\n        for char_s, char_t in zip(s, t):\n            # If current mapping does not exist, create it\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            # Check if existing mappings are consistent\n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        map_st = {}\n        map_ts = {}\n        \n        for char_s, char_t in zip(s, t):\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n```\n\n=== VERIFICATION ===\nHere is the verified solution that meets all the given requirements:\n\n```python\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        map_st = {}\n        map_ts = {}\n        \n        for char_s, char_t in zip(s, t):\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n```\n\nVerification Report:\n\n1. **Correctness**: The implemented code correctly follows the design algorithm by using two dictionaries to map characters from string `s` to `t`, and vice versa. It checks for consistency in mappings during the iteration over the strings.\n\n2. **Edge Cases**: The code correctly handles edge cases such as:\n   - Strings `s` and `t` being empty (though the problem constraints ensure `s` is always at least length 1).\n   - Strings having characters mapping to themselves.\n   - Each pair of characters maintaining a one-to-one mapping.\n\n3. **Complexity**: The solution efficiently maps characters and checks consistency, resulting in a time complexity of O(n) and a space complexity of O(n), where n is the length of the strings. This is optimal for the problem requirements.\n\n4. **Code Quality**: The code is clean and readable. It follows Python best practices using `zip` for iteration and dictionaries for mapping.\n\n5. **Test Cases**: The code has been tested with provided examples:\n   - For `s = \"egg\"` and `t = \"add\"`, the function correctly returns `True`.\n   - For `s = \"foo\"` and `t = \"bar\"`, the function correctly returns `False`.\n   - For `s = \"paper\"` and `t = \"title\"`, the function correctly returns `True`.\n\n6. **Potential Issues**: No logical errors or bugs found. The solution is well-structured and straightforward.\n\nThe solution correctly solves the problem according to the given criteria and is confirmed as valid.\n\n","TypedCode":"\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        map_st = {}\n        map_ts = {}\n        \n        for char_s, char_t in zip(s, t):\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n","Model":"se-gpt-4o","Latency":9515428397,"SolvedAt":"2025-09-07T16:05:40.45557369+02:00","PromptTokens":3348,"OutputTokens":911}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"205","typed_code":"\nclass Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        map_st = {}\n        map_ts = {}\n        \n        for char_s, char_t in zip(s, t):\n            if char_s not in map_st:\n                map_st[char_s] = char_t\n            if char_t not in map_ts:\n                map_ts[char_t] = char_s\n            \n            if map_st[char_s] != char_t or map_ts[char_t] != char_s:\n                return False\n        \n        return True\n"},"SubmissionId":1762749599,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:28:37.632739443+02:00"}}}
