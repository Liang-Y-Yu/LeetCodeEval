{"Question":{"Data":{"Question":{"questionFrontendId":"30","questionId":"30","Content":"<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p>\n\n<p>A <strong>concatenated string</strong> is a string that exactly contains all the strings of any permutation of <code>words</code> concatenated.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated string because it is not the concatenation of any permutation of <code>words</code>.</li>\n</ul>\n\n<p>Return an array of <em>the starting indices</em> of all the concatenated substrings in <code>s</code>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,9]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 0 is <code>&quot;barfoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;foo&quot;]</code> which is a permutation of <code>words</code>.<br />\nThe substring starting at 9 is <code>&quot;foobar&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;]</code> which is a permutation of <code>words</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no concatenated substring.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[6,9,12]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 6 is <code>&quot;foobarthe&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;]</code>.<br />\nThe substring starting at 9 is <code>&quot;barthefoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;]</code>.<br />\nThe substring starting at 12 is <code>&quot;thefoobar&quot;</code>. It is the concatenation of <code>[&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"barfoothefoobarman\"\n[\"foo\",\"bar\"]","ExampleTestcases":"\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]","Difficulty":"Hard","Title":"Substring with Concatenation of All Words","TitleSlug":"substring-with-concatenation-of-all-words","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"617K\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 617004, \"totalSubmissionRaw\": 1854779, \"acRate\": \"33.3%\"}","Likes":2380,"Dislikes":389,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findSubstring(s: string, words: string[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findSubstring(s string, words []string) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:57:47.076495675+02:00","AcRate":"33.3","TotalSubmissions":1854779,"TotalAccepted":617004,"AcceptanceRate":0.3326563434242031,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/substring-with-concatenation-of-all-words/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n\n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n\n        results = []\n\n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n\n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n\n                if word in word_count:\n                    current_count[word] += 1\n\n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n\n                    if (right - left) == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n\n        return results\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        # Step 1: Initialize variables and data structures\n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n        results = []\n        \n        # Step 2 & 3: Use a sliding window to explore possible substrings\n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n            \n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                \n                # Step 4: If the word is part of the intended concatenation, update the count\n                if word in word_count:\n                    current_count[word] += 1\n                    \n                    # Step 5: If any word count exceeds the desired frequency, adjust the window\n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    \n                    # Step 6: If valid substring is found, record its start index\n                    if right - left == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        # Step 7: Return the collected start indices\n        return results\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n        results = []\n        \n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n            \n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                \n                if word in word_count:\n                    current_count[word] += 1\n                    \n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    \n                    if (right - left) == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        return results\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n        results = []\n        \n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n            \n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                \n                if word in word_count:\n                    current_count[word] += 1\n                    \n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    \n                    if (right - left) == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        return results\n```\n\n","TypedCode":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n        results = []\n        \n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n            \n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                \n                if word in word_count:\n                    current_count[word] += 1\n                    \n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    \n                    if (right - left) == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        return results\n","Model":"se-gpt-4o","Latency":7428306998,"SolvedAt":"2025-09-07T16:12:54.032460427+02:00","PromptTokens":4746,"OutputTokens":967}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"30","typed_code":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        word_length = len(words[0])\n        num_words = len(words)\n        substring_length = word_length * num_words\n        word_count = Counter(words)\n        results = []\n        \n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = Counter()\n            \n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                \n                if word in word_count:\n                    current_count[word] += 1\n                    \n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    \n                    if (right - left) == substring_length:\n                        results.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        return results\n"},"SubmissionId":1762764782,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:44:48.70085951+02:00"}}}
