{"Question":{"Data":{"Question":{"questionFrontendId":"394","questionId":"394","Content":"<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n","SampleTestCase":"\"3[a]2[bc]\"","ExampleTestcases":"\"3[a]2[bc]\"\n\"3[a2[c]]\"\n\"2[abc]3[cd]ef\"","Difficulty":"Medium","Title":"Decode String","TitleSlug":"decode-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 1066906, \"totalSubmissionRaw\": 1734043, \"acRate\": \"61.5%\"}","Likes":13564,"Dislikes":678,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"},{"Id":"VG9waWNUYWdOb2RlOjMx","Name":"Recursion","Slug":"recursion"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string decodeString(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String decodeString(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def decodeString(self, s: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* decodeString(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string DecodeString(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function decodeString(s: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func decodeString(_ s: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun decodeString(s: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String decodeString(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func decodeString(s string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {String}\ndef decode_string(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn decode_string(s: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (decode-string s)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec decode_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ndecode_string(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec decode_string(s :: String.t) :: String.t\n  def decode_string(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:50:18.720729338+02:00","AcRate":"61.5","TotalSubmissions":1734043,"TotalAccepted":1066906,"AcceptanceRate":0.6152707862492452,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/decode-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n\n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n\n=== DESIGN ===\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        # Algorithm Choice: Use a stack-based approach to decode the string iteratively.\n        \n        # Step-by-Step Approach:\n        # 1. Initialize a stack to keep track of the current strings and repeat numbers.\n        # 2. Initialize current_string as an empty string to build the current level's decoded string.\n        # 3. Initialize current_num as 0 to keep track of the repeat number for the current level.\n        # 4. Iterate over each character in the string s:\n        #     a. If it's a digit, update current_num by multiplying it by 10 (to shift digits left) and adding the integer value of the char.\n        #     b. If it's '[', push the current_string and current_num onto the stack, and reset current_string and current_num.\n        #     c. If it's ']', pop from the stack to retrieve the last_string and num, and construct a new current_string by repeating the current_string num times and prepending last_string.\n        #     d. If it's a letter, append it to current_string.\n        # 5. After processing all characters, current_string contains the fully decoded string. Return current_string.\n\n        stack = []\n        current_string = \"\"\n        current_num = 0\n\n        # Iterate over each character in the input string\n        for char in s:\n            if char.isdigit():\n                # Update the current multiplier value\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                # Push current_string and current_num onto stack\n                stack.append((current_string, current_num))\n                # Reset current_string and current_num for the new level\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                # Pop from stack to retrieve previous string and multiplier\n                last_string, num = stack.pop()\n                # Repeat the current_string num times and prepend last_string\n                current_string = last_string + current_string * num\n            else:\n                # Append letter to the current string\n                current_string += char\n\n        return current_string\n\n# Time Complexity: O(n), where n is the length of the input string s. Each character is processed exactly once.\n# Space Complexity: O(m), where m is the total number of characters accumulated in final decoded string and the maximum stack depth.\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        \n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n```\n\n=== VERIFICATION ===\nThe implemented solution provided is correctly solving the problem using a stack-based approach to decode the string iteratively. Hereâ€™s the verification report based on the criteria specified:\n\n1. **Correctness**: \n   - The code correctly implements the algorithm described in the design section. It uses a stack to keep track of repeat numbers and partial strings, reconstructing the decoded string as it processes each character.\n   - Each character in the string is handled appropriately:\n     - Digits are used to build the repeat count (current_num).\n     - The '[' character signals the start of a repeat section, pushing the current context onto the stack.\n     - The ']' character finalizes a repeat section, popping from the stack and constructing the expanded string.\n     - Regular characters are appended directly to the current string being built.\n\n2. **Edge Cases**:\n   - The solution handles nested encoded strings (e.g., \"3[a2[c]]\") and multiple disjoint encoded sections (e.g., \"2[abc]3[cd]ef\").\n   - The assumption that the input is valid (well-formed and containing only lowercase letters, digits, and proper bracket pairs) is respected.\n\n3. **Complexity**:\n   - Time Complexity: O(n), where n is the length of the input string. Each character is processed exactly once.\n   - Space Complexity: O(m), where m is the total number of characters accumulated in the final decoded string and the maximum stack depth (due to nested brackets).\n\n4. **Code Quality**:\n   - The code is clean and readable, with well-named variables and clear logic flow. It follows best practices for iterative processing and stack usage.\n\n5. **Test Cases**:\n   - Example 1: \"3[a]2[bc]\" correctly decodes to \"aaabcbc\".\n   - Example 2: \"3[a2[c]]\" correctly decodes to \"accaccacc\".\n   - Example 3: \"2[abc]3[cd]ef\" correctly decodes to \"abcabccdcdcdef\".\n   - The provided examples show expected outputs and the code produces correct results for these.\n\n6. **Potential Issues**: \n   - There are no evident logical errors or bugs with the current solution. It handles all described scenarios effectively. No improvements are necessary since the solution meets all requirements and constraints.\n\nThus, the solution is verified to be correct, efficient, and cleanly implemented. It adheres to the provided specifications and meets all requirements. Hereâ€™s the final code snippet:\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        \n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n```\n\n","TypedCode":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        \n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n","Model":"se-gpt-4o","Latency":11837854253,"SolvedAt":"2025-09-07T16:02:10.600598954+02:00","PromptTokens":4040,"OutputTokens":1405}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"394","typed_code":"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_string = \"\"\n        current_num = 0\n        \n        for char in s:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '[':\n                stack.append((current_string, current_num))\n                current_string = \"\"\n                current_num = 0\n            elif char == ']':\n                last_string, num = stack.pop()\n                current_string = last_string + current_string * num\n            else:\n                current_string += char\n        \n        return current_string\n"},"SubmissionId":1762742714,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:21:37.860127706+02:00"}}}
