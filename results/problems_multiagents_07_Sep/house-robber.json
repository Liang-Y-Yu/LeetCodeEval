{"Question":{"Data":{"Question":{"questionFrontendId":"198","questionId":"198","Content":"<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9,3,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 400</code></li>\n</ul>\n","SampleTestCase":"[1,2,3,1]","ExampleTestcases":"[1,2,3,1]\n[2,7,9,3,1]","Difficulty":"Medium","Title":"House Robber","TitleSlug":"house-robber","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.1M\", \"totalSubmission\": \"5.9M\", \"totalAcceptedRaw\": 3116584, \"totalSubmissionRaw\": 5930029, \"acRate\": \"52.6%\"}","Likes":22730,"Dislikes":488,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def rob(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int rob(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int Rob(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function rob(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function rob($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun rob(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int rob(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func rob(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef rob(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn rob(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (rob nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec rob(Nums :: [integer()]) -> integer().\nrob(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec rob(nums :: [integer]) :: integer\n  def rob(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:52:02.048535498+02:00","AcRate":"52.6","TotalSubmissions":5930029,"TotalAccepted":3116584,"AcceptanceRate":0.5255596557790864,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/house-robber/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        if len(nums) > 1:\n            dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        return dp[-1]\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        # Initialize the dp array to store the maximum money for the first i houses.\n        dp = [0] * len(nums)\n        \n        # Base cases:\n        dp[0] = nums[0]\n        if len(nums) > 1:\n            dp[1] = max(nums[0], nums[1])\n        \n        # Fill the dp array using the relation:\n        # dp[i] = max(dp[i-1], nums[i] + dp[i-2])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        # The last element of dp array contains the maximum amount of money we can rob.\n        return dp[-1]\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        return dp[-1]\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        return dp[-1]\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the designed algorithm to solve the problem using dynamic programming. It uses a `dp` array to store the maximum money that can be robbed up to each house index, based on the constraints that prevent robbing two adjacent houses.\n\n2. **Edge Cases**: \n   - The code appropriately handles edge cases such as an empty list (`if not nums`).\n   - It handles the single house scenario (`if len(nums) == 1`) correctly.\n   - The initialization of the `dp` array and base cases are implemented accurately.\n\n3. **Complexity**:\n   - **Time Complexity**: The solution has a time complexity of O(n), where n is the number of houses. This is optimal because it iterates through the list once to compute the maximum amount.\n   - **Space Complexity**: The space complexity is O(n) due to the `dp` array storing results for each house.\n\n4. **Code Quality**: \n   - The code is clear and concise, adhering to best practices for readability.\n   - Variable naming (`dp`) is suitable for dynamic programming context.\n   - Conditional checks and loops are straightforward and easy to follow.\n\n5. **Test Cases**: \n   - The provided code passes all given examples. For `nums = [1,2,3,1]`, it returns 4, and for `nums = [2,7,9,3,1]`, it returns 12.\n   - Additional test cases with varying input sizes and configurations, such as `nums = []`, and `nums = [5, 1, 1, 5]` would return 10, confirming correctness for these scenarios.\n\n6. **Potential Issues**: No bugs or logical errors were identified. The solution doesn't need improvements as it meets the problem constraints, efficiently solving the problem within expected complexity.\n\nOverall, the solution is valid and correctly implements the designed algorithm, addressing the problem statement comprehensively.\n\n","TypedCode":"\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        return dp[-1]\n","Model":"se-gpt-4o","Latency":8553311267,"SolvedAt":"2025-09-07T16:04:48.675092911+02:00","PromptTokens":3433,"OutputTokens":1003}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"198","typed_code":"\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        \n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        \n        return dp[-1]\n"},"SubmissionId":1762747854,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:26:51.820756204+02:00"}}}
