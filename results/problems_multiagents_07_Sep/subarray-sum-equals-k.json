{"Question":{"Data":{"Question":{"questionFrontendId":"560","questionId":"560","Content":"<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of subarrays whose sum equals to</em> <code>k</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n","SampleTestCase":"[1,1,1]\n2","ExampleTestcases":"[1,1,1]\n2\n[1,2,3]\n3","Difficulty":"Medium","Title":"Subarray Sum Equals K","TitleSlug":"subarray-sum-equals-k","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2M\", \"totalSubmission\": \"4.3M\", \"totalAcceptedRaw\": 1982222, \"totalSubmissionRaw\": 4309982, \"acRate\": \"46.0%\"}","Likes":23879,"Dislikes":786,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjYxMDY4","Name":"Prefix Sum","Slug":"prefix-sum"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int subarraySum(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def subarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int subarraySum(int* nums, int numsSize, int k) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function subarraySum(nums: number[], k: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarraySum($nums, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun subarraySum(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int subarraySum(List<int> nums, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func subarraySum(nums []int, k int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def subarraySum(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nsubarray_sum(Nums, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec subarray_sum(nums :: [integer], k :: integer) :: integer\n  def subarray_sum(nums, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:57:37.681074429+02:00","AcRate":"46.0","TotalSubmissions":4309982,"TotalAccepted":1982222,"AcceptanceRate":0.4599142177391924,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/subarray-sum-equals-k/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n```\n\n","TypedCode":"\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n","Model":"se-gpt-4o","Latency":4762813599,"SolvedAt":"2025-09-07T16:12:42.344522312+02:00","PromptTokens":2729,"OutputTokens":460}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"560","typed_code":"\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        count = 0\n        cumulative_sum = 0\n        sum_dict = defaultdict(int)\n        sum_dict[0] = 1\n        \n        for num in nums:\n            cumulative_sum += num\n            if cumulative_sum - k in sum_dict:\n                count += sum_dict[cumulative_sum - k]\n            sum_dict[cumulative_sum] += 1\n        \n        return count\n"},"SubmissionId":1762764264,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:44:14.100361875+02:00"}}}
