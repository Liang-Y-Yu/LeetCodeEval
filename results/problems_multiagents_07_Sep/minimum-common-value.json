{"Question":{"Data":{"Question":{"questionFrontendId":"2540","questionId":"2634","Content":"<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, return <em>the <strong>minimum integer common</strong> to both arrays</em>. If there is no common integer amongst <code>nums1</code> and <code>nums2</code>, return <code>-1</code>.</p>\n\n<p>Note that an integer is said to be <strong>common</strong> to <code>nums1</code> and <code>nums2</code> if both arrays have <strong>at least one</strong> occurrence of that integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The smallest element common to both arrays is 2, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,6], nums2 = [2,3,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n\t<li>Both <code>nums1</code> and <code>nums2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n","SampleTestCase":"[1,2,3]\n[2,4]","ExampleTestcases":"[1,2,3]\n[2,4]\n[1,2,3,6]\n[2,3,4,5]","Difficulty":"Easy","Title":"Minimum Common Value","TitleSlug":"minimum-common-value","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"290.6K\", \"totalSubmission\": \"500.3K\", \"totalAcceptedRaw\": 290597, \"totalSubmissionRaw\": 500346, \"acRate\": \"58.1%\"}","Likes":1215,"Dislikes":41,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int getCommon(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int getCommon(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def getCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int getCommon(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int GetCommon(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar getCommon = function(nums1, nums2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function getCommon(nums1: number[], nums2: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function getCommon($nums1, $nums2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func getCommon(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun getCommon(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int getCommon(List<int> nums1, List<int> nums2) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func getCommon(nums1 []int, nums2 []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef get_common(nums1, nums2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def getCommon(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn get_common(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (get-common nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec get_common(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nget_common(Nums1, Nums2) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec get_common(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def get_common(nums1, nums2) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:55:04.018363392+02:00","AcRate":"58.1","TotalSubmissions":500346,"TotalAccepted":290597,"AcceptanceRate":0.5807920918724243,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/minimum-common-value/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        \n        return -1\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def getCommon(self, nums1, nums2) -> int:\n        i, j = 0, 0\n        \n        # Iterate through both arrays\n        while i < len(nums1) and j < len(nums2):\n            # If current element in nums1 is smaller, move to the next element in nums1\n            if nums1[i] < nums2[j]:\n                i += 1\n            # If current element in nums2 is smaller, move to the next element in nums2\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                # If elements are equal, this is the common element we are looking for\n                return nums1[i]\n        \n        # No common element found\n        return -1\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        \n        return -1\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        \n        return -1\n```\n\n","TypedCode":"\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        \n        return -1\n","Model":"se-gpt-4o","Latency":4769095779,"SolvedAt":"2025-09-07T16:09:16.739179199+02:00","PromptTokens":3211,"OutputTokens":486}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"2634","typed_code":"\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        \n        return -1\n"},"SubmissionId":1762756957,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:36:14.519434514+02:00"}}}
