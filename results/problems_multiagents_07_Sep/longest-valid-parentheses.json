{"Question":{"Data":{"Question":{"questionFrontendId":"32","questionId":"32","Content":"<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n","SampleTestCase":"\"(()\"","ExampleTestcases":"\"(()\"\n\")()())\"\n\"\"","Difficulty":"Hard","Title":"Longest Valid Parentheses","TitleSlug":"longest-valid-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"961.5K\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 961472, \"totalSubmissionRaw\": 2607006, \"acRate\": \"36.9%\"}","Likes":12992,"Dislikes":451,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int longestValidParentheses(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestValidParentheses(s: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestValidParentheses(s string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:53:41.681079194+02:00","AcRate":"36.9","TotalSubmissions":2607006,"TotalAccepted":961472,"AcceptanceRate":0.3688031404607431,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-valid-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        stack = [-1]\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        # Initialize max_length to store the length of longest valid parentheses\n        max_length = 0\n        \n        # Stack to keep track of indices of '(' characters.\n        # We start with -1 to handle the edge case of a valid substring starting at index 0\n        stack = [-1]\n        \n        # Iterate over the characters in the string `s`\n        for i, char in enumerate(s):\n            if char == '(':\n                # If current character is '(', push the index onto the stack\n                stack.append(i)\n            else:\n                # If current character is ')', pop the top of the stack\n                stack.pop()\n                if not stack:\n                    # If stack is empty, push current index onto the stack\n                    # This means we have an unmatched ')' and need a new base for future calculations\n                    stack.append(i)\n                else:\n                    # Calculate valid substring length using stack.top and update max_length\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        stack = [-1]\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n```\n\n=== VERIFICATION ===\nThe implemented code for the problem statement has been reviewed for correctness and quality. Below is the verification report:\n\n1. **Correctness**:\n   - The code correctly implements the algorithm to find the longest valid parentheses.\n   - It uses a stack-based approach where indices of '(' are pushed onto the stack. When a ')' is encountered, the stack is popped, and the length of the valid substring is calculated using the current index and the last unmatched '(' index.\n\n2. **Edge Cases**:\n   - The code handles an empty string: when `s = \"\"`, it correctly returns `0`.\n   - It handles the case where parentheses start with ')', ensuring the stack base index is updated accordingly.\n   - It processes strings containing all '(', all ')', and mixed strings appropriately.\n\n3. **Complexity**:\n   - The time complexity is O(n), where n is the length of the input string `s`, given each character is processed once.\n   - The space complexity is O(n) in the worst case when all characters are '(' and their indices are stored in the stack.\n\n4. **Code Quality**:\n   - The code is clean and readable, following good practices such as clear variable names.\n   - Logic is straightforward and efficiently implemented using Python lists as stacks.\n\n5. **Test Cases**:\n   - The provided examples produce correct outputs:\n     - Example 1: `s = \"(()\"` returns `2`.\n     - Example 2: `s = \")()())\"` returns `4`.\n     - Example 3: `s = \"\"` returns `0`.\n\n6. **Potential Issues**:\n   - There are no apparent bugs or logical errors in the current implementation.\n   - The code is optimal given the constraints and the approach used.\n\nOverall, the solution is correct and adheres to the requirements specified in the problem statement.\n\n\n```python\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        stack = [-1]\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n```\n\n","TypedCode":"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        stack = [-1]\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n","Model":"se-gpt-4o","Latency":7166817586,"SolvedAt":"2025-09-07T16:07:15.760513767+02:00","PromptTokens":2825,"OutputTokens":901}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"32","typed_code":"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        stack = [-1]\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        \n        return max_length\n"},"SubmissionId":1762753321,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:32:23.462216309+02:00"}}}
