{"Question":{"Data":{"Question":{"questionFrontendId":"12","questionId":"12","Content":"<p>Seven different symbols represent Roman numerals with the following values:</p>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Symbol</th>\n\t\t\t<th>Value</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>I</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>V</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>X</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>L</td>\n\t\t\t<td>50</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>C</td>\n\t\t\t<td>100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>D</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>M</td>\n\t\t\t<td>1000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Roman numerals are formed by appending&nbsp;the conversions of&nbsp;decimal place values&nbsp;from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:</p>\n\n<ul>\n\t<li>If the value does not start with 4 or&nbsp;9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.</li>\n\t<li>If the value starts with 4 or 9 use the&nbsp;<strong>subtractive form</strong>&nbsp;representing&nbsp;one symbol subtracted from the following symbol, for example,&nbsp;4 is 1 (<code>I</code>) less than 5 (<code>V</code>): <code>IV</code>&nbsp;and 9 is 1 (<code>I</code>) less than 10 (<code>X</code>): <code>IX</code>.&nbsp;Only the following subtractive forms are used: 4 (<code>IV</code>), 9 (<code>IX</code>),&nbsp;40 (<code>XL</code>), 90 (<code>XC</code>), 400 (<code>CD</code>) and 900 (<code>CM</code>).</li>\n\t<li>Only powers of 10 (<code>I</code>, <code>X</code>, <code>C</code>, <code>M</code>) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5&nbsp;(<code>V</code>), 50 (<code>L</code>), or 500 (<code>D</code>) multiple times. If you need to append a symbol&nbsp;4 times&nbsp;use the <strong>subtractive form</strong>.</li>\n</ul>\n\n<p>Given an integer, convert it to a Roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 3749</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;MMMDCCXLIX&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 58</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;LVIII&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n50 = L\n 8 = VIII\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 1994</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;MCMXCIV&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n</pre>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n","SampleTestCase":"3749","ExampleTestcases":"3749\n58\n1994","Difficulty":"Medium","Title":"Integer to Roman","TitleSlug":"integer-to-roman","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1851456, \"totalSubmissionRaw\": 2671517, \"acRate\": \"69.3%\"}","Likes":8079,"Dislikes":5685,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def intToRoman(self, num: int) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* intToRoman(int num) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function intToRoman(num: number): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String intToRoman(int num) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func intToRoman(num int) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:52:02.078078048+02:00","AcRate":"69.3","TotalSubmissions":2671517,"TotalAccepted":1851456,"AcceptanceRate":0.6930354551365385,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/integer-to-roman/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        # List of tuples containing Roman numeral symbols and their values\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        # List of tuples containing Roman numeral symbols and their values\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n```\n\n=== VERIFICATION ===\nHere is the expanded code with the given solution:\n\n```python\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the algorithm that converts integers to Roman numerals by using a list of tuples, with each tuple containing a numeral value and its corresponding Roman symbol. It iterates over the list, subtracts the value from `num` while adding the corresponding symbol to the `result`.\n\n2. **Edge Cases**: Given the constraints of `1 <= num <= 3999`, the algorithm correctly handles edge cases such as the smallest possible input (`num = 1`, which becomes \"I\") and the largest possible input (`num = 3999`, which becomes \"MMMCMXCIX\").\n\n3. **Complexity**: The time complexity is O(1) given the fixed upper limit of `3999` for `num`. Each numeral subtraction and addition will occur a limited number of times due to this constraint. The space complexity is O(1) as well, aside from the space used to store the Roman numeral string.\n\n4. **Code Quality**: The code is clean and readable. It uses a straightforward approach to iterate over a list of values and symbols, appending symbols to the result until the remainder is less than the current value.\n\n5. **Test Cases**: The solution passes the provided sample test cases:\n   - For input `num = 3749`, it correctly returns \"MMMDCCXLIX\".\n   - For input `num = 58`, it correctly returns \"LVIII\".\n   - For input `num = 1994`, it correctly returns \"MCMXCIV\".\n\n6. **Potential Issues**: There are no obvious bugs or logical errors. The solution correctly uses the subtractive method for 4s and 9s, and handles sequential symbols correctly.\n\nConclusion: The provided solution is correct and efficiently meets the requirements of converting integers to Roman numerals under the given constraints. No further improvements or bug fixes are necessary.\n\n","TypedCode":"\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n","Model":"se-gpt-4o","Latency":8856810934,"SolvedAt":"2025-09-07T16:05:10.048354285+02:00","PromptTokens":4719,"OutputTokens":1012}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"12","typed_code":"\nclass Solution:\n    def intToRoman(self, num: int) -> str:\n        value_symbols = [\n            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),\n            (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        \n        result = \"\"\n        \n        for value, symbol in value_symbols:\n            while num >= value:\n                result += symbol\n                num -= value\n        \n        return result\n"},"SubmissionId":1762748655,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:27:37.13677608+02:00"}}}
