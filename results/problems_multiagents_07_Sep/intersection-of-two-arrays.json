{"Question":{"Data":{"Question":{"questionFrontendId":"349","questionId":"349","Content":"<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their <span data-keyword=\"array-intersection\">intersection</span></em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [9,4]\n<strong>Explanation:</strong> [4,9] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n","SampleTestCase":"[1,2,2,1]\n[2,2]","ExampleTestcases":"[1,2,2,1]\n[2,2]\n[4,9,5]\n[9,4,9,8,4]","Difficulty":"Easy","Title":"Intersection of Two Arrays","TitleSlug":"intersection-of-two-arrays","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1625997, \"totalSubmissionRaw\": 2116096, \"acRate\": \"76.8%\"}","Likes":6598,"Dislikes":2328,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] Intersection(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function intersection(nums1: number[], nums2: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersection($nums1, $nums2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> intersection(List<int> nums1, List<int> nums2) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func intersection(nums1 []int, nums2 []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersection(nums1, nums2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (intersection nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec intersection(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\nintersection(Nums1, Nums2) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec intersection(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def intersection(nums1, nums2) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:52:10.380305243+02:00","AcRate":"76.8","TotalSubmissions":2116096,"TotalAccepted":1625997,"AcceptanceRate":0.768394723112751,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/intersection-of-two-arrays/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Convert both lists to sets to eliminate duplicates\n        set1 = set(nums1)\n        set2 = set(nums2)\n        \n        # Find the intersection of these sets\n        result = set1.intersection(set2)\n        \n        # Return as a list\n        return list(result)\n```\n\n=== DESIGN ===\nHere is the solution to the given problem:\n\n```python\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Convert both lists to sets to eliminate duplicates\n        set1 = set(nums1)\n        set2 = set(nums2)\n        \n        # Find the intersection of these sets\n        result = set1.intersection(set2)\n        \n        # Return as a list\n        return list(result)\n```\n\nExplanation:\n1. **Algorithm Choice**: Use sets to leverage their properties for efficient lookup and intersection operations.\n2. **Step-by-Step Approach**:\n   - Convert `nums1` and `nums2` to sets (`set1` and `set2`) to remove duplicates naturally.\n   - Use set intersection to find common elements between `set1` and `set2`.\n   - Convert the resulting set back to a list for the final result.\n3. **Data Structures**: Sets are used to store the unique elements from each list and facilitate the intersection operation.\n4. **Time Complexity**: O(n + m), where n and m are the lengths of `nums1` and `nums2`, respectively. This accounts for converting lists to sets and performing the intersection operation.\n5. **Space Complexity**: O(n + m) for storing the sets.\n6. **Pseudocode**:\n   - Convert `nums1` to a set `set1`.\n   - Convert `nums2` to a set `set2`.\n   - Perform intersection of `set1` and `set2`.\n   - Convert intersection result to list and return.\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        result = set1.intersection(set2)\n        return list(result)\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        result = set1.intersection(set2)\n        return list(result)\n```\n\n","TypedCode":"\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        result = set1.intersection(set2)\n        return list(result)\n","Model":"se-gpt-4o","Latency":4998865582,"SolvedAt":"2025-09-07T16:05:15.049775772+02:00","PromptTokens":3112,"OutputTokens":546}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"349","typed_code":"\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        result = set1.intersection(set2)\n        return list(result)\n"},"SubmissionId":1762748871,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:27:51.176689809+02:00"}}}
