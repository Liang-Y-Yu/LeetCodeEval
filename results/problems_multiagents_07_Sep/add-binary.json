{"Question":{"Data":{"Question":{"questionFrontendId":"67","questionId":"67","Content":"<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n","SampleTestCase":"\"11\"\n\"1\"","ExampleTestcases":"\"11\"\n\"1\"\n\"1010\"\n\"1011\"","Difficulty":"Easy","Title":"Add Binary","TitleSlug":"add-binary","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2M\", \"totalSubmission\": \"3.5M\", \"totalAcceptedRaw\": 1973411, \"totalSubmissionRaw\": 3520193, \"acRate\": \"56.1%\"}","Likes":10138,"Dislikes":1067,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE5","Name":"Bit Manipulation","Slug":"bit-manipulation"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU1","Name":"Simulation","Slug":"simulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* addBinary(char* a, char* b) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function addBinary(a: string, b: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func addBinary(a string, b string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:49:26.664089288+02:00","AcRate":"56.1","TotalSubmissions":3520193,"TotalAccepted":1973411,"AcceptanceRate":0.5605973877000494,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/add-binary/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n```\n\n=== VERIFICATION ===\nVerification Report:\n\n1. **Correctness**: \n   - The code correctly implements a function to add two binary strings. It aligns the lengths of both strings, processes each bit from the rightmost to the leftmost, and manages carry values. The final result is reversed because each computed least significant bit is appended to the result list.\n\n2. **Edge Cases**: \n   - The solution correctly handles the edge case where one string is longer than the other by padding the shorter string with leading zeros using the `zfill` method.\n   - It also correctly handles the carry beyond the leftmost bit by appending \"1\" to the result if a carry remains after processing all bits.\n\n3. **Complexity**: \n   - The time complexity is O(n), where n is the maximum length of the two strings because it iterates once over all bits.\n   - The space complexity is O(n) as well, because it uses a list to store the result, which could potentially store n+1 bits in the worst case (including the carry).\n\n4. **Code Quality**: \n   - The code is clean, readable, and uses clear variable names and appropriate Python language features. The use of list and string operations is efficient for the problem size constraints.\n\n5. **Test Cases**: \n   - Given example test cases \"11\" and \"1\" produce \"100\"; \"1010\" and \"1011\" produce \"10101\", both of which are correct. The test coverage is adequate for basic functionality, although additional edge cases like inputs of maximum length could be useful for thorough testing.\n\n6. **Potential Issues**: \n   - There are no apparent bugs or logical errors in the current code. The implementation is straightforward and appears to cover the necessary cases.\n\nConclusion: The solution is correct, implements the problem requirements efficiently, and meets good coding standards. It passes all provided test cases and handles edge cases appropriately. No changes or fixes are needed.\n\nFinal approved implementation:\n\n```python\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n```\n\n","TypedCode":"\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n","Model":"se-gpt-4o","Latency":8141459630,"SolvedAt":"2025-09-07T15:59:41.515473781+02:00","PromptTokens":2755,"OutputTokens":953}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"67","typed_code":"\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        max_length = max(len(a), len(b))\n        a = a.zfill(max_length)\n        b = b.zfill(max_length)\n        \n        result = []\n        carry = 0\n        \n        for i in range(max_length - 1, -1, -1):\n            total_sum = int(a[i]) + int(b[i]) + carry\n            carry = total_sum // 2\n            result.append(str(total_sum % 2))\n        \n        if carry:\n            result.append(\"1\")\n        \n        return ''.join(result[::-1])\n"},"SubmissionId":1762737199,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:16:09.654195645+02:00"}}}
