{"Question":{"Data":{"Question":{"questionFrontendId":"49","questionId":"49","Content":"<p>Given an array of strings <code>strs</code>, group the <span data-keyword=\"anagram\">anagrams</span> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>There is no string in strs that can be rearranged to form <code>&quot;bat&quot;</code>.</li>\n\t<li>The strings <code>&quot;nat&quot;</code> and <code>&quot;tan&quot;</code> are anagrams as they can be rearranged to form each other.</li>\n\t<li>The strings <code>&quot;ate&quot;</code>, <code>&quot;eat&quot;</code>, and <code>&quot;tea&quot;</code> are anagrams as they can be rearranged to form each other.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;&quot;]]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;a&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;a&quot;]]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]","ExampleTestcases":"[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n[\"\"]\n[\"a\"]","Difficulty":"Medium","Title":"Group Anagrams","TitleSlug":"group-anagrams","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4.1M\", \"totalSubmission\": \"5.7M\", \"totalAcceptedRaw\": 4080861, \"totalSubmissionRaw\": 5714906, \"acRate\": \"71.4%\"}","Likes":21054,"Dislikes":719,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjYxMDQ5","Name":"Sorting","Slug":"sorting"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function groupAnagrams(strs: string[]): string[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func groupAnagrams(strs []string) [][]string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:52:19.896679958+02:00","AcRate":"71.4","TotalSubmissions":5714906,"TotalAccepted":4080861,"AcceptanceRate":0.714073162358226,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/group-anagrams/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        from collections import defaultdict\n        \n        anagram_dict = defaultdict(list)\n        \n        for s in strs:\n            # Sort the string to find the key\n            key = ''.join(sorted(s))\n            anagram_dict[key].append(s)\n        \n        return list(anagram_dict.values())\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        # Create a default dictionary to store the grouped anagrams\n        anagram_dict = defaultdict(list)\n        \n        # Iterate through each string in the input list\n        for s in strs:\n            # Sort the string which will serve as the key for anagram grouping\n            key = ''.join(sorted(s))\n            # Append the original string to the list at the sorted string key\n            anagram_dict[key].append(s)\n        \n        # Return the values of the dictionary which are lists of anagram groups\n        return list(anagram_dict.values())\n```\n\nAlgorithm Choice:\nThe algorithm utilizes sorting each string to determine its sorted form, which serves as the key to group anagrams. Sorting ensures that anagrams will have the same key, allowing us to group them together.\n\nStep-by-Step Approach:\n1. Initialize a dictionary to store groups of anagrams, using a list as the default value type.\n2. Iterate over each string in the input list `strs`.\n3. For each string, sort it to produce a key (sorted string).\n4. Append the original string to the dictionary using the sorted string as the key.\n5. Finally, convert the dictionary to a list of lists and return it as the result.\n\nData Structures:\n- Dictionary (specifically a defaultdict): To map and group strings based on sorted keys.\n\nTime Complexity:\n- The main operation is sorting each string. Sorting a string of length `m` typically takes `O(m log m)` time.\n- Given `n` strings, the total time complexity is `O(n * m log m)`, where `n` is the number of strings and `m` is the average length of the strings.\n\nSpace Complexity:\n- The space complexity is `O(n * m)` for storing the strings in the dictionary, assuming the length of each string is `m`. The space used by the dictionary keys (the sorted strings) is negligible compared to the strings stored. The space complexity is dominated by the space required to store the strings.\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagram_dict = defaultdict(list)\n        for s in strs:\n            key = ''.join(sorted(s))\n            anagram_dict[key].append(s)\n        return list(anagram_dict.values())\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        # Create a defaultdict to store lists of anagrams\n        anagram_dict = defaultdict(list)\n        \n        # Iterate through each string in the list\n        for s in strs:\n            # Sort the string to find the key\n            key = ''.join(sorted(s))\n            # Append the original string to the list in the dictionary keyed by the sorted string\n            anagram_dict[key].append(s)\n        \n        # Return a list of the grouped anagrams\n        return list(anagram_dict.values())\n```\n\n","TypedCode":"\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagram_dict = defaultdict(list)\n        for s in strs:\n            key = ''.join(sorted(s))\n            anagram_dict[key].append(s)\n        return list(anagram_dict.values())\n","Model":"se-gpt-4o","Latency":6356075073,"SolvedAt":"2025-09-07T16:04:30.141718839+02:00","PromptTokens":3491,"OutputTokens":735}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"49","typed_code":"\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagram_dict = defaultdict(list)\n        for s in strs:\n            key = ''.join(sorted(s))\n            anagram_dict[key].append(s)\n        return list(anagram_dict.values())\n"},"SubmissionId":1762747236,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:26:11.770191043+02:00"}}}
