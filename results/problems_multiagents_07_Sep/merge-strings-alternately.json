{"Question":{"Data":{"Question":{"questionFrontendId":"1768","questionId":"1894","Content":"<p>You are given two strings <code>word1</code> and <code>word2</code>. Merge the strings by adding letters in alternating order, starting with <code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p>\r\n\r\n<p>Return <em>the merged string.</em></p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;abc&quot;, word2 = &quot;pqr&quot;\r\n<strong>Output:</strong> &quot;apbqcr&quot;\r\n<strong>Explanation:</strong>&nbsp;The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;ab&quot;, word2 = &quot;pqrs&quot;\r\n<strong>Output:</strong> &quot;apbqrs&quot;\r\n<strong>Explanation:</strong>&nbsp;Notice that as word2 is longer, &quot;rs&quot; is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;abcd&quot;, word2 = &quot;pq&quot;\r\n<strong>Output:</strong> &quot;apbqcd&quot;\r\n<strong>Explanation:</strong>&nbsp;Notice that as word1 is longer, &quot;cd&quot; is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li>\r\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\r\n</ul>","SampleTestCase":"\"abc\"\n\"pqr\"","ExampleTestcases":"\"abc\"\n\"pqr\"\n\"ab\"\n\"pqrs\"\n\"abcd\"\n\"pq\"","Difficulty":"Easy","Title":"Merge Strings Alternately","TitleSlug":"merge-strings-alternately","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1783449, \"totalSubmissionRaw\": 2169755, \"acRate\": \"82.2%\"}","Likes":4659,"Dislikes":136,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String mergeAlternately(String word1, String word2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def mergeAlternately(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"\n\nchar * mergeAlternately(char * word1, char * word2){\n\n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string MergeAlternately(string word1, string word2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {string}\n */\nvar mergeAlternately = function(word1, word2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function mergeAlternately(word1: string, word2: string): string {\n\n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return String\n     */\n    function mergeAlternately($word1, $word2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func mergeAlternately(_ word1: String, _ word2: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun mergeAlternately(word1: String, word2: String): String {\n        \n    }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func mergeAlternately(word1 string, word2 string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} word1\n# @param {String} word2\n# @return {String}\ndef merge_alternately(word1, word2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def mergeAlternately(word1: String, word2: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn merge_alternately(word1: String, word2: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (merge-alternately word1 word2)\n  (-> string? string? string?)\n\n  )"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T15:55:16.42092961+02:00","AcRate":"82.2","TotalSubmissions":2169755,"TotalAccepted":1783449,"AcceptanceRate":0.8219587004062671,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/merge-strings-alternately/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        merged = []\n        len1, len2 = len(word1), len(word2)\n        i, j = 0, 0\n        \n        while i < len1 and j < len2:\n            merged.append(word1[i])\n            merged.append(word2[j])\n            i += 1\n            j += 1\n        \n        if i < len1:\n            merged.append(word1[i:])\n        if j < len2:\n            merged.append(word2[j:])\n        \n        return ''.join(merged)\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        # Initialize an empty list to store merged characters\n        merged = []\n        \n        # Get lengths of the input strings\n        len1, len2 = len(word1), len(word2)\n        \n        # Initialize pointers for both strings\n        i, j = 0, 0\n        \n        # Iterate through both strings while both pointers are within their respective lengths\n        while i < len1 and j < len2:\n            # Append characters from word1 and word2 alternately\n            merged.append(word1[i])\n            merged.append(word2[j])\n            # Increment both pointers\n            i += 1\n            j += 1\n        \n        # If word1 has remaining characters, append them\n        if i < len1:\n            merged.append(word1[i:])\n        \n        # If word2 has remaining characters, append them\n        if j < len2:\n            merged.append(word2[j:])\n        \n        # Join the list to form the final merged string and return it\n        return ''.join(merged)\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        merged = []\n        \n        len1, len2 = len(word1), len(word2)\n        \n        i, j = 0, 0\n        \n        while i < len1 and j < len2:\n            merged.append(word1[i])\n            merged.append(word2[j])\n            i += 1\n            j += 1\n        \n        if i < len1:\n            merged.append(word1[i:])\n        \n        if j < len2:\n            merged.append(word2[j:])\n        \n        return ''.join(merged)\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        merged = []\n        \n        len1, len2 = len(word1), len(word2)\n        \n        i, j = 0, 0\n        \n        while i < len1 and j < len2:\n            merged.append(word1[i])\n            merged.append(word2[j])\n            i += 1\n            j += 1\n        \n        if i < len1:\n            merged.extend(word1[i:])\n        \n        if j < len2:\n            merged.extend(word2[j:])\n        \n        return ''.join(merged)\n```\n\n","TypedCode":"\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        merged = []\n        \n        len1, len2 = len(word1), len(word2)\n        \n        i, j = 0, 0\n        \n        while i < len1 and j < len2:\n            merged.append(word1[i])\n            merged.append(word2[j])\n            i += 1\n            j += 1\n        \n        if i < len1:\n            merged.append(word1[i:])\n        \n        if j < len2:\n            merged.append(word2[j:])\n        \n        return ''.join(merged)\n","Model":"se-gpt-4o","Latency":5600880170,"SolvedAt":"2025-09-07T16:09:05.36638601+02:00","PromptTokens":3727,"OutputTokens":638}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1894","typed_code":"\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        merged = []\n        \n        len1, len2 = len(word1), len(word2)\n        \n        i, j = 0, 0\n        \n        while i < len1 and j < len2:\n            merged.append(word1[i])\n            merged.append(word2[j])\n            i += 1\n            j += 1\n        \n        if i < len1:\n            merged.append(word1[i:])\n        \n        if j < len2:\n            merged.append(word2[j:])\n        \n        return ''.join(merged)\n"},"SubmissionId":1762756555,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T16:35:49.80585326+02:00"}}}
