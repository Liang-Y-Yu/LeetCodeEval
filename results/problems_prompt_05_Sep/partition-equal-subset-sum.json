{"Question":{"Data":{"Question":{"questionFrontendId":"416","questionId":"416","Content":"<p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,11,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n","SampleTestCase":"[1,5,11,5]","ExampleTestcases":"[1,5,11,5]\n[1,2,3,5]","Difficulty":"Medium","Title":"Partition Equal Subset Sum","TitleSlug":"partition-equal-subset-sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1323179, \"totalSubmissionRaw\": 2712092, \"acRate\": \"48.8%\"}","Likes":13462,"Dislikes":290,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool canPartition(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool CanPartition(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function canPartition(nums: number[]): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canPartition($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func canPartition(_ nums: [Int]) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool canPartition(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func canPartition(nums []int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_partition(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn can_partition(nums: Vec<i32>) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (can-partition nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec can_partition(Nums :: [integer()]) -> boolean().\ncan_partition(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec can_partition(nums :: [integer]) :: boolean\n  def can_partition(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T20:54:38.030789413+02:00","AcRate":"48.8","TotalSubmissions":2712092,"TotalAccepted":1323179,"AcceptanceRate":0.4878813108109902,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/partition-equal-subset-sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n \nExample 1:\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\nExample 2:\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n \nConstraints:\n\t1 <= nums.length <= 200\n\t1 <= nums[i] <= 100\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        # If the total_sum is odd, we cannot split it into two equal subsets\n        if total_sum % 2 != 0:\n            return False\n        \n        target = total_sum // 2\n        \n        # Using a list to keep track if certain sum is achievable\n        dp = [False] * (target + 1)\n        dp[0] = True  # Base case: sum of 0 is always achievable\n        \n        # Process each number in the nums list\n        for num in nums:\n            for sum_value in range(target, num - 1, -1):  # Iterate backwards\n                dp[sum_value] = dp[sum_value] or dp[sum_value - num]\n        \n        return dp[target]\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        # If the total_sum is odd, we cannot split it into two equal subsets\n        if total_sum % 2 != 0:\n            return False\n        \n        target = total_sum // 2\n        \n        # Using a list to keep track if certain sum is achievable\n        dp = [False] * (target + 1)\n        dp[0] = True  # Base case: sum of 0 is always achievable\n        \n        # Process each number in the nums list\n        for num in nums:\n            for sum_value in range(target, num - 1, -1):  # Iterate backwards\n                dp[sum_value] = dp[sum_value] or dp[sum_value - num]\n        \n        return dp[target]\n","Model":"gpt-4o-2024-08-06","Latency":1608358209,"SolvedAt":"2025-09-05T21:05:39.740606024+02:00","PromptTokens":343,"OutputTokens":187}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"416","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total_sum = sum(nums)\n        \n        # If the total_sum is odd, we cannot split it into two equal subsets\n        if total_sum % 2 != 0:\n            return False\n        \n        target = total_sum // 2\n        \n        # Using a list to keep track if certain sum is achievable\n        dp = [False] * (target + 1)\n        dp[0] = True  # Base case: sum of 0 is always achievable\n        \n        # Process each number in the nums list\n        for num in nums:\n            for sum_value in range(target, num - 1, -1):  # Iterate backwards\n                dp[sum_value] = dp[sum_value] or dp[sum_value - num]\n        \n        return dp[target]\n"},"SubmissionId":1760845434,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-05T21:31:12.338447265+02:00"}}}
