{"Question":{"Data":{"Question":{"questionFrontendId":"20","questionId":"20","Content":"<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 5:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([)]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n","SampleTestCase":"\"()\"","ExampleTestcases":"\"()\"\n\"()[]{}\"\n\"(]\"\n\"([])\"\n\"([)]\"","Difficulty":"Easy","Title":"Valid Parentheses","TitleSlug":"valid-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"6.5M\", \"totalSubmission\": \"15.2M\", \"totalAcceptedRaw\": 6519026, \"totalSubmissionRaw\": 15233068, \"acRate\": \"42.8%\"}","Likes":26511,"Dislikes":1928,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isValid(self, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isValid(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isValid(s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isValid(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isValid(s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T20:57:09.28545281+02:00","AcRate":"42.8","TotalSubmissions":15233068,"TotalAccepted":6519026,"AcceptanceRate":0.4279522680526339,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/valid-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\tOpen brackets must be closed by the same type of brackets.\n\tOpen brackets must be closed in the correct order.\n\tEvery close bracket has a corresponding open bracket of the same type.\n \nExample 1:\nInput: s = \"()\"\nOutput: true\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\nExample 3:\nInput: s = \"(]\"\nOutput: false\nExample 4:\nInput: s = \"([])\"\nOutput: true\nExample 5:\nInput: s = \"([)]\"\nOutput: false\n \nConstraints:\n\t1 <= s.length <= 10^4\n\ts consists of parentheses only '()[]{}'.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def isValid(self, s: str) -> bool:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        \n        return not stack\n```","TypedCode":"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        \n        return not stack\n","Model":"gpt-4o-2024-08-06","Latency":1004023741,"SolvedAt":"2025-09-05T21:07:02.945791187+02:00","PromptTokens":382,"OutputTokens":97}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"20","typed_code":"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        \n        return not stack\n"},"SubmissionId":1760851796,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-05T21:39:47.136215818+02:00"}}}
