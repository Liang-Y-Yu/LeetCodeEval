{"Question":{"Data":{"Question":{"questionFrontendId":"188","questionId":"188","Content":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n","SampleTestCase":"2\n[2,4,1]","ExampleTestcases":"2\n[2,4,1]\n2\n[3,2,6,5,0,3]","Difficulty":"Hard","Title":"Best Time to Buy and Sell Stock IV","TitleSlug":"best-time-to-buy-and-sell-stock-iv","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"635.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 635678, \"totalSubmissionRaw\": 1320463, \"acRate\": \"48.1%\"}","Likes":7843,"Dislikes":219,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int maxProfit(int k, int[] prices) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int maxProfit(int k, int* prices, int pricesSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MaxProfit(int k, int[] prices) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxProfit(k: number, prices: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($k, $prices) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxProfit(_ k: Int, _ prices: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxProfit(k: Int, prices: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxProfit(int k, List<int> prices) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxProfit(k int, prices []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} k\n# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(k, prices)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_profit(k: i32, prices: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-profit k prices)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_profit(K :: integer(), Prices :: [integer()]) -> integer().\nmax_profit(K, Prices) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_profit(k :: integer, prices :: [integer]) :: integer\n  def max_profit(k, prices) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-05T20:47:26.08804142+02:00","AcRate":"48.1","TotalSubmissions":1320463,"TotalAccepted":635678,"AcceptanceRate":0.4814053858381492,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: You are given an integer array prices where prices[i] is the price of a given stock on the i^th day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n \nExample 1:\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\nExample 2:\nInput: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n \nConstraints:\n\t1 <= k <= 100\n\t1 <= prices.length <= 1000\n\t0 <= prices[i] <= 1000\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        if k >= n // 2:\n            # If k is large enough, we can complete as many transactions as possible\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        \n        # Dynamic programming approach\n        # dp[i][j] represents the maximum profit up to day j with at most i transactions\n        dp = [[0] * n for _ in range(k + 1)]\n        \n        for i in range(1, k + 1):\n            # max_diff represents the maximum difference between profits and prices seen so far\n            max_diff = -prices[0]\n            for j in range(1, n):\n                # Update dp[i][j] for the maximum profit for i transactions until j-th day\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                # Update max_diff to be used in subsequent days\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        \n        return dp[k][n - 1]\n```","TypedCode":"\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        if k >= n // 2:\n            # If k is large enough, we can complete as many transactions as possible\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        \n        # Dynamic programming approach\n        # dp[i][j] represents the maximum profit up to day j with at most i transactions\n        dp = [[0] * n for _ in range(k + 1)]\n        \n        for i in range(1, k + 1):\n            # max_diff represents the maximum difference between profits and prices seen so far\n            max_diff = -prices[0]\n            for j in range(1, n):\n                # Update dp[i][j] for the maximum profit for i transactions until j-th day\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                # Update max_diff to be used in subsequent days\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        \n        return dp[k][n - 1]\n","Model":"gpt-4o-2024-08-06","Latency":2622555124,"SolvedAt":"2025-09-05T21:02:07.498111556+02:00","PromptTokens":494,"OutputTokens":296}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"188","typed_code":"\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        if k >= n // 2:\n            # If k is large enough, we can complete as many transactions as possible\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        \n        # Dynamic programming approach\n        # dp[i][j] represents the maximum profit up to day j with at most i transactions\n        dp = [[0] * n for _ in range(k + 1)]\n        \n        for i in range(1, k + 1):\n            # max_diff represents the maximum difference between profits and prices seen so far\n            max_diff = -prices[0]\n            for j in range(1, n):\n                # Update dp[i][j] for the maximum profit for i transactions until j-th day\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                # Update max_diff to be used in subsequent days\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        \n        return dp[k][n - 1]\n"},"SubmissionId":1760828591,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-05T21:10:08.208594267+02:00"}}}
