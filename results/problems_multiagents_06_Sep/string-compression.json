{"Question":{"Data":{"Question":{"questionFrontendId":"443","questionId":"443","Content":"<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p><strong>Note: </strong>The characters in the array beyond the returned length do not matter and should be ignored.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n","SampleTestCase":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]","ExampleTestcases":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n[\"a\"]\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]","Difficulty":"Medium","Title":"String Compression","TitleSlug":"string-compression","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"930K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 930043, \"totalSubmissionRaw\": 1583735, \"acRate\": \"58.7%\"}","Likes":5855,"Dislikes":8668,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int compress(vector<char>& chars) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int compress(char[] chars) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def compress(self, chars: List[str]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int compress(char* chars, int charsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int Compress(char[] chars) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function compress(chars: string[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(&$chars) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func compress(_ chars: inout [Character]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun compress(chars: CharArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int compress(List<String> chars) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func compress(chars []byte) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def compress(chars: Array[Char]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n        \n    }\n}"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:49:52.273873514+02:00","AcRate":"58.7","TotalSubmissions":1583735,"TotalAccepted":930043,"AcceptanceRate":0.5872466037563102,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/string-compression/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            # Count the occurrences of the current character\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            # Write the character to the write_index\n            chars[write_index] = char\n            write_index += 1\n            \n            # Write the count if it's more than 1\n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            # Count the occurrences of the current character\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            # Write the character to the write_index\n            chars[write_index] = char\n            write_index += 1\n            \n            # Write the count if it's more than 1\n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            chars[write_index] = char\n            write_index += 1\n            \n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            chars[write_index] = char\n            write_index += 1\n            \n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the designed algorithm. It reads through the list of characters, counts consecutive duplicates, and writes the compact representation of these characters directly back into the original list.\n\n2. **Edge Cases**: The code correctly handles edge cases such as:\n   - A single character in the list: It simply writes this character without any additional numbers.\n   - Long sequences of characters (e.g., 12 'b's in a row) are handled with proper digit splitting.\n   - Lists where all characters are distinct and need no compression.\n\n3. **Complexity**: The time complexity of the algorithm is O(n), where n is the length of the array `chars`. The space complexity is O(1) – it uses a constant amount of additional space because all operations are in-place. This meets the problem requirements.\n\n4. **Code Quality**: The code is clean and readable. It uses clear variable naming (e.g. `write_index`, `count`), separates logical parts of the algorithm, and includes no unnecessary computations.\n\n5. **Test Cases**: The provided examples in the problem are:\n   - Example 1: [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] => Returns 6 with [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. The code passes this test.\n   - Example 2: [\"a\"] => Returns 1 with [\"a\"]. The code passes this test.\n   - Example 3: [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"] => Returns 4 with [\"a\",\"b\",\"1\",\"2\"]. The code passes this test.\n\n6. **Potential Issues**: There are no apparent bugs or logical errors within the algorithm. It performs as intended based on the problem statement.\n\nOverall, the implemented code is correct, efficient, and meets the requirements specified in the problem description.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            chars[write_index] = char\n            write_index += 1\n            \n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n","Model":"se-gpt-4o","Latency":9062029208,"SolvedAt":"2025-09-06T23:06:39.588306034+02:00","PromptTokens":4100,"OutputTokens":1061}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"443","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n == 0:\n            return 0\n        \n        write_index = 0\n        i = 0\n        \n        while i < n:\n            char = chars[i]\n            count = 0\n            while i < n and chars[i] == char:\n                i += 1\n                count += 1\n            \n            chars[write_index] = char\n            write_index += 1\n            \n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n"},"SubmissionId":1761940558,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:42:49.581433289+02:00"}}}
