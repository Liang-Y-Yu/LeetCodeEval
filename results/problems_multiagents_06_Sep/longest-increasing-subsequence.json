{"Question":{"Data":{"Question":{"questionFrontendId":"300","questionId":"300","Content":"<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n","SampleTestCase":"[10,9,2,5,3,7,101,18]","ExampleTestcases":"[10,9,2,5,3,7,101,18]\n[0,1,0,3,2,3]\n[7,7,7,7,7,7,7]","Difficulty":"Medium","Title":"Longest Increasing Subsequence","TitleSlug":"longest-increasing-subsequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"4M\", \"totalAcceptedRaw\": 2331953, \"totalSubmissionRaw\": 3997505, \"acRate\": \"58.3%\"}","Likes":22197,"Dislikes":492,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int lengthOfLIS(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LengthOfLIS(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function lengthOfLIS(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function lengthOfLIS($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func lengthOfLIS(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun lengthOfLIS(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int lengthOfLIS(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func lengthOfLIS(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef length_of_lis(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn length_of_lis(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (length-of-lis nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec length_of_lis(Nums :: [integer()]) -> integer().\nlength_of_lis(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec length_of_lis(nums :: [integer]) :: integer\n  def length_of_lis(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:45:46.64933604+02:00","AcRate":"58.3","TotalSubmissions":3997505,"TotalAccepted":2331953,"AcceptanceRate":0.5833521158822815,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-increasing-subsequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Tail array will store the smallest tail of all increasing subsequences\n        # having length i+1 in tail[i].\n        tail = []\n        \n        for num in nums:\n            pos = bisect_left(tail, num)  # Find the insertion point\n            \n            # If num is larger than any element in tail\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        \n        return len(tail)\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Tail array will store the smallest tail of all increasing subsequences\n        # having length i+1 in tail[i].\n        tail = []\n        \n        for num in nums:\n            pos = bisect_left(tail, num)  # Find the insertion point\n            \n            # If num is larger than any element in tail\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        \n        return len(tail)\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n```\n\n=== VERIFICATION ===\nTo verify the implemented solution, I will evaluate the solution code based on the criteria provided:\n\n1. **Correctness**: The solution correctly uses the dynamic programming approach combined with binary search to solve the problem in O(n log n) time complexity. It maintains a `tail` list where the `i-th` position contains the smallest tail value of all increasing subsequences of length `i+1` found so far. This ensures that every position of the `tail` list correctly maintains a possible increasing sequence using the smallest possible numbers, allowing the extension of the sequence if a larger number is encountered, and replacing numbers where a better sequence configuration is found.\n\n2. **Edge Cases**: The code handles the edge case of an empty list by returning 0. It also accommodates cases with duplicating numbers or strictly non-decreasing subsequences as seen in the example with `[7,7,7,7,7,7,7]`, where the longest increasing subsequence is indeed of length 1.\n\n3. **Complexity**: The solution achieves the desired time complexity of O(n log n) by utilizing the binary search with `bisect_left` to efficiently find the correct position of each element within the `tail` list, which eliminates linear scans of previous implementations.\n\n4. **Code Quality**: The code is clean, using descriptive variable names like `tail` and `pos`, it is concise and efficiently performs necessary operations. It avoids unnecessary parts (like excessive comments or overly complex logic), following Python best practices.\n\n5. **Test Cases**: I followed through all provided examples manually, and the results from the code match the expected output correctly:\n   - Input: `[10,9,2,5,3,7,101,18]` => Output: `4`\n   - Input: `[0,1,0,3,2,3]` => Output: `4`\n   - Input: `[7,7,7,7,7,7,7]` => Output: `1`\n   These results confirm the solution correctly assigns the smallest possible number to maintain subsequence length.\n\n6. **Potential Issues**: Upon detailed inspection, there are no logical errors or bugs. The code is efficient while following proper implementation patterns for solving the longest increasing subsequence problem given the constraints.\n\nIn conclusion, the implemented solution is correct, efficient, and well-executed without any existing issues. Here is the validated source code:\n\n```python\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n```\n\n","TypedCode":"\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n","Model":"se-gpt-4o","Latency":9550032802,"SolvedAt":"2025-09-06T22:59:12.834476803+02:00","PromptTokens":3020,"OutputTokens":981}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"300","typed_code":"\nfrom typing import List\nfrom bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        tail = []\n        for num in nums:\n            pos = bisect_left(tail, num)\n            if pos == len(tail):\n                tail.append(num)\n            else:\n                tail[pos] = num\n        return len(tail)\n"},"SubmissionId":1761934020,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:30:07.492553164+02:00"}}}
