{"Question":{"Data":{"Question":{"questionFrontendId":"1207","questionId":"1319","Content":"<p>Given an array of integers <code>arr</code>, return <code>true</code> <em>if the number of occurrences of each value in the array is <strong>unique</strong> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,1,1,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-3,0,1,-3,1,1,1,-3,10,0]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","SampleTestCase":"[1,2,2,1,1,3]","ExampleTestcases":"[1,2,2,1,1,3]\n[1,2]\n[-3,0,1,-3,1,1,1,-3,10,0]","Difficulty":"Easy","Title":"Unique Number of Occurrences","TitleSlug":"unique-number-of-occurrences","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"891.3K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 891343, \"totalSubmissionRaw\": 1136507, \"acRate\": \"78.4%\"}","Likes":5415,"Dislikes":153,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool uniqueOccurrences(vector<int>& arr) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean uniqueOccurrences(int[] arr) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def uniqueOccurrences(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool uniqueOccurrences(int* arr, int arrSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool UniqueOccurrences(int[] arr) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function uniqueOccurrences(arr: number[]): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function uniqueOccurrences($arr) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func uniqueOccurrences(_ arr: [Int]) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun uniqueOccurrences(arr: IntArray): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool uniqueOccurrences(List<int> arr) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func uniqueOccurrences(arr []int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} arr\n# @return {Boolean}\ndef unique_occurrences(arr)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def uniqueOccurrences(arr: Array[Int]): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn unique_occurrences(arr: Vec<i32>) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (unique-occurrences arr)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec unique_occurrences(Arr :: [integer()]) -> boolean().\nunique_occurrences(Arr) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec unique_occurrences(arr :: [integer]) :: boolean\n  def unique_occurrences(arr) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:50:46.274584182+02:00","AcRate":"78.4","TotalSubmissions":1136507,"TotalAccepted":891343,"AcceptanceRate":0.7842828948699831,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/unique-number-of-occurrences/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        # Use a dictionary to count occurrences of each number in the array\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        \n        # Retrieve all occurrences and check if they are unique\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        # Step 1: Initialize a dictionary to count occurrences of each number in the array\n        occurrence_map = {}\n        \n        # Step 2: Count occurrences by iterating through the array\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        \n        # Step 3: Retrieve a list of occurrences from the dictionary\n        occurrences = list(occurrence_map.values())\n        \n        # Step 4: Check if occurrences are unique by comparing the length of the list to the length of the set\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\n=== VERIFICATION ===\nThe provided solution to the problem is correct and meets all necessary criteria. Here's the verification report:\n\n1. **Correctness**:\n   - The code correctly implements the algorithm to check if the number of occurrences of each value in the array is unique.\n   - It uses a dictionary to count occurrences of each integer in the array and then checks if the count values have unique occurrences using a set.\n\n2. **Edge Cases**:\n   - It handles edge cases such as empty arrays and arrays with one element.\n   - The constraints ensure that the array length is at least 1, so an empty array is not possible. The code handles arrays with one element correctly, returning `true` since a single occurrence count cannot have a duplicate.\n\n3. **Complexity**:\n   - Time complexity: The algorithm runs in O(n) time, where n is the length of the input array. Two passes over the array are necessary: one to count occurrences and another to convert the values to a list/set.\n   - Space complexity: The space required is O(n) due to the storage in the occurrence_map dictionary.\n\n4. **Code Quality**:\n   - The code is clean and readable, following best practices such as clear variable naming and structured logic.\n   - No unnecessary code or complex constructs are included.\n\n5. **Test Cases**:\n   - The provided sample test cases ([1,2,2,1,1,3], [1,2], [-3,0,1,-3,1,1,1,-3,10,0]) all produce correct outputs:\n     - The first example returns `true`, as occurrences are unique.\n     - The second example returns `false`, as occurrences are not unique.\n     - The third example returns `true`, as occurrences are unique.\n\n6. **Potential Issues**:\n   - No issues, errors, or logical bugs were found in the current implementation.\n   - The solution is efficient, adheres to constraints, and handles all reasonable input cases.\n\nWith this assessment, the implemented code snippet is correct and does not require any changes. Here is the code:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n","Model":"se-gpt-4o","Latency":9172192364,"SolvedAt":"2025-09-06T23:11:25.870686868+02:00","PromptTokens":2903,"OutputTokens":892}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1319","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurrence_map = {}\n        for num in arr:\n            if num in occurrence_map:\n                occurrence_map[num] += 1\n            else:\n                occurrence_map[num] = 1\n        occurrences = list(occurrence_map.values())\n        return len(occurrences) == len(set(occurrences))\n"},"SubmissionId":1761942080,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:46:05.489578948+02:00"}}}
