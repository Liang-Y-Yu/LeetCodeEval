{"Question":{"Data":{"Question":{"questionFrontendId":"290","questionId":"290","Content":"<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>. Specifically:</p>\n\n<ul>\n\t<li>Each letter in <code>pattern</code> maps to <strong>exactly</strong> one unique word in <code>s</code>.</li>\n\t<li>Each unique word in <code>s</code> maps to <strong>exactly</strong> one letter in <code>pattern</code>.</li>\n\t<li>No two letters map to the same word, and no two words map to the same letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bijection can be established as:</p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code> maps to <code>&quot;dog&quot;</code>.</li>\n\t<li><code>&#39;b&#39;</code> maps to <code>&quot;cat&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n","SampleTestCase":"\"abba\"\n\"dog cat cat dog\"","ExampleTestcases":"\"abba\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog cat cat fish\"\n\"aaaa\"\n\"dog cat cat dog\"","Difficulty":"Easy","Title":"Word Pattern","TitleSlug":"word-pattern","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"993.6K\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 993590, \"totalSubmissionRaw\": 2293474, \"acRate\": \"43.3%\"}","Likes":7769,"Dislikes":1113,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool wordPattern(char* pattern, char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function wordPattern(pattern: string, s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool wordPattern(String pattern, String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func wordPattern(pattern string, s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (word-pattern pattern s)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\nword_pattern(Pattern, S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern(pattern, s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:50:55.607384862+02:00","AcRate":"43.3","TotalSubmissions":2293474,"TotalAccepted":993590,"AcceptanceRate":0.43322488068319065,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/word-pattern/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        # Early return if pattern and words have different lengths\n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n```\n\n=== DESIGN ===\nTo solve the problem of determining if a string follows a given pattern with a bijection between letters in the pattern and words in the string, we can follow this approach:\n\n1. **Algorithm Choice**: We will use a hashmap (dictionary) to establish a bijection between the pattern's characters and the words in the string. This algorithm efficiently checks if each pattern character uniquely maps to a single word and vice versa.\n\n2. **Step-by-Step Approach**:\n    - Split the string `s` into a list of words.\n    - Check the lengths of the pattern and the list of words. If they differ, return `False` immediately.\n    - Use two dictionaries (hashmaps): `char_to_word` for mapping pattern characters to words, and `word_to_char` for mapping words to pattern characters.\n    - Iterate through the pattern and the list of words concurrently:\n      - Check if a character from the pattern is already mapped to a word in `char_to_word`.\n        - If it is mapped, verify that the mapped word corresponds to the current word in the list.\n        - If not, add the character-to-word mapping to `char_to_word`.\n      - Check if a word from the list is already mapped to a character in `word_to_char`.\n        - If it is mapped, verify that the mapped character corresponds to the current pattern character.\n        - If not, add the word-to-character mapping to `word_to_char`.\n    - If all checks are successfully passed, return `True` indicating the string follows the pattern.\n\n3. **Data Structures**:\n    - Use two dictionaries to keep track of the mappings: `char_to_word` and `word_to_char`.\n\n4. **Time Complexity**: The time complexity is O(n), where n is the length of the pattern, since we simply iterate through the pattern and words once.\n\n5. **Space Complexity**: The space complexity is O(m), where m is the number of unique characters in the pattern and words in the string, since we are storing mappings in the dictionaries.\n\n6. **Pseudocode**:\n    ```\n    def wordPattern(pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n    ```\n\nHere's the implementation in Python:\n\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n```\n\n=== VERIFICATION ===\nI have reviewed the provided solution based on the given criteria. Here is the verification report:\n\n1. **Correctness**:  \n   The code appears to correctly implement the designed algorithm for checking if a string `s` follows the given pattern. It uses two hashmaps (`char_to_word` and `word_to_char`) to maintain a bijection between the pattern's characters and the words in the string. The bijection ensures that each unique character maps to a unique word and vice versa.\n\n2. **Edge Cases**:  \n   - The code handles the edge case where the number of words in `s` does not match the length of the pattern by returning `False` right away.\n   - The code correctly handles patterns and strings with repeated characters/words.\n   - The constraints specified (1 ≤ pattern.length ≤ 300, 1 ≤ s.length ≤ 3000) are respected, ensuring that the solution is efficient.\n\n3. **Complexity**:  \n   - **Time Complexity**: The solution has a time complexity of O(n) where n is the length of the pattern, because it iterates over the pattern and words once.\n   - **Space Complexity**: The space complexity is O(m), where m is the number of unique characters in the pattern and words in the string, due to the storage used in the dictionaries.\n\n4. **Code Quality**:  \n   - The code is clean and structured, following good coding practices.\n   - The solution is concise and uses the appropriate language features, like dictionaries for mappings.\n\n5. **Test Cases**:  \n   - Example 1 (pattern = \"abba\", s = \"dog cat cat dog\"): The code correctly outputs `True` since the pattern matches the order of words.\n   - Example 2 (pattern = \"abba\", s = \"dog cat cat fish\"): The code correctly returns `False` due to the mismatch in mapping.\n   - Example 3 (pattern = \"aaaa\", s = \"dog cat cat dog\"): The code correctly returns `False` since not all same characters map to the same word.\n\n6. **Potential Issues**:  \n   - There don't appear to be any bugs or logical errors in the code.\n   - No improvements are needed as the code meets all requirements efficiently.\n\nHere is a reimplementation of the solution with the fixed function signature:\n\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n```\n\nThis code should be able to execute successfully and meet all the stated requirements.\n\n","TypedCode":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n","Model":"se-gpt-4o","Latency":13848771991,"SolvedAt":"2025-09-06T23:12:17.55601803+02:00","PromptTokens":4547,"OutputTokens":1647}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"290","typed_code":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for char, word in zip(pattern, words):\n            if char in char_to_word:\n                if char_to_word[char] != word:\n                    return False\n            else:\n                char_to_word[char] = word\n            \n            if word in word_to_char:\n                if word_to_char[word] != char:\n                    return False\n            else:\n                word_to_char[word] = char\n                \n        return True\n"},"SubmissionId":1761942773,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:47:33.291551153+02:00"}}}
