{"Question":{"Data":{"Question":{"questionFrontendId":"643","questionId":"643","Content":"<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>\n\n<p>Find a contiguous subarray whose <strong>length is equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4\n<strong>Output:</strong> 12.75000\n<strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5], k = 1\n<strong>Output:</strong> 5.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[1,12,-5,-6,50,3]\n4","ExampleTestcases":"[1,12,-5,-6,50,3]\n4\n[5]\n1","Difficulty":"Easy","Title":"Maximum Average Subarray I","TitleSlug":"maximum-average-subarray-i","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"938.5K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 938528, \"totalSubmissionRaw\": 2040769, \"acRate\": \"46.0%\"}","Likes":4069,"Dislikes":374,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        "},{"Lang":"C","LangSlug":"c","Code":"double findMaxAverage(int* nums, int numsSize, int k) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findMaxAverage(nums: number[], k: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  double findMaxAverage(List<int> nums, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findMaxAverage(nums []int, k int) float64 {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-max-average nums k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_max_average(Nums :: [integer()], K :: integer()) -> float().\nfind_max_average(Nums, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\n  def find_max_average(nums, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:46:54.000644954+02:00","AcRate":"46.0","TotalSubmissions":2040769,"TotalAccepted":938528,"AcceptanceRate":0.4598893848348343,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/maximum-average-subarray-i/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        # Calculate the initial sum of the first k elements\n        max_sum = current_sum = sum(nums[:k])\n        \n        # Iterate through the array using a sliding window approach\n        for i in range(k, len(nums)):\n            # Slide the window by removing the element going out of the window\n            # and adding the new element coming into the window\n            current_sum = current_sum - nums[i - k] + nums[i]\n            # Track the maximum sum found\n            if current_sum > max_sum:\n                max_sum = current_sum\n        \n        # Return the maximum average found\n        return max_sum / k\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        # Calculate the initial sum of the first k elements\n        max_sum = current_sum = sum(nums[:k])\n        \n        # Iterate through the array using a sliding window approach\n        for i in range(k, len(nums)):\n            # Slide the window by removing the element going out of the window\n            # and adding the new element coming into the window\n            current_sum = current_sum - nums[i - k] + nums[i]\n            # Track the maximum sum found\n            if current_sum > max_sum:\n                max_sum = current_sum\n        \n        # Return the maximum average found\n        return max_sum / k\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        max_sum = current_sum = sum(nums[:k])\n        for i in range(k, len(nums)):\n            current_sum = current_sum - nums[i - k] + nums[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        return max_sum / k\n```\n\n=== VERIFICATION ===\nHere's the expanded solution for the given code snippet:\n\n```python\nfrom typing import List\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        # Calculate the initial sum of the first k elements\n        max_sum = current_sum = sum(nums[:k])\n        \n        # Iterate through the array using a sliding window approach\n        for i in range(k, len(nums)):\n            # Slide the window by removing the element going out of the window\n            # and adding the new element coming into the window\n            current_sum = current_sum - nums[i - k] + nums[i]\n            # Track the maximum sum found\n            if current_sum > max_sum:\n                max_sum = current_sum\n        \n        # Return the maximum average found\n        return max_sum / k\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the sliding window algorithm to find the contiguous subarray of length `k` with the maximum sum, then computes the average by dividing the maximum sum by `k`. The logic is correct according to the problem statement.\n\n2. **Edge Cases**:\n   - The solution handles edge cases like:\n     - Minimum length of nums (`n = 1`) where `nums` and `k` are both `1`. It correctly returns the element as the average.\n     - Cases where `nums` contains negative numbers, as shown in the example `(12 - 5 - 6 + 50) / 4`.\n\n3. **Complexity**:\n   - The solution runs in `O(n)` time complexity which is optimal for this problem, considering that we must check each element in the array once using a sliding window approach.\n   - Space complexity is `O(1)` as we are utilizing only a few extra variables for computations.\n\n4. **Code Quality**: The code is clean and readable. It utilizes appropriate python constructs and follows good practices like initialization and update using a sliding window efficiently.\n\n5. **Test Cases**:\n   - Test Case 1: Input: `nums = [1,12,-5,-6,50,3], k = 4`, the code correctly computes the result as `12.75000`.\n   - Test Case 2: Input: `nums = [5], k = 1`, the code correctly returns `5.00000`.\n\n6. **Potential Issues**: No bugs or logical errors found. The algorithm is optimal, and no improvements are needed.\n\nThe solution is correct based on the provided requirements and performs well on all fronts including correctness, edge case handling, complexity, and code quality.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        max_sum = current_sum = sum(nums[:k])\n        for i in range(k, len(nums)):\n            current_sum = current_sum - nums[i - k] + nums[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        return max_sum / k\n","Model":"se-gpt-4o","Latency":7953755210,"SolvedAt":"2025-09-06T23:00:06.079726553+02:00","PromptTokens":3123,"OutputTokens":953}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"643","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        max_sum = current_sum = sum(nums[:k])\n        for i in range(k, len(nums)):\n            current_sum = current_sum - nums[i - k] + nums[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        return max_sum / k\n"},"SubmissionId":1761935142,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:32:10.830009112+02:00"}}}
