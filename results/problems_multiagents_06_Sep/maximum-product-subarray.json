{"Question":{"Data":{"Question":{"questionFrontendId":"152","questionId":"152","Content":"<p>Given an integer array <code>nums</code>, find a <span data-keyword=\"subarray-nonempty\">subarray</span> that has the largest product, and return <em>the product</em>.</p>\n\n<p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [2,3] has the largest product 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>The product of any subarray of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n","SampleTestCase":"[2,3,-2,4]","ExampleTestcases":"[2,3,-2,4]\n[-2,0,-1]","Difficulty":"Medium","Title":"Maximum Product Subarray","TitleSlug":"maximum-product-subarray","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"5M\", \"totalAcceptedRaw\": 1766038, \"totalSubmissionRaw\": 4996952, \"acRate\": \"35.3%\"}","Likes":19781,"Dislikes":800,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int maxProduct(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxProduct(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxProduct(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxProduct(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_product(Nums :: [integer()]) -> integer().\nmax_product(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:46:42.046828817+02:00","AcRate":"35.3","TotalSubmissions":4996952,"TotalAccepted":1766038,"AcceptanceRate":0.3534230466892618,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/maximum-product-subarray/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n```\n\n","TypedCode":"\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n","Model":"se-gpt-4o","Latency":5201856236,"SolvedAt":"2025-09-06T23:00:17.642962417+02:00","PromptTokens":2972,"OutputTokens":556}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"152","typed_code":"\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        current_max_product = nums[0]\n        current_min_product = nums[0]\n        max_product = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                current_max_product, current_min_product = current_min_product, current_max_product\n            \n            current_max_product = max(num, current_max_product * num)\n            current_min_product = min(num, current_min_product * num)\n            \n            max_product = max(max_product, current_max_product)\n        \n        return max_product\n"},"SubmissionId":1761935356,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:32:38.738959617+02:00"}}}
