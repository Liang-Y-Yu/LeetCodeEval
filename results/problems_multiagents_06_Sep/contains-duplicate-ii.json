{"Question":{"Data":{"Question":{"questionFrontendId":"219","questionId":"219","Content":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong> </em><code>i</code><em> and </em><code>j</code><em> in the array such that </em><code>nums[i] == nums[j]</code><em> and </em><code>abs(i - j) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], k = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1], k = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n","SampleTestCase":"[1,2,3,1]\n3","ExampleTestcases":"[1,2,3,1]\n3\n[1,0,1,1]\n1\n[1,2,3,1,2,3]\n2","Difficulty":"Easy","Title":"Contains Duplicate II","TitleSlug":"contains-duplicate-ii","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1479807, \"totalSubmissionRaw\": 2982080, \"acRate\": \"49.6%\"}","Likes":6984,"Dislikes":3263,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool containsNearbyDuplicate(int* nums, int numsSize, int k) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function containsNearbyDuplicate(nums: number[], k: number): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool containsNearbyDuplicate(List<int> nums, int k) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func containsNearbyDuplicate(nums []int, k int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (contains-nearby-duplicate nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -> boolean().\ncontains_nearby_duplicate(Nums, K) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\n  def contains_nearby_duplicate(nums, k) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:41:56.967161793+02:00","AcRate":"49.6","TotalSubmissions":2982080,"TotalAccepted":1479807,"AcceptanceRate":0.49623316611224383,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/contains-duplicate-ii/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        # Use a dictionary to store the last index of each element in nums\n        index_map = {}\n        \n        # Iterate over the array\n        for i, num in enumerate(nums):\n            # Check if the element num has already been encountered\n            if num in index_map:\n                # If the previous index was within the distance k, return True\n                if i - index_map[num] <= k:\n                    return True\n            \n            # Update the last index of the current number\n            index_map[num] = i\n        \n        # No such pair found, return False\n        return False\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        # Use a dictionary to store the index of each element in nums\n        index_map = {}\n        \n        # Iterate over the array\n        for i, num in enumerate(nums):\n            # Check if the element num has already been encountered\n            if num in index_map:\n                # If the previous index was within the distance k, return True\n                if i - index_map[num] <= k:\n                    return True\n            \n            # Update the last index of the current number\n            index_map[num] = i\n        \n        # No such pair found, return False\n        return False\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        index_map = {}\n        for i, num in enumerate(nums):\n            if num in index_map and i - index_map[num] <= k:\n                return True\n            index_map[num] = i\n        return False\n```\n\n=== VERIFICATION ===\nThe provided solution to the problem is well-implemented and will be verified based on the listed criteria.\n\n```python\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        index_map = {}\n        for i, num in enumerate(nums):\n            if num in index_map and i - index_map[num] <= k:\n                return True\n            index_map[num] = i\n        return False\n```\n\n**Verification Report:**\n\n1. **Correctness**: The code correctly implements the designed algorithm using a dictionary to store the last seen index of each number. It checks if a previously encountered number is within the required index distance `k`, returning `True` if such a pair is found.\n\n2. **Edge Cases**: Edge cases are handled appropriately:\n   - If `nums` is empty or contains only one element, it's impossible to have any duplicates, and the code correctly returns `False`.\n   - If `k` is 0, any duplicates must occur at the same index, which is impossible unless `nums` has repeating values at a single index, and the code correctly returns `False`.\n\n3. **Complexity**: The algorithm efficiently checks for nearby duplicates in O(n) time complexity, where n is the length of `nums`, due to the single pass over the array and constant-time operations on the dictionary. The space complexity is O(n) for storing the index map.\n\n4. **Code Quality**: The code is clean and readable, following Python best practices. The use of meaningful variable names and the straightforward loop structure make it easy to understand.\n\n5. **Test Cases**: The provided examples have been walked through:\n   - `Example 1`: The code correctly identifies nearby duplicates within distance `k = 3`, returning `True`.\n   - `Example 2`: The code correctly identifies nearby duplicates within distance `k = 1`, returning `True`.\n   - `Example 3`: The code correctly returns `False` since no nearby duplicates exist within the given `k = 2`.\n\n6. **Potential Issues**: No bugs or logical errors are evident. The solution efficiently handles typical inputs and edge cases. No improvements are necessary at this point.\n\nThe solution is correct, meets the problem requirements, and efficiently passes all provided sample test cases within expected constraints.\n\n","TypedCode":"\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        index_map = {}\n        for i, num in enumerate(nums):\n            if num in index_map and i - index_map[num] <= k:\n                return True\n            index_map[num] = i\n        return False\n","Model":"se-gpt-4o","Latency":7530117593,"SolvedAt":"2025-09-06T22:53:59.979346948+02:00","PromptTokens":2969,"OutputTokens":846}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"219","typed_code":"\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        index_map = {}\n        for i, num in enumerate(nums):\n            if num in index_map and i - index_map[num] <= k:\n                return True\n            index_map[num] = i\n        return False\n"},"SubmissionId":1761928179,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:18:50.1189003+02:00"}}}
