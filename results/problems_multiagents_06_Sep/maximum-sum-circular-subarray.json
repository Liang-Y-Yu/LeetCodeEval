{"Question":{"Data":{"Question":{"questionFrontendId":"918","questionId":"954","Content":"<p>Given a <strong>circular integer array</strong> <code>nums</code> of length <code>n</code>, return <em>the maximum possible sum of a non-empty <strong>subarray</strong> of </em><code>nums</code>.</p>\n\n<p>A <strong>circular array</strong> means the end of the array connects to the beginning of the array. Formally, the next element of <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.</p>\n\n<p>A <strong>subarray</strong> may only include each element of the fixed buffer <code>nums</code> at most once. Formally, for a subarray <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with <code>k1 % n == k2 % n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-2,3,-2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Subarray [3] has maximum sum 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,-3,5]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Subarray [5,5] has maximum sum 5 + 5 = 10.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-3,-2,-3]\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> Subarray [-2] has maximum sum -2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n","SampleTestCase":"[1,-2,3,-2]","ExampleTestcases":"[1,-2,3,-2]\n[5,-3,5]\n[-3,-2,-3]","Difficulty":"Medium","Title":"Maximum Sum Circular Subarray","TitleSlug":"maximum-sum-circular-subarray","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"363.1K\", \"totalSubmission\": \"751.5K\", \"totalAcceptedRaw\": 363142, \"totalSubmissionRaw\": 751522, \"acRate\": \"48.3%\"}","Likes":7101,"Dislikes":332,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEy","Name":"Divide and Conquer","Slug":"divide-and-conquer"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjM0","Name":"Queue","Slug":"queue"},{"Id":"VG9waWNUYWdOb2RlOjYxMDcx","Name":"Monotonic Queue","Slug":"monotonic-queue"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxSubarraySumCircular(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int maxSubarraySumCircular(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MaxSubarraySumCircular(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubarraySumCircular = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxSubarraySumCircular(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubarraySumCircular($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxSubarraySumCircular(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxSubarraySumCircular(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxSubarraySumCircular(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxSubarraySumCircular(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_subarray_sum_circular(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxSubarraySumCircular(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_subarray_sum_circular(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-subarray-sum-circular nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_subarray_sum_circular(Nums :: [integer()]) -> integer().\nmax_subarray_sum_circular(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_subarray_sum_circular(nums :: [integer]) :: integer\n  def max_subarray_sum_circular(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:46:32.250004677+02:00","AcRate":"48.3","TotalSubmissions":751522,"TotalAccepted":363142,"AcceptanceRate":0.4832087417267891,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/maximum-sum-circular-subarray/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        \n        # Find the maximum subarray sum in the non-circular case\n        max_kadane = kadane(nums)\n        \n        # To find max subarray sum in the circular case, we need the minimum sum subarray\n        min_kadane = kadane([-x for x in nums])\n        \n        # Get circular max by total_sum - min_kadane unless all numbers are negative\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:  # all numbers are negative, wrapping doesn't add value\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        \n        # Find the maximum subarray sum in the non-circular case\n        max_kadane = kadane(nums)\n        \n        # To find max subarray sum in the circular case, we need the minimum sum subarray\n        min_kadane = kadane([-x for x in nums])\n        \n        # Get circular max by total_sum - min_kadane unless all numbers are negative\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:  # all numbers are negative, wrapping doesn't add value\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        max_kadane = kadane(nums)\n        min_kadane = kadane([-x for x in nums])\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        max_kadane = kadane(nums)\n        min_kadane = kadane([-x for x in nums])\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n```\n\n","TypedCode":"\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        max_kadane = kadane(nums)\n        min_kadane = kadane([-x for x in nums])\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n","Model":"se-gpt-4o","Latency":5939973958,"SolvedAt":"2025-09-06T23:00:44.168953525+02:00","PromptTokens":3949,"OutputTokens":752}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"954","typed_code":"\nclass Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_current = max_so_far = arr[0]\n            for x in arr[1:]:\n                max_current = max(x, max_current + x)\n                max_so_far = max(max_so_far, max_current)\n            return max_so_far\n        \n        total_sum = sum(nums)\n        max_kadane = kadane(nums)\n        min_kadane = kadane([-x for x in nums])\n        max_wrap = total_sum + min_kadane\n        \n        if max_wrap == 0:\n            return max_kadane\n        \n        return max(max_kadane, max_wrap)\n"},"SubmissionId":1761935764,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:33:28.42536317+02:00"}}}
