{"Question":{"Data":{"Question":{"questionFrontendId":"76","questionId":"76","Content":"<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n","SampleTestCase":"\"ADOBECODEBANC\"\n\"ABC\"","ExampleTestcases":"\"ADOBECODEBANC\"\n\"ABC\"\n\"a\"\n\"a\"\n\"a\"\n\"aa\"","Difficulty":"Hard","Title":"Minimum Window Substring","TitleSlug":"minimum-window-substring","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"4.1M\", \"totalAcceptedRaw\": 1874432, \"totalSubmissionRaw\": 4078747, \"acRate\": \"46.0%\"}","Likes":19375,"Dislikes":818,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* minWindow(char* s, char* t) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minWindow(s: string, t: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minWindow(s string, t string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:47:37.237692621+02:00","AcRate":"46.0","TotalSubmissions":4078747,"TotalAccepted":1874432,"AcceptanceRate":0.4595607425515728,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/minimum-window-substring/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        # Dictionary to keep a count of all the unique characters in t.\n        target_count = Counter(t)\n        \n        # Variables to keep track of the number of characters matched.\n        required = len(target_count)\n        formed = 0\n        window_count = {}\n        \n        # Two pointers for the window.\n        l, r = 0, 0\n        \n        # Answer tuple (window length, left, right)\n        ans = float(\"inf\"), None, None\n        \n        while r < len(s):\n            # Add current character to the window.\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            \n            # If the current character's frequency matches its target frequency, we increment formed.\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            # Try and contract the window till the point it ceases to be 'desirable'.\n            while l <= r and formed == required:\n                char = s[l]\n                \n                # Save the smallest window possible.\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                \n                # The character at the position pointed by the `left` pointer is no longer part of the window.\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                \n                # Move the left pointer forward.\n                l += 1\n            \n            # Move the right pointer forward.\n            r += 1\n\n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n```\n\n=== DESIGN ===\n```python\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        # Base check if either string is empty\n        if not s or not t:\n            return \"\"\n        \n        # Frequency map of characters needed from t\n        target_count = Counter(t)\n        required = len(target_count)\n        \n        # Feed the current window frequency\n        window_count = {}\n        formed = 0\n        \n        # Pointers & result recording\n        l, r = 0, 0\n        ans = float(\"inf\"), None, None\n        \n        # Start expanding the window via the right pointer\n        while r < len(s):\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            \n            # If current character frequency matches the required, increase 'formed'\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            # Start contracting the window via the left pointer if all required chars are formed\n            while l <= r and formed == required:\n                char = s[l]\n                \n                # Record smallest window range\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                \n                # Remove the left-most character and decrease its record in the window count\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                \n                # Contract left pointer\n                l += 1\n            \n            # Expand right pointer\n            r += 1\n        \n        # Return the found window or empty string if none found\n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        target_count = Counter(t)\n        required = len(target_count)\n        window_count = {}\n        formed = 0\n        l, r = 0, 0\n        ans = float(\"inf\"), None, None\n        \n        while r < len(s):\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            while l <= r and formed == required:\n                char = s[l]\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                l += 1\n            \n            r += 1\n        \n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n```\n\n=== VERIFICATION ===\n```python\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        # Frequency map of characters needed from t\n        target_count = Counter(t)\n        required = len(target_count)\n        \n        # To store the current window frequencies\n        window_count = {}\n        formed = 0\n        \n        # Two-pointer technique and variable to record the best window\n        l, r = 0, 0\n        ans = float(\"inf\"), None, None\n        \n        # Expand the window via the right pointer\n        while r < len(s):\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            \n            # Check if current character frequency matches the required frequency\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            # Contract the window via the left pointer when all required characters are formed\n            while l <= r and formed == required:\n                char = s[l]\n                \n                # Update the best window result if the current window is smaller\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                \n                # Remove the left-most character and update the formed status\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                \n                # Contract the left pointer\n                l += 1\n            \n            # Expand the right pointer\n            r += 1\n        \n        # Return the best window found, or an empty string if no valid window was found\n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n```\n\n","TypedCode":"\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        target_count = Counter(t)\n        required = len(target_count)\n        window_count = {}\n        formed = 0\n        l, r = 0, 0\n        ans = float(\"inf\"), None, None\n        \n        while r < len(s):\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            while l <= r and formed == required:\n                char = s[l]\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                l += 1\n            \n            r += 1\n        \n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n","Model":"se-gpt-4o","Latency":10728861206,"SolvedAt":"2025-09-06T23:02:06.153496539+02:00","PromptTokens":4762,"OutputTokens":1449}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"76","typed_code":"\nfrom collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        target_count = Counter(t)\n        required = len(target_count)\n        window_count = {}\n        formed = 0\n        l, r = 0, 0\n        ans = float(\"inf\"), None, None\n        \n        while r < len(s):\n            char = s[r]\n            window_count[char] = window_count.get(char, 0) + 1\n            if char in target_count and window_count[char] == target_count[char]:\n                formed += 1\n            \n            while l <= r and formed == required:\n                char = s[l]\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                window_count[char] -= 1\n                if char in target_count and window_count[char] < target_count[char]:\n                    formed -= 1\n                l += 1\n            \n            r += 1\n        \n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]\n"},"SubmissionId":1761937090,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:36:07.9112347+02:00"}}}
