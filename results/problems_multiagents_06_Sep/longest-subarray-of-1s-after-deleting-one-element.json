{"Question":{"Data":{"Question":{"questionFrontendId":"1493","questionId":"1586","Content":"<p>Given a binary array <code>nums</code>, you should delete one element from it.</p>\n\n<p>Return <em>the size of the longest non-empty subarray containing only </em><code>1</code><em>&#39;s in the resulting array</em>. Return <code>0</code> if there is no such subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1&#39;s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1,1,0,1,1,0,1]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1&#39;s is [1,1,1,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You must delete one element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n","SampleTestCase":"[1,1,0,1]","ExampleTestcases":"[1,1,0,1]\n[0,1,1,1,0,1,1,0,1]\n[1,1,1]","Difficulty":"Medium","Title":"Longest Subarray of 1's After Deleting One Element","TitleSlug":"longest-subarray-of-1s-after-deleting-one-element","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"569.7K\", \"totalSubmission\": \"804K\", \"totalAcceptedRaw\": 569713, \"totalSubmissionRaw\": 804022, \"acRate\": \"70.9%\"}","Likes":4656,"Dislikes":107,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int longestSubarray(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int longestSubarray(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LongestSubarray(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestSubarray = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestSubarray(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestSubarray($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestSubarray(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int longestSubarray(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestSubarray(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_subarray(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestSubarray(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_subarray(Nums :: [integer()]) -> integer().\nlongest_subarray(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_subarray(nums :: [integer]) :: integer\n  def longest_subarray(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:45:57.869340177+02:00","AcRate":"70.9","TotalSubmissions":804022,"TotalAccepted":569713,"AcceptanceRate":0.7085788697324202,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def longestSubarray(self, nums: list[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n```\n\n=== VERIFICATION ===\nHere's the verification report:\n\n1. **Correctness**: The code correctly implements the designed algorithm. It iterates through the array, keeping track of consecutive ones and calculating the maximum length after potentially removing one zero.\n\n2. **Edge Cases**: The solution handles the edge cases well:\n   - If the array consists of only ones, it correctly returns the length minus one, as one element must be deleted.\n   - Manages arrays with multiple zeros appropriately by calculating possible lengths after removing one zero.\n   \n3. **Complexity**: The time complexity is O(n), where n is the length of the nums array. This is optimal. The space complexity is O(1), which is also optimal since it uses a constant amount of extra space.\n\n4. **Code Quality**: The code is clean and readable. It uses descriptive variable names and follows standard Python practices.\n\n\n5. **Test Cases**: Walking through the provided examples:\n   - Example 1: The output is 3, which is correct after deleting a zero.\n   - Example 2: The longest subarray is 5 after removing a zero, which matches the output.\n   - Example 3: With all ones and required deletion, the output is 2, which is correct.\n   \n6. **Potential Issues**: The solution is correct and doesn't have any logic errors. It correctly handles all edge cases and constraints.\n\nGiven the above, the implemented code is correct and valid. \n\nHere's the final code without further changes:\n\n```python\nclass Solution:\n    def longestSubarray(self, nums: list[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n```\n\n","TypedCode":"\nclass Solution:\n    def longestSubarray(self, nums: list[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n","Model":"se-gpt-4o","Latency":9922424634,"SolvedAt":"2025-09-06T22:59:30.096787698+02:00","PromptTokens":3447,"OutputTokens":993}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1586","typed_code":"\nclass Solution:\n    def longestSubarray(self, nums: list[int]) -> int:\n        max_len = 0\n        current_ones = 0\n        count_ones_before_zero = 0\n        zero_count = 0\n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] == 1:\n                current_ones += 1\n            else:\n                zero_count += 1\n                max_len = max(max_len, current_ones + count_ones_before_zero)\n                count_ones_before_zero = current_ones\n                current_ones = 0\n        \n        max_len = max(max_len, current_ones + count_ones_before_zero)\n        \n        if zero_count == 0:\n            return n - 1\n        \n        return max_len\n"},"SubmissionId":1761934266,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:30:35.02917717+02:00"}}}
