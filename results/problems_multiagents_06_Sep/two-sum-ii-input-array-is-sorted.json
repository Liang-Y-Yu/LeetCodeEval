{"Question":{"Data":{"Question":{"questionFrontendId":"167","questionId":"167","Content":"<p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length</code>.</p>\n\n<p>Return<em> the indices of the two numbers, </em><code>index<sub>1</sub></code><em> and </em><code>index<sub>2</sub></code><em>, <strong>added by one</strong> as an integer array </em><code>[index<sub>1</sub>, index<sub>2</sub>]</code><em> of length 2.</em></p>\n\n<p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p>\n\n<p>Your solution must use only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n\t<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n\t<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li>\n</ul>\n","SampleTestCase":"[2,7,11,15]\n9","ExampleTestcases":"[2,7,11,15]\n9\n[2,3,4]\n6\n[-1,0]\n-1","Difficulty":"Medium","Title":"Two Sum II - Input Array Is Sorted","TitleSlug":"two-sum-ii-input-array-is-sorted","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.9M\", \"totalSubmission\": \"4.6M\", \"totalAcceptedRaw\": 2905198, \"totalSubmissionRaw\": 4551985, \"acRate\": \"63.8%\"}","Likes":12835,"Dislikes":1491,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] TwoSum(int[] numbers, int target) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function twoSum(numbers: number[], target: number): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $numbers\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($numbers, $target) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func twoSum(_ numbers: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> twoSum(List<int> numbers, int target) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func twoSum(numbers []int, target int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} numbers\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(numbers, target)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def twoSum(numbers: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn two_sum(numbers: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (two-sum numbers target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec two_sum(Numbers :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Numbers, Target) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec two_sum(numbers :: [integer], target :: integer) :: [integer]\n  def two_sum(numbers, target) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:50:22.484921576+02:00","AcRate":"63.8","TotalSubmissions":4551985,"TotalAccepted":2905198,"AcceptanceRate":0.6382266198153114,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        # Initialize two pointers\n        left = 0\n        right = len(numbers) - 1\n        \n        # Since there's exactly one solution, we can find it using a two-pointer approach\n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                # Since the problem is 1-indexed, return the indices added by one\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                # Move the left pointer to the right to increase the sum\n                left += 1\n            else:\n                # Move the right pointer to the left to decrease the sum\n                right -= 1\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        # Algorithm Choice: Two-pointer approach\n        # We use two pointers because the array is sorted. This allows us to efficiently find the two numbers that sum up to the target.\n        \n        # Step-by-Step Approach:\n        # 1. Initialize two pointers: 'left' starting at the beginning of the list, and 'right' at the end.\n        left = 0\n        right = len(numbers) - 1\n        \n        # 2. Iterate while 'left' is less than 'right'.\n        while left < right:\n            # 3. Calculate the sum of the numbers at the left and right pointers.\n            current_sum = numbers[left] + numbers[right]\n            \n            # 4. If the current sum equals the target, return the indices (1-based indexing as required).\n            if current_sum == target:\n                return [left + 1, right + 1]\n                \n            # 5. If the current sum is less than the target, move the left pointer to the right to increase the sum.\n            elif current_sum < target:\n                left += 1\n                \n            # 6. If the current sum is greater than the target, move the right pointer to the left to decrease the sum.\n            else:\n                right -= 1\n                \n        # Note: The function guarantees that one solution always exists, so it should never exit the loop without finding it.\n\n# The time complexity of this approach is O(n), where n is the length of the list, because each element is processed at most once.\n# The space complexity is O(1) since we are only using a constant amount of extra space (the two pointers).\n\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the two-pointer approach as designed. It efficiently finds two numbers whose sum matches the target and returns their 1-based indices.\n\n2. **Edge Cases**: The code handles scenarios where the list contains negative numbers and mixes of positive, negative, and zero, as demonstrated by the examples given. The constraints ensure that there's always exactly one solution, so the code works under all defined conditions.\n\n3. **Complexity**: This solution runs in O(n) time complexity, since it iterates through the list with two pointers. The space complexity is O(1) because it only uses a constant amount of additional space.\n\n4. **Code Quality**: The code is clean, readable, and follows best practices. Variable names are descriptive and the logic is straightforward. One pointer starts at the beginning, the other at the end, and they move towards each other until the target sum is found.\n\n5. **Test Cases**: The algorithm produces correct outputs for the examples provided:\n   - Input: `[2,7,11,15]`, target `9` returns `[1,2]`.\n   - Input: `[2,3,4]`, target `6` returns `[1,3]`.\n   - Input: `[-1,0]`, target `-1` returns `[1,2]`.\n\n6. **Potential Issues**: No bugs or logical errors are apparent. The code is concise and effectively fulfills the problem requirements using a constant space two-pointer approach.\n\nThe solution is correct, efficient, and well-implemented given the problem constraints and example cases.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n","Model":"se-gpt-4o","Latency":187110001943,"SolvedAt":"2025-09-06T23:11:09.527807873+02:00","PromptTokens":4387,"OutputTokens":1097}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"167","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n"},"SubmissionId":1761941803,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:45:30.681388643+02:00"}}}
