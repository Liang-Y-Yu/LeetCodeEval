{"Question":{"Data":{"Question":{"questionFrontendId":"22","questionId":"22","Content":"<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n","SampleTestCase":"3","ExampleTestcases":"3\n1","Difficulty":"Medium","Title":"Generate Parentheses","TitleSlug":"generate-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 2529484, \"totalSubmissionRaw\": 3259354, \"acRate\": \"77.6%\"}","Likes":22595,"Dislikes":1056,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function generateParenthesis(n: number): string[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func generateParenthesis(n int) []string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:43:08.042698139+02:00","AcRate":"77.6","TotalSubmissions":3259354,"TotalAccepted":2529484,"AcceptanceRate":0.7760691228998139,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/generate-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n```\n\n","TypedCode":"\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n","Model":"se-gpt-4o","Latency":4600001986,"SolvedAt":"2025-09-06T22:56:42.269564954+02:00","PromptTokens":2465,"OutputTokens":444}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"22","typed_code":"\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)\n                return\n            if left < n:\n                backtrack(S + '(', left + 1, right)\n            if right < left:\n                backtrack(S + ')', left, right + 1)\n        \n        result = []\n        backtrack(\"\", 0, 0)\n        return result\n"},"SubmissionId":1761930952,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:24:11.946649389+02:00"}}}
