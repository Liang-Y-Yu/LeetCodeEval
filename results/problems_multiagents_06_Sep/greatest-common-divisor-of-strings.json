{"Question":{"Data":{"Question":{"questionFrontendId":"1071","questionId":"1146","Content":"<p>For two strings <code>s</code> and <code>t</code>, we say &quot;<code>t</code> divides <code>s</code>&quot; if and only if <code>s = t + t + t + ... + t + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>\n\n<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n<strong>Output:</strong> &quot;ABC&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n\t<li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>\n</ul>\n","SampleTestCase":"\"ABCABC\"\n\"ABC\"","ExampleTestcases":"\"ABCABC\"\n\"ABC\"\n\"ABABAB\"\n\"ABAB\"\n\"LEET\"\n\"CODE\"","Difficulty":"Easy","Title":"Greatest Common Divisor of Strings","TitleSlug":"greatest-common-divisor-of-strings","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"837.7K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 837654, \"totalSubmissionRaw\": 1582373, \"acRate\": \"52.9%\"}","Likes":5807,"Dislikes":1616,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String gcdOfStrings(String str1, String str2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* gcdOfStrings(char* str1, char* str2) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string GcdOfStrings(string str1, string str2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function gcdOfStrings(str1: string, str2: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function gcdOfStrings($str1, $str2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func gcdOfStrings(_ str1: String, _ str2: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun gcdOfStrings(str1: String, str2: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String gcdOfStrings(String str1, String str2) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func gcdOfStrings(str1 string, str2 string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef gcd_of_strings(str1, str2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def gcdOfStrings(str1: String, str2: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn gcd_of_strings(str1: String, str2: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (gcd-of-strings str1 str2)\n  (-> string? string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec gcd_of_strings(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\ngcd_of_strings(Str1, Str2) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec gcd_of_strings(str1 :: String.t, str2 :: String.t) :: String.t\n  def gcd_of_strings(str1, str2) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:44:06.185473935+02:00","AcRate":"52.9","TotalSubmissions":1582373,"TotalAccepted":837654,"AcceptanceRate":0.5293657058101977,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/greatest-common-divisor-of-strings/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n```\n\n","TypedCode":"\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n","Model":"se-gpt-4o","Latency":5945464272,"SolvedAt":"2025-09-06T22:56:48.217633998+02:00","PromptTokens":3182,"OutputTokens":652}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1146","typed_code":"\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        def is_divisible(s: str, t: str) -> bool:\n            if len(s) % len(t) != 0:\n                return False\n            return s == t * (len(s) // len(t))\n        \n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n        \n        len_gcd = gcd(len(str1), len(str2))\n        candidate = str1[:len_gcd]\n        \n        if is_divisible(str1, candidate) and is_divisible(str2, candidate):\n            return candidate\n        else:\n            return \"\"\n"},"SubmissionId":1761931181,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:24:36.058378835+02:00"}}}
