{"Question":{"Data":{"Question":{"questionFrontendId":"13","questionId":"13","Content":"<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two ones added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n","SampleTestCase":"\"III\"","ExampleTestcases":"\"III\"\n\"LVIII\"\n\"MCMXCIV\"","Difficulty":"Easy","Title":"Roman to Integer","TitleSlug":"roman-to-integer","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"5.2M\", \"totalSubmission\": \"7.9M\", \"totalAcceptedRaw\": 5158873, \"totalSubmissionRaw\": 7888091, \"acRate\": \"65.4%\"}","Likes":16515,"Dislikes":1152,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def romanToInt(self, s: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int romanToInt(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function romanToInt(s: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int romanToInt(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func romanToInt(s string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:49:16.58815397+02:00","AcRate":"65.4","TotalSubmissions":7888091,"TotalAccepted":5158873,"AcceptanceRate":0.6540077947883715,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/roman-to-integer/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n```\n\n=== VERIFICATION ===\nVerification Report:\n\n1. **Correctness**:\n   - The code correctly implements the designed algorithm. It converts a Roman numeral string to an integer by iterating over the string in reverse order, computing the integer value with handling for subtraction cases where a smaller numeral precedes a larger one.\n\n2. **Edge Cases**:\n   - The algorithm handles edge cases well, given the constraints (1 <= s.length <= 15), and the guarantee that the input is a valid Roman numeral between 1 and 3999. The logic of reversing the string and using subtraction when a numeral is smaller than the previous ensures correct handling for strings like \"IV\", \"IX\", \"XL\", \"XC\", \"CD\", and \"CM\".\n\n3. **Complexity**:\n   - The time complexity is O(n), where n is the length of the input string `s`. This is optimal for this problem as each character in the string is processed exactly once.\n   - The space complexity is O(1) due to the use of a fixed-size dictionary and a few integer variables.\n\n4. **Code Quality**:\n   - The code is clean, readable, and follows best practices. Variable names are descriptive, and the use of a dictionary to map Roman numerals to integer values is appropriate.\n\n5. **Test Cases**:\n   - I have walked through the provided examples and the code produces correct outputs:\n     - For input \"III\", the output is 3.\n     - For input \"LVIII\", the output is 58.\n     - For input \"MCMXCIV\", the output is 1994.\n\n6. **Potential Issues**:\n   - There are no bugs or logical errors. The solution efficiently handles the conversion using a simple loop and conditions that cater to Roman numeral conventions.\n\nConclusion: The implemented solution is correct and effective, meeting the requirements specified. No further improvements or bug fixes are needed.\n\nHere is the final code:\n\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n```\n\n","TypedCode":"\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n","Model":"se-gpt-4o","Latency":8789687007,"SolvedAt":"2025-09-06T23:05:26.917605689+02:00","PromptTokens":4094,"OutputTokens":977}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"13","typed_code":"\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_to_value = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        prev_value = 0\n        \n        for char in reversed(s):\n            current_value = roman_to_value[char]\n            \n            if current_value < prev_value:\n                result -= current_value\n            else:\n                result += current_value\n                \n            prev_value = current_value\n        \n        return result\n"},"SubmissionId":1761939242,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:40:15.885192277+02:00"}}}
