{"Question":{"Data":{"Question":{"questionFrontendId":"70","questionId":"70","Content":"<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n","SampleTestCase":"2","ExampleTestcases":"2\n3","Difficulty":"Easy","Title":"Climbing Stairs","TitleSlug":"climbing-stairs","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4.5M\", \"totalSubmission\": \"8.4M\", \"totalAcceptedRaw\": 4505145, \"totalSubmissionRaw\": 8393385, \"acRate\": \"53.7%\"}","Likes":23660,"Dislikes":982,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjg=","Name":"Math","Slug":"math"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjMz","Name":"Memoization","Slug":"memoization"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def climbStairs(self, n: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int climbStairs(int n) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function climbStairs(n: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int climbStairs(int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func climbStairs(n int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:42:10.722152995+02:00","AcRate":"53.7","TotalSubmissions":8393385,"TotalAccepted":4505145,"AcceptanceRate":0.5367494759265778,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/climbing-stairs/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        # Initialize the base cases\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        # Fill the dp table using the relation\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[n]\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        # Base cases\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        # Algorithm Choice: Dynamic Programming (DP)\n        # Step-by-step Approach:\n        # 1. Initialize a dp array of size n+1 to store the number of ways to reach each step.\n        # 2. Set dp[1] to 1 and dp[2] to 2, which are our base cases.\n        # 3. Use a loop starting from the 3rd step to n, compute the number of ways using the relation:\n        #    dp[i] = dp[i-1] + dp[i-2], which means the number of ways to reach step i is the sum of the ways to reach steps i-1 and i-2.\n        # 4. Return dp[n], which contains the number of ways to reach the nth step.\n\n        # Data Structures: Array (List) for storing computed ways for each step\n        \n        # Create a dp list to store ways to climb to each step\n        dp = [0] * (n + 1)\n        \n        # Base cases\n        dp[1] = 1\n        dp[2] = 2\n        \n        # Fill dp table\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        # Return the result for the nth step\n        return dp[n]\n\n# Time Complexity: O(n), where n is the number of steps. We are iterating through the steps to fill the dp table.\n# Space Complexity: O(n), due to the dp array used for storing the number of ways to reach each step.\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[n]\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[n]\n```\n\n","TypedCode":"\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[n]\n","Model":"se-gpt-4o","Latency":6567177592,"SolvedAt":"2025-09-06T22:53:25.081958154+02:00","PromptTokens":3397,"OutputTokens":747}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"70","typed_code":"\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[n]\n"},"SubmissionId":1761927580,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:17:38.459159943+02:00"}}}
