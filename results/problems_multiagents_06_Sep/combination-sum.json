{"Question":{"Data":{"Question":{"questionFrontendId":"39","questionId":"39","Content":"<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword=\"frequency-array\">frequency</span> of at least one of the chosen numbers is different.</p>\n\n<p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>2 &lt;= candidates[i] &lt;= 40</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 40</code></li>\n</ul>\n","SampleTestCase":"[2,3,6,7]\n7","ExampleTestcases":"[2,3,6,7]\n7\n[2,3,5]\n8\n[2]\n1","Difficulty":"Medium","Title":"Combination Sum","TitleSlug":"combination-sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 2736736, \"totalSubmissionRaw\": 3636645, \"acRate\": \"75.3%\"}","Likes":20294,"Dislikes":500,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE0","Name":"Backtracking","Slug":"backtracking"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function combinationSum(candidates: number[], target: number): number[][] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum($candidates, $target) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<List<int>> combinationSum(List<int> candidates, int target) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func combinationSum(candidates []int, target int) [][]int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum(candidates, target)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (combination-sum candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec combination_sum(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum(Candidates, Target) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum(candidates, target) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:41:47.683196315+02:00","AcRate":"75.3","TotalSubmissions":3636645,"TotalAccepted":2736736,"AcceptanceRate":0.7525441718946997,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/combination-sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            if remaining == 0:\n                result.append(list(path))\n                return\n            for i in range(start, len(candidates)):\n                if candidates[i] <= remaining:\n                    path.append(candidates[i])\n                    backtrack(remaining - candidates[i], i, path, result)\n                    path.pop()\n        \n        result = []\n        backtrack(target, 0, [], result)\n        return result\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            # If we've hit the target value, add the current path to the results\n            if remaining == 0:\n                result.append(list(path))\n                return\n            # Iterate over the candidates starting from the current index\n            for i in range(start, len(candidates)):\n                # Only proceed if the current candidate can fit into the remaining sum\n                if candidates[i] <= remaining:\n                    # Add the candidate to the current path\n                    path.append(candidates[i])\n                    # Recurse with updated remaining sum and the same start index because we can reuse the candidate\n                    backtrack(remaining - candidates[i], i, path, result)\n                    # Backtrack by removing the candidate from the path\n                    path.pop()\n        \n        result = []\n        # Start the backtracking process from the first candidate\n        backtrack(target, 0, [], result)\n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            if remaining == 0:\n                result.append(list(path))\n                return\n            for i in range(start, len(candidates)):\n                if candidates[i] <= remaining:\n                    path.append(candidates[i])\n                    backtrack(remaining - candidates[i], i, path, result)\n                    path.pop()\n        \n        result = []\n        backtrack(target, 0, [], result)\n        return result\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            # If we've hit the target value, add the current path to the results\n            if remaining == 0:\n                result.append(list(path))\n                return\n            # Iterate over the candidates starting from the current index\n            for i in range(start, len(candidates)):\n                # Only proceed if the current candidate can fit into the remaining sum\n                if candidates[i] <= remaining:\n                    # Add the candidate to the current path\n                    path.append(candidates[i])\n                    # Recurse with updated remaining sum and the same start index because we can reuse the candidate\n                    backtrack(remaining - candidates[i], i, path, result)\n                    # Backtrack by removing the candidate from the path\n                    path.pop()\n        \n        result = []\n        # Start the backtracking process from the first candidate\n        backtrack(target, 0, [], result)\n        return result\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            if remaining == 0:\n                result.append(list(path))\n                return\n            for i in range(start, len(candidates)):\n                if candidates[i] <= remaining:\n                    path.append(candidates[i])\n                    backtrack(remaining - candidates[i], i, path, result)\n                    path.pop()\n        \n        result = []\n        backtrack(target, 0, [], result)\n        return result\n","Model":"se-gpt-4o","Latency":6236061688,"SolvedAt":"2025-09-06T22:53:46.469828346+02:00","PromptTokens":3583,"OutputTokens":699}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"39","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        def backtrack(remaining, start, path, result):\n            if remaining == 0:\n                result.append(list(path))\n                return\n            for i in range(start, len(candidates)):\n                if candidates[i] <= remaining:\n                    path.append(candidates[i])\n                    backtrack(remaining - candidates[i], i, path, result)\n                    path.pop()\n        \n        result = []\n        backtrack(target, 0, [], result)\n        return result\n"},"SubmissionId":1761927979,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:18:26.216096841+02:00"}}}
