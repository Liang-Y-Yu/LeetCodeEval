{"Question":{"Data":{"Question":{"questionFrontendId":"1143","questionId":"1250","Content":"<p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong>. </em>If there is no <strong>common subsequence</strong>, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>\n</ul>\n\n<p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; \n<strong>Output:</strong> 3  \n<strong>Explanation:</strong> The longest common subsequence is &quot;ace&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest common subsequence is &quot;abc&quot; and its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text1 = &quot;abc&quot;, text2 = &quot;def&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no such common subsequence, so the result is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>\n\t<li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li>\n</ul>\n","SampleTestCase":"\"abcde\"\n\"ace\"","ExampleTestcases":"\"abcde\"\n\"ace\"\n\"abc\"\n\"abc\"\n\"abc\"\n\"def\"","Difficulty":"Medium","Title":"Longest Common Subsequence","TitleSlug":"longest-common-subsequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1602088, \"totalSubmissionRaw\": 2739496, \"acRate\": \"58.5%\"}","Likes":14611,"Dislikes":235,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestCommonSubsequence(self, text1, text2):\n        \"\"\"\n        :type text1: str\n        :type text2: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int longestCommonSubsequence(char* text1, char* text2) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LongestCommonSubsequence(string text1, string text2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\nvar longestCommonSubsequence = function(text1, text2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestCommonSubsequence(text1: string, text2: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $text1\n     * @param String $text2\n     * @return Integer\n     */\n    function longestCommonSubsequence($text1, $text2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestCommonSubsequence(_ text1: String, _ text2: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestCommonSubsequence(text1: String, text2: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int longestCommonSubsequence(String text1, String text2) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestCommonSubsequence(text1 string, text2 string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} text1\n# @param {String} text2\n# @return {Integer}\ndef longest_common_subsequence(text1, text2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestCommonSubsequence(text1: String, text2: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_common_subsequence(text1: String, text2: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-common-subsequence text1 text2)\n  (-> string? string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_common_subsequence(Text1 :: unicode:unicode_binary(), Text2 :: unicode:unicode_binary()) -> integer().\nlongest_common_subsequence(Text1, Text2) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_common_subsequence(text1 :: String.t, text2 :: String.t) :: integer\n  def longest_common_subsequence(text1, text2) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:45:52.650234556+02:00","AcRate":"58.5","TotalSubmissions":2739496,"TotalAccepted":1602088,"AcceptanceRate":0.5848112207500942,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-common-subsequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        # Determine the length of each string\n        m, n = len(text1), len(text2)\n        \n        # Create a 2D DP array where dp[i][j] represents the length of LCS \n        # of text1[0:i] and text2[0:j]\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match, increment LCS length found so far\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Take max of excluding character from either text1 or text2\n        \n        # The answer is the length of the longest common subsequence of text1 and text2\n        return dp[m][n]\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        # Determine the length of each string\n        m, n = len(text1), len(text2)\n        \n        # Create a 2D DP array where dp[i][j] represents the length of LCS \n        # of text1[0:i] and text2[0:j]\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match, increment LCS length found so far\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Take max of excluding character from either text1 or text2\n        \n        # The answer is the length of the longest common subsequence of text1 and text2\n        return dp[m][n]\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]\n```\n\n=== VERIFICATION ===\nHere's the verified implementation:\n\n```python\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]\n```\n\nVerification Report:\n\n1. **Correctness**: The solution correctly implements the dynamic programming approach to find the longest common subsequence, using a 2D array `dp` where `dp[i][j]` represents the length of the longest common subsequence of `text1[:i]` and `text2[:j]`. The transitions and base cases are handled correctly.\n\n2. **Edge Cases**: The solution should handle all edge cases, including when `text1` or `text2` are of length 1 (both equal or unequal), and when there are no common characters. Given the constraints, scenarios like empty strings don't need specific handling because the minimum length is `1`.\n\n3. **Complexity**: The time complexity is `O(m*n)` where `m` and `n` are the lengths of `text1` and `text2`. The space complexity is also `O(m*n)` due to the 2D DP array. This is optimal for the problem constraints.\n\n4. **Code Quality**: The code is clean and follows good practices. It uses meaningful variable names, and the logic is straightforward and easy to follow.\n\n5. **Test Cases**: The provided examples produce correct outputs:\n   - For `text1 = \"abcde\"` and `text2 = \"ace\"`, it returns `3` as expected.\n   - For `text1 = \"abc\"` and `text2 = \"abc\"`, it returns `3` as expected.\n   - For `text1 = \"abc\"` and `text2 = \"def\"`, it returns `0` as expected.\n\n6. **Potential Issues**: There are no apparent bugs or logical errors in the provided implementation. The solution appears robust and efficient given the constraints.\n\nOverall, the solution is correct, meets all requirements, and passes the provided sample test cases successfully.\n\n","TypedCode":"\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]\n","Model":"se-gpt-4o","Latency":10245909776,"SolvedAt":"2025-09-06T22:58:57.90072887+02:00","PromptTokens":4028,"OutputTokens":1252}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1250","typed_code":"\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]\n"},"SubmissionId":1761933813,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:29:41.539705746+02:00"}}}
