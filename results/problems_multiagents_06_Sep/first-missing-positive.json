{"Question":{"Data":{"Question":{"questionFrontendId":"41","questionId":"41","Content":"<p>Given an unsorted integer array <code>nums</code>. Return the <em>smallest positive integer</em> that is <em>not present</em> in <code>nums</code>.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","SampleTestCase":"[1,2,0]","ExampleTestcases":"[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]","Difficulty":"Hard","Title":"First Missing Positive","TitleSlug":"first-missing-positive","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.7M\", \"totalAcceptedRaw\": 1551935, \"totalSubmissionRaw\": 3738407, \"acRate\": \"41.5%\"}","Likes":17838,"Dislikes":1946,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int firstMissingPositive(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function firstMissingPositive(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int firstMissingPositive(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func firstMissingPositive(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (first-missing-positive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec first_missing_positive(Nums :: [integer()]) -> integer().\nfirst_missing_positive(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-06T22:43:28.059460493+02:00","AcRate":"41.5","TotalSubmissions":3738407,"TotalAccepted":1551935,"AcceptanceRate":0.41513270224456567,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/first-missing-positive/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        # First pass, mark numbers that are out of range with a special marker value equal to n + 1\n        # and update the array, so any potential positive integer within the array falls in range 1 to n.\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        \n        # Second pass, use the index of the array to mark presence of numbers\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n        \n        # Third pass, identify the first location where the number is positive\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        # If all numbers from 1 to n are marked, then the missing number is n + 1\n        return n + 1\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        # Step 1: Replace numbers out of range [1, n] with n + 1\n        # This ensures all potential positive integers are within the array bounds we care about (1 to n)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        \n        # Step 2: Use the array index as a hash to record the presence of elements\n        # Mark the presence of a number by making the value at its corresponding index negative\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n        \n        # Step 3: The first positive index represents the missing number\n        # Find the first index where the value is positive, the index + 1 is the missing integer\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        # If all numbers from 1 to n are present, the missing number is n + 1\n        return n + 1\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        return n + 1\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        # Step 1: Replace numbers out of range [1, n] with n + 1\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n\n        # Step 2: Use the array index as a hash to record the presence of elements\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n\n        # Step 3: The first positive index represents the missing number\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n\n        # If all numbers from 1 to n are present, the missing number is n + 1\n        return n + 1\n```\n\n","TypedCode":"\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        return n + 1\n","Model":"se-gpt-4o","Latency":6589971809,"SolvedAt":"2025-09-06T22:56:29.321230894+02:00","PromptTokens":3643,"OutputTokens":878}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"41","typed_code":"\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                if nums[num - 1] > 0:\n                    nums[num - 1] = -nums[num - 1]\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        return n + 1\n"},"SubmissionId":1761930754,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-06T23:23:45.311318275+02:00"}}}
