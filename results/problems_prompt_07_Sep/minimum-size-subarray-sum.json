{"Question":{"Data":{"Question":{"questionFrontendId":"209","questionId":"209","Content":"<p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a </em><span data-keyword=\"subarray-nonempty\"><em>subarray</em></span><em> whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 7, nums = [2,3,1,2,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The subarray [4,3] has the minimal length under the problem constraint.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 4, nums = [1,4,4]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.","SampleTestCase":"7\n[2,3,1,2,4,3]","ExampleTestcases":"7\n[2,3,1,2,4,3]\n4\n[1,4,4]\n11\n[1,1,1,1,1,1,1,1]","Difficulty":"Medium","Title":"Minimum Size Subarray Sum","TitleSlug":"minimum-size-subarray-sum","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1581493, \"totalSubmissionRaw\": 3164459, \"acRate\": \"50.0%\"}","Likes":13741,"Dislikes":514,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"},{"Id":"VG9waWNUYWdOb2RlOjYxMDY4","Name":"Prefix Sum","Slug":"prefix-sum"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        :type target: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minSubArrayLen(int target, int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinSubArrayLen(int target, int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(target, nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minSubArrayLen(target: number, nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSubArrayLen($target, $nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minSubArrayLen(_ target: Int, _ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minSubArrayLen(target: Int, nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minSubArrayLen(int target, List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minSubArrayLen(target int, nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer} target\n# @param {Integer[]} nums\n# @return {Integer}\ndef min_sub_array_len(target, nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minSubArrayLen(target: Int, nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn min_sub_array_len(target: i32, nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (min-sub-array-len target nums)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec min_sub_array_len(Target :: integer(), Nums :: [integer()]) -> integer().\nmin_sub_array_len(Target, Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec min_sub_array_len(target :: integer, nums :: [integer]) :: integer\n  def min_sub_array_len(target, nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T14:33:52.875312944+02:00","AcRate":"50.0","TotalSubmissions":3164459,"TotalAccepted":1581493,"AcceptanceRate":0.4997672587952633,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/minimum-size-subarray-sum/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n \nExample 1:\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\nExample 2:\nInput: target = 4, nums = [1,4,4]\nOutput: 1\nExample 3:\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n \nConstraints:\n\t1 <= target <= 10^9\n\t1 <= nums.length <= 10^5\n\t1 <= nums[i] <= 10^4\n \nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        min_length = float('inf')\n        current_sum = 0\n        start = 0\n        \n        for end in range(n):\n            current_sum += nums[end]\n            while current_sum >= target:\n                min_length = min(min_length, end - start + 1)\n                current_sum -= nums[start]\n                start += 1\n                \n        return 0 if min_length == float('inf') else min_length\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        min_length = float('inf')\n        current_sum = 0\n        start = 0\n        \n        for end in range(n):\n            current_sum += nums[end]\n            while current_sum >= target:\n                min_length = min(min_length, end - start + 1)\n                current_sum -= nums[start]\n                start += 1\n                \n        return 0 if min_length == float('inf') else min_length\n","Model":"gpt-4o-2024-08-06","Latency":1080399101,"SolvedAt":"2025-09-07T14:48:14.518980347+02:00","PromptTokens":439,"OutputTokens":125}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"209","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        min_length = float('inf')\n        current_sum = 0\n        start = 0\n        \n        for end in range(n):\n            current_sum += nums[end]\n            while current_sum >= target:\n                min_length = min(min_length, end - start + 1)\n                current_sum -= nums[start]\n                start += 1\n                \n        return 0 if min_length == float('inf') else min_length\n"},"SubmissionId":1762686771,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T15:23:36.392141764+02:00"}}}
