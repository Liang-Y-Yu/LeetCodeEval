{"Question":{"Data":{"Question":{"questionFrontendId":"72","questionId":"72","Content":"<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"horse\"\n\"ros\"","ExampleTestcases":"\"horse\"\n\"ros\"\n\"intention\"\n\"execution\"","Difficulty":"Medium","Title":"Edit Distance","TitleSlug":"edit-distance","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1255781, \"totalSubmissionRaw\": 2116554, \"acRate\": \"59.3%\"}","Likes":15951,"Dislikes":295,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minDistance(char* word1, char* word2) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinDistance(string word1, string word2) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minDistance(word1: string, word2: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minDistance(String word1, String word2) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minDistance(word1 string, word2 string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (min-distance word1 word2)\n  (-> string? string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nmin_distance(Word1, Word2) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\n  def min_distance(word1, word2) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T14:29:33.039757422+02:00","AcRate":"59.3","TotalSubmissions":2116554,"TotalAccepted":1255781,"AcceptanceRate":0.5933139433248573,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/edit-distance/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\tInsert a character\n\tDelete a character\n\tReplace a character\n \nExample 1:\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\nExample 2:\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n \nConstraints:\n\t0 <= word1.length, word2.length <= 500\n\tword1 and word2 consist of lowercase English letters.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        \n        # Create a DP table\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Initialize the base cases: converting a non-empty string to an empty string\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]  # Characters match, no additional operation needed\n                else:\n                    dp[i][j] = min(\n                        dp[i - 1][j] + 1,  # Delete operation\n                        dp[i][j - 1] + 1,  # Insert operation\n                        dp[i - 1][j - 1] + 1  # Replace operation\n                    )\n        \n        # The answer is the number of operations to convert word1 to word2\n        return dp[m][n]\n```","TypedCode":"\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        \n        # Create a DP table\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Initialize the base cases: converting a non-empty string to an empty string\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]  # Characters match, no additional operation needed\n                else:\n                    dp[i][j] = min(\n                        dp[i - 1][j] + 1,  # Delete operation\n                        dp[i][j - 1] + 1,  # Insert operation\n                        dp[i - 1][j - 1] + 1  # Replace operation\n                    )\n        \n        # The answer is the number of operations to convert word1 to word2\n        return dp[m][n]\n","Model":"gpt-4o-2024-08-06","Latency":2116906753,"SolvedAt":"2025-09-07T14:45:47.667674417+02:00","PromptTokens":437,"OutputTokens":300}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"72","typed_code":"\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        \n        # Create a DP table\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Initialize the base cases: converting a non-empty string to an empty string\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]  # Characters match, no additional operation needed\n                else:\n                    dp[i][j] = min(\n                        dp[i - 1][j] + 1,  # Delete operation\n                        dp[i][j - 1] + 1,  # Insert operation\n                        dp[i - 1][j - 1] + 1  # Replace operation\n                    )\n        \n        # The answer is the number of operations to convert word1 to word2\n        return dp[m][n]\n"},"SubmissionId":1762672114,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T15:07:48.029172435+02:00"}}}
