{"Question":{"Data":{"Question":{"questionFrontendId":"433","questionId":"433","Content":"<p>A gene string can be represented by an 8-character long string, with choices from <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>.</p>\n\n<p>Suppose we need to investigate a mutation from a gene string <code>startGene</code> to a gene string <code>endGene</code> where one mutation is defined as one single character changed in the gene string.</p>\n\n<ul>\n\t<li>For example, <code>&quot;AACCGGTT&quot; --&gt; &quot;AACCGGTA&quot;</code> is one mutation.</li>\n</ul>\n\n<p>There is also a gene bank <code>bank</code> that records all the valid gene mutations. A gene must be in <code>bank</code> to make it a valid gene string.</p>\n\n<p>Given the two gene strings <code>startGene</code> and <code>endGene</code> and the gene bank <code>bank</code>, return <em>the minimum number of mutations needed to mutate from </em><code>startGene</code><em> to </em><code>endGene</code>. If there is no such a mutation, return <code>-1</code>.</p>\n\n<p>Note that the starting point is assumed to be valid, so it might not be included in the bank.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> startGene = &quot;AACCGGTT&quot;, endGene = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startGene = &quot;AACCGGTT&quot;, endGene = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bank.length &lt;= 10</code></li>\n\t<li><code>startGene.length == endGene.length == bank[i].length == 8</code></li>\n\t<li><code>startGene</code>, <code>endGene</code>, and <code>bank[i]</code> consist of only the characters <code>[&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;]</code>.</li>\n</ul>\n","SampleTestCase":"\"AACCGGTT\"\n\"AACCGGTA\"\n[\"AACCGGTA\"]","ExampleTestcases":"\"AACCGGTT\"\n\"AACCGGTA\"\n[\"AACCGGTA\"]\n\"AACCGGTT\"\n\"AAACGGTA\"\n[\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]","Difficulty":"Medium","Title":"Minimum Genetic Mutation","TitleSlug":"minimum-genetic-mutation","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"247K\", \"totalSubmission\": \"442.2K\", \"totalAcceptedRaw\": 246978, \"totalSubmissionRaw\": 442228, \"acRate\": \"55.8%\"}","Likes":3224,"Dislikes":343,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjIy","Name":"Breadth-First Search","Slug":"breadth-first-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minMutation(string startGene, string endGene, vector<string>& bank) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minMutation(String startGene, String endGene, String[] bank) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minMutation(self, startGene, endGene, bank):\n        \"\"\"\n        :type startGene: str\n        :type endGene: str\n        :type bank: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minMutation(char* startGene, char* endGene, char** bank, int bankSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinMutation(string startGene, string endGene, string[] bank) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} startGene\n * @param {string} endGene\n * @param {string[]} bank\n * @return {number}\n */\nvar minMutation = function(startGene, endGene, bank) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minMutation(startGene: string, endGene: string, bank: string[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $startGene\n     * @param String $endGene\n     * @param String[] $bank\n     * @return Integer\n     */\n    function minMutation($startGene, $endGene, $bank) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minMutation(_ startGene: String, _ endGene: String, _ bank: [String]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minMutation(startGene: String, endGene: String, bank: Array<String>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minMutation(String startGene, String endGene, List<String> bank) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minMutation(startGene string, endGene string, bank []string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} start_gene\n# @param {String} end_gene\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start_gene, end_gene, bank)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minMutation(startGene: String, endGene: String, bank: Array[String]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn min_mutation(start_gene: String, end_gene: String, bank: Vec<String>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (min-mutation startGene endGene bank)\n  (-> string? string? (listof string?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec min_mutation(StartGene :: unicode:unicode_binary(), EndGene :: unicode:unicode_binary(), Bank :: [unicode:unicode_binary()]) -> integer().\nmin_mutation(StartGene, EndGene, Bank) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec min_mutation(start_gene :: String.t, end_gene :: String.t, bank :: [String.t]) :: integer\n  def min_mutation(start_gene, end_gene, bank) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-09-07T14:34:00.810949604+02:00","AcRate":"55.8","TotalSubmissions":442228,"TotalAccepted":246978,"AcceptanceRate":0.558485668026448,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/minimum-genetic-mutation/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\nSuppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n\tFor example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\nGiven the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n \nExample 1:\nInput: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1\nExample 2:\nInput: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\nOutput: 2\n \nConstraints:\n\t0 <= bank.length <= 10\n\tstartGene.length == endGene.length == bank[i].length == 8\n\tstartGene, endGene, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        # Convert the bank to a set for quick lookup\n        geneBank = set(bank)\n\n        # Check if the endGene is in the bank\n        if endGene not in geneBank:\n            return -1\n        \n        # Initialize the BFS queue and visited set\n        queue = deque([(startGene, 0)])\n        visited = {startGene}\n        \n        # Define possible characters for mutation\n        possibleChars = ['A', 'C', 'G', 'T']\n\n        # Perform BFS\n        while queue:\n            currentGene, mutations = queue.popleft()\n            \n            # Try mutating each position in the current gene\n            for i in range(len(currentGene)):\n                for char in possibleChars:\n                    # Only mutate if the character is different\n                    if currentGene[i] != char:\n                        mutatedGene = currentGene[:i] + char + currentGene[i+1:]\n                        \n                        # If the mutated gene is the endGene, return the number of mutations + 1\n                        if mutatedGene == endGene:\n                            return mutations + 1\n                        \n                        # If mutatedGene is valid and not visited, add to the queue\n                        if mutatedGene in geneBank and mutatedGene not in visited:\n                            visited.add(mutatedGene)\n                            queue.append((mutatedGene, mutations + 1))\n        \n        # If we exhaust the queue without finding the endGene, return -1\n        return -1\n```","TypedCode":"\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        # Convert the bank to a set for quick lookup\n        geneBank = set(bank)\n\n        # Check if the endGene is in the bank\n        if endGene not in geneBank:\n            return -1\n        \n        # Initialize the BFS queue and visited set\n        queue = deque([(startGene, 0)])\n        visited = {startGene}\n        \n        # Define possible characters for mutation\n        possibleChars = ['A', 'C', 'G', 'T']\n\n        # Perform BFS\n        while queue:\n            currentGene, mutations = queue.popleft()\n            \n            # Try mutating each position in the current gene\n            for i in range(len(currentGene)):\n                for char in possibleChars:\n                    # Only mutate if the character is different\n                    if currentGene[i] != char:\n                        mutatedGene = currentGene[:i] + char + currentGene[i+1:]\n                        \n                        # If the mutated gene is the endGene, return the number of mutations + 1\n                        if mutatedGene == endGene:\n                            return mutations + 1\n                        \n                        # If mutatedGene is valid and not visited, add to the queue\n                        if mutatedGene in geneBank and mutatedGene not in visited:\n                            visited.add(mutatedGene)\n                            queue.append((mutatedGene, mutations + 1))\n        \n        # If we exhaust the queue without finding the endGene, return -1\n        return -1\n","Model":"gpt-4o-2024-08-06","Latency":2862219440,"SolvedAt":"2025-09-07T14:48:10.315314314+02:00","PromptTokens":540,"OutputTokens":335}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"433","typed_code":"\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        # Convert the bank to a set for quick lookup\n        geneBank = set(bank)\n\n        # Check if the endGene is in the bank\n        if endGene not in geneBank:\n            return -1\n        \n        # Initialize the BFS queue and visited set\n        queue = deque([(startGene, 0)])\n        visited = {startGene}\n        \n        # Define possible characters for mutation\n        possibleChars = ['A', 'C', 'G', 'T']\n\n        # Perform BFS\n        while queue:\n            currentGene, mutations = queue.popleft()\n            \n            # Try mutating each position in the current gene\n            for i in range(len(currentGene)):\n                for char in possibleChars:\n                    # Only mutate if the character is different\n                    if currentGene[i] != char:\n                        mutatedGene = currentGene[:i] + char + currentGene[i+1:]\n                        \n                        # If the mutated gene is the endGene, return the number of mutations + 1\n                        if mutatedGene == endGene:\n                            return mutations + 1\n                        \n                        # If mutatedGene is valid and not visited, add to the queue\n                        if mutatedGene in geneBank and mutatedGene not in visited:\n                            visited.add(mutatedGene)\n                            queue.append((mutatedGene, mutations + 1))\n        \n        # If we exhaust the queue without finding the endGene, return -1\n        return -1\n"},"SubmissionId":1762686227,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-09-07T15:23:01.493156979+02:00"}}}
