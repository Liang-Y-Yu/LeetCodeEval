{"Question":{"Data":{"Question":{"questionFrontendId":"438","questionId":"438","Content":"<p>Given two strings <code>s</code> and <code>p</code>, return an array of all the start indices of <code>p</code>&#39;s <span data-keyword=\"anagram\">anagrams</span> in <code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"cbaebabacd\"\n\"abc\"","ExampleTestcases":"\"cbaebabacd\"\n\"abc\"\n\"abab\"\n\"ab\"","Difficulty":"Medium","Title":"Find All Anagrams in a String","TitleSlug":"find-all-anagrams-in-a-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1041951, \"totalSubmissionRaw\": 1990977, \"acRate\": \"52.3%\"}","Likes":12812,"Dislikes":360,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char* s, char* p, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findAnagrams(s: string, p: string): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findAnagrams(s: String, p: String): List<Int> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> findAnagrams(String s, String p) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findAnagrams(s string, p string) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-anagrams s p)\n  (-> string? string? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\nfind_anagrams(S, P) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\n  def find_anagrams(s, p) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:49:51.967010605+02:00","AcRate":"52.3","TotalSubmissions":1990977,"TotalAccepted":1041951,"AcceptanceRate":0.523336532767581,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-all-anagrams-in-a-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n \nExample 1:\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\nExample 2:\nInput: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n \nConstraints:\n\t1 <= s.length, p.length <= 3 * 10^4\n\ts and p consist of lowercase English letters.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        len_s, len_p = len(s), len(p)\n        if len_s < len_p:\n            return []\n        \n        p_counter = Counter(p)\n        s_counter = Counter(s[:len_p])\n        \n        result = []\n        \n        if s_counter == p_counter:\n            result.append(0)\n        \n        for i in range(len_p, len_s):\n            s_counter[s[i]] += 1\n            s_counter[s[i - len_p]] -= 1\n            \n            if s_counter[s[i - len_p]] == 0:\n                del s_counter[s[i - len_p]]\n            \n            if s_counter == p_counter:\n                result.append(i - len_p + 1)\n                \n        return result\n```","TypedCode":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        len_s, len_p = len(s), len(p)\n        if len_s < len_p:\n            return []\n        \n        p_counter = Counter(p)\n        s_counter = Counter(s[:len_p])\n        \n        result = []\n        \n        if s_counter == p_counter:\n            result.append(0)\n        \n        for i in range(len_p, len_s):\n            s_counter[s[i]] += 1\n            s_counter[s[i - len_p]] -= 1\n            \n            if s_counter[s[i - len_p]] == 0:\n                del s_counter[s[i - len_p]]\n            \n            if s_counter == p_counter:\n                result.append(i - len_p + 1)\n                \n        return result\n","Model":"gpt-4o-2024-08-06","Latency":1874988389,"SolvedAt":"2025-07-18T15:07:31.489527179+02:00","PromptTokens":438,"OutputTokens":183}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"438","typed_code":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        len_s, len_p = len(s), len(p)\n        if len_s < len_p:\n            return []\n        \n        p_counter = Counter(p)\n        s_counter = Counter(s[:len_p])\n        \n        result = []\n        \n        if s_counter == p_counter:\n            result.append(0)\n        \n        for i in range(len_p, len_s):\n            s_counter[s[i]] += 1\n            s_counter[s[i - len_p]] -= 1\n            \n            if s_counter[s[i - len_p]] == 0:\n                del s_counter[s[i - len_p]]\n            \n            if s_counter == p_counter:\n                result.append(i - len_p + 1)\n                \n        return result\n"},"SubmissionId":1725387692,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:17:34.140273912+02:00"}}}
