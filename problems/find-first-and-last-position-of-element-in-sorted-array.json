{"Question":{"Data":{"Question":{"questionFrontendId":"34","questionId":"34","Content":"<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n","SampleTestCase":"[5,7,7,8,8,10]\n8","ExampleTestcases":"[5,7,7,8,8,10]\n8\n[5,7,7,8,8,10]\n6\n[]\n0","Difficulty":"Medium","Title":"Find First and Last Position of Element in Sorted Array","TitleSlug":"find-first-and-last-position-of-element-in-sorted-array","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"5.9M\", \"totalAcceptedRaw\": 2764436, \"totalSubmissionRaw\": 5876924, \"acRate\": \"47.0%\"}","Likes":22068,"Dislikes":584,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function searchRange(nums: number[], target: number): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func searchRange(nums []int, target int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:49:20.661603925+02:00","AcRate":"47.0","TotalSubmissions":5876924,"TotalAccepted":2764436,"AcceptanceRate":0.4703882507243585,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nExample 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]\n \nConstraints:\n\t0 <= nums.length <= 10^5\n\t-10^9 <= nums[i] <= 10^9\n\tnums is a non-decreasing array.\n\t-10^9 <= target <= 10^9\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        def binary_search(find_start: bool) -> int:\n            low, high = 0, len(nums) - 1\n            result = -1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] < target:\n                    low = mid + 1\n                elif nums[mid] > target:\n                    high = mid - 1\n                else:\n                    result = mid\n                    if find_start:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n            return result\n        \n        start = binary_search(True)\n        if start == -1:\n            return [-1, -1]\n        \n        end = binary_search(False)\n        \n        return [start, end]\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        def binary_search(find_start: bool) -> int:\n            low, high = 0, len(nums) - 1\n            result = -1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] < target:\n                    low = mid + 1\n                elif nums[mid] > target:\n                    high = mid - 1\n                else:\n                    result = mid\n                    if find_start:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n            return result\n        \n        start = binary_search(True)\n        if start == -1:\n            return [-1, -1]\n        \n        end = binary_search(False)\n        \n        return [start, end]\n","Model":"gpt-4o-2024-08-06","Latency":2212017640,"SolvedAt":"2025-07-18T15:07:34.704210256+02:00","PromptTokens":414,"OutputTokens":189}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"34","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        def binary_search(find_start: bool) -> int:\n            low, high = 0, len(nums) - 1\n            result = -1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] < target:\n                    low = mid + 1\n                elif nums[mid] > target:\n                    high = mid - 1\n                else:\n                    result = mid\n                    if find_start:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n            return result\n        \n        start = binary_search(True)\n        if start == -1:\n            return [-1, -1]\n        \n        end = binary_search(False)\n        \n        return [start, end]\n"},"SubmissionId":1725387909,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:17:50.940741666+02:00"}}}
