{"Question":{"Data":{"Question":{"questionFrontendId":"605","questionId":"605","Content":"<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p>\n\n<p>Given an integer array <code>flowerbed</code> containing <code>0</code>&#39;s and <code>1</code>&#39;s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code>&nbsp;<em>if</em> <code>n</code> <em>new flowers can be planted in the</em> <code>flowerbed</code> <em>without violating the no-adjacent-flowers rule and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There are no two adjacent flowers in <code>flowerbed</code>.</li>\n\t<li><code>0 &lt;= n &lt;= flowerbed.length</code></li>\n</ul>\n","SampleTestCase":"[1,0,0,0,1]\n1","ExampleTestcases":"[1,0,0,0,1]\n1\n[1,0,0,0,1]\n2","Difficulty":"Easy","Title":"Can Place Flowers","TitleSlug":"can-place-flowers","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"4.2M\", \"totalAcceptedRaw\": 1206525, \"totalSubmissionRaw\": 4170956, \"acRate\": \"28.9%\"}","Likes":7081,"Dislikes":1287,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def canPlaceFlowers(self, flowerbed, n):\n        \"\"\"\n        :type flowerbed: List[int]\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} flowerbed\n * @param {number} n\n * @return {boolean}\n */\nvar canPlaceFlowers = function(flowerbed, n) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function canPlaceFlowers(flowerbed: number[], n: number): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $flowerbed\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canPlaceFlowers($flowerbed, $n) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool canPlaceFlowers(List<int> flowerbed, int n) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func canPlaceFlowers(flowerbed []int, n int) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} flowerbed\n# @param {Integer} n\n# @return {Boolean}\ndef can_place_flowers(flowerbed, n)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn can_place_flowers(flowerbed: Vec<i32>, n: i32) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (can-place-flowers flowerbed n)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec can_place_flowers(Flowerbed :: [integer()], N :: integer()) -> boolean().\ncan_place_flowers(Flowerbed, N) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec can_place_flowers(flowerbed :: [integer], n :: integer) :: boolean\n  def can_place_flowers(flowerbed, n) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:48:53.572979319+02:00","AcRate":"28.9","TotalSubmissions":4170956,"TotalAccepted":1206525,"AcceptanceRate":0.289268215728001,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/can-place-flowers/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.\n \nExample 1:\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: true\nExample 2:\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: false\n \nConstraints:\n\t1 <= flowerbed.length <= 2 * 10^4\n\tflowerbed[i] is 0 or 1.\n\tThere are no two adjacent flowers in flowerbed.\n\t0 <= n <= flowerbed.length\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        count = 0\n        length = len(flowerbed)\n        \n        for i in range(length):\n            if flowerbed[i] == 0:\n                empty_left = (i == 0) or flowerbed[i - 1] == 0\n                empty_right = (i == length - 1) or flowerbed[i + 1] == 0\n                \n                if empty_left and empty_right:\n                    flowerbed[i] = 1\n                    count += 1\n                \n                if count >= n:\n                    return True\n        \n        return count >= n\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        count = 0\n        length = len(flowerbed)\n        \n        for i in range(length):\n            if flowerbed[i] == 0:\n                empty_left = (i == 0) or flowerbed[i - 1] == 0\n                empty_right = (i == length - 1) or flowerbed[i + 1] == 0\n                \n                if empty_left and empty_right:\n                    flowerbed[i] = 1\n                    count += 1\n                \n                if count >= n:\n                    return True\n        \n        return count >= n\n","Model":"gpt-4o-2024-08-06","Latency":2089814872,"SolvedAt":"2025-07-18T15:06:36.857852716+02:00","PromptTokens":415,"OutputTokens":150}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"605","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        count = 0\n        length = len(flowerbed)\n        \n        for i in range(length):\n            if flowerbed[i] == 0:\n                empty_left = (i == 0) or flowerbed[i - 1] == 0\n                empty_right = (i == length - 1) or flowerbed[i + 1] == 0\n                \n                if empty_left and empty_right:\n                    flowerbed[i] = 1\n                    count += 1\n                \n                if count >= n:\n                    return True\n        \n        return count >= n\n"},"SubmissionId":1725383991,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:13:01.140631915+02:00"}}}
