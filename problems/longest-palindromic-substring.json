{"Question":{"Data":{"Question":{"questionFrontendId":"5","questionId":"5","Content":"<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n","SampleTestCase":"\"babad\"","ExampleTestcases":"\"babad\"\n\"cbbd\"","Difficulty":"Medium","Title":"Longest Palindromic Substring","TitleSlug":"longest-palindromic-substring","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4M\", \"totalSubmission\": \"11M\", \"totalAcceptedRaw\": 3976825, \"totalSubmissionRaw\": 11038712, \"acRate\": \"36.0%\"}","Likes":31066,"Dislikes":1915,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* longestPalindrome(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestPalindrome(s: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestPalindrome(s string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:52:41.413270579+02:00","AcRate":"36.0","TotalSubmissions":11038712,"TotalAccepted":3976825,"AcceptanceRate":0.3602616863271729,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-palindromic-substring/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given a string s, return the longest palindromic substring in s.\n \nExample 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n \nConstraints:\n\t1 <= s.length <= 1000\n\ts consist of only digits and English letters.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expand_around_center(left: int, right: int) -> str:\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left + 1:right]\n        \n        longest_palindrome = \"\"\n        for i in range(len(s)):\n            # Try to find longest palindrome around single center (odd length)\n            palindrome_odd = expand_around_center(i, i)\n            # Try to find longest palindrome around two centers (even length)\n            palindrome_even = expand_around_center(i, i + 1)\n            # Update longest_palindrome if the new palindrome found is longer\n            longest_palindrome = max(longest_palindrome, palindrome_odd, palindrome_even, key=len)\n        \n        return longest_palindrome\n```","TypedCode":"\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expand_around_center(left: int, right: int) -> str:\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left + 1:right]\n        \n        longest_palindrome = \"\"\n        for i in range(len(s)):\n            # Try to find longest palindrome around single center (odd length)\n            palindrome_odd = expand_around_center(i, i)\n            # Try to find longest palindrome around two centers (even length)\n            palindrome_even = expand_around_center(i, i + 1)\n            # Update longest_palindrome if the new palindrome found is longer\n            longest_palindrome = max(longest_palindrome, palindrome_odd, palindrome_even, key=len)\n        \n        return longest_palindrome\n","Model":"gpt-4o-2024-08-06","Latency":1976216470,"SolvedAt":"2025-07-18T15:09:06.670527355+02:00","PromptTokens":294,"OutputTokens":192}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"5","typed_code":"\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expand_around_center(left: int, right: int) -> str:\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left + 1:right]\n        \n        longest_palindrome = \"\"\n        for i in range(len(s)):\n            # Try to find longest palindrome around single center (odd length)\n            palindrome_odd = expand_around_center(i, i)\n            # Try to find longest palindrome around two centers (even length)\n            palindrome_even = expand_around_center(i, i + 1)\n            # Update longest_palindrome if the new palindrome found is longer\n            longest_palindrome = max(longest_palindrome, palindrome_odd, palindrome_even, key=len)\n        \n        return longest_palindrome\n"},"SubmissionId":1725395195,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:26:23.37114129+02:00"}}}
