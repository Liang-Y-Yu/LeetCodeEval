{"Question":{"Data":{"Question":{"questionFrontendId":"443","questionId":"443","Content":"<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n","SampleTestCase":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]","ExampleTestcases":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n[\"a\"]\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]","Difficulty":"Medium","Title":"String Compression","TitleSlug":"string-compression","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"891K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 891016, \"totalSubmissionRaw\": 1528111, \"acRate\": \"58.3%\"}","Likes":5723,"Dislikes":8597,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int compress(vector<char>& chars) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int compress(char[] chars) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def compress(self, chars: List[str]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int compress(char* chars, int charsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int Compress(char[] chars) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function compress(chars: string[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(&$chars) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func compress(_ chars: inout [Character]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun compress(chars: CharArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int compress(List<String> chars) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func compress(chars []byte) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def compress(chars: Array[Char]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n        \n    }\n}"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:56:36.429179154+02:00","AcRate":"58.3","TotalSubmissions":1528111,"TotalAccepted":891016,"AcceptanceRate":0.5830832969594486,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/string-compression/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\n\tIf the group's length is 1, append the character to s.\n\tOtherwise, append the character followed by the group's length.\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nYou must write an algorithm that uses only constant extra space.\n \nExample 1:\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\nExample 2:\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\nExample 3:\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n \nConstraints:\n\t1 <= chars.length <= 2000\n\tchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def compress(self, chars: List[str]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        write_index = 0\n        read_index = 0\n        n = len(chars)\n        \n        while read_index < n:\n            current_char = chars[read_index]\n            count = 0\n            \n            # Count consecutive characters\n            while read_index < n and chars[read_index] == current_char:\n                read_index += 1\n                count += 1\n            \n            # Write the character\n            chars[write_index] = current_char\n            write_index += 1\n            \n            # Write the count if greater than 1\n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n```","TypedCode":"\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        write_index = 0\n        read_index = 0\n        n = len(chars)\n        \n        while read_index < n:\n            current_char = chars[read_index]\n            count = 0\n            \n            # Count consecutive characters\n            while read_index < n and chars[read_index] == current_char:\n                read_index += 1\n                count += 1\n            \n            # Write the character\n            chars[write_index] = current_char\n            write_index += 1\n            \n            # Write the count if greater than 1\n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n","Model":"gpt-4o-2024-08-06","Latency":2061916938,"SolvedAt":"2025-07-18T15:11:37.823804745+02:00","PromptTokens":587,"OutputTokens":168}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"443","typed_code":"\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        write_index = 0\n        read_index = 0\n        n = len(chars)\n        \n        while read_index < n:\n            current_char = chars[read_index]\n            count = 0\n            \n            # Count consecutive characters\n            while read_index < n and chars[read_index] == current_char:\n                read_index += 1\n                count += 1\n            \n            # Write the character\n            chars[write_index] = current_char\n            write_index += 1\n            \n            # Write the count if greater than 1\n            if count > 1:\n                for digit in str(count):\n                    chars[write_index] = digit\n                    write_index += 1\n        \n        return write_index\n"},"SubmissionId":1725405056,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:38:05.61483142+02:00"}}}
