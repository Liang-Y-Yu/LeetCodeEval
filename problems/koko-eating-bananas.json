{"Question":{"Data":{"Question":{"questionFrontendId":"875","questionId":"907","Content":"<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p>\n\n<p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>\n\n<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>\n\n<p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,6,7,11], h = 8\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 5\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 6\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","SampleTestCase":"[3,6,7,11]\n8","ExampleTestcases":"[3,6,7,11]\n8\n[30,11,23,4,20]\n5\n[30,11,23,4,20]\n6","Difficulty":"Medium","Title":"Koko Eating Bananas","TitleSlug":"koko-eating-bananas","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1179730, \"totalSubmissionRaw\": 2404952, \"acRate\": \"49.1%\"}","Likes":12448,"Dislikes":822,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEx","Name":"Binary Search","Slug":"binary-search"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int h) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minEatingSpeed(self, piles, h):\n        \"\"\"\n        :type piles: List[int]\n        :type h: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minEatingSpeed(int* piles, int pilesSize, int h) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinEatingSpeed(int[] piles, int h) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} piles\n * @param {number} h\n * @return {number}\n */\nvar minEatingSpeed = function(piles, h) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minEatingSpeed(piles: number[], h: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @param Integer $h\n     * @return Integer\n     */\n    function minEatingSpeed($piles, $h) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minEatingSpeed(_ piles: [Int], _ h: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minEatingSpeed(piles: IntArray, h: Int): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minEatingSpeed(List<int> piles, int h) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minEatingSpeed(piles []int, h int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} piles\n# @param {Integer} h\n# @return {Integer}\ndef min_eating_speed(piles, h)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minEatingSpeed(piles: Array[Int], h: Int): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn min_eating_speed(piles: Vec<i32>, h: i32) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (min-eating-speed piles h)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec min_eating_speed(Piles :: [integer()], H :: integer()) -> integer().\nmin_eating_speed(Piles, H) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec min_eating_speed(piles :: [integer], h :: integer) :: integer\n  def min_eating_speed(piles, h) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:52:01.520705775+02:00","AcRate":"49.1","TotalSubmissions":2404952,"TotalAccepted":1179730,"AcceptanceRate":0.49054201497576666,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/koko-eating-bananas/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Koko loves to eat bananas. There are n piles of bananas, the i^th pile has piles[i] bananas. The guards have gone and will come back in h hours.\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\nReturn the minimum integer k such that she can eat all the bananas within h hours.\n \nExample 1:\nInput: piles = [3,6,7,11], h = 8\nOutput: 4\nExample 2:\nInput: piles = [30,11,23,4,20], h = 5\nOutput: 30\nExample 3:\nInput: piles = [30,11,23,4,20], h = 6\nOutput: 23\n \nConstraints:\n\t1 <= piles.length <= 10^4\n\tpiles.length <= h <= 10^9\n\t1 <= piles[i] <= 10^9\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def canFinish(piles: List[int], k: int, h: int) -> bool:\n            hours_needed = 0\n            for pile in piles:\n                hours_needed += (pile + k - 1) // k  # equivalent to math.ceil(pile / k)\n            return hours_needed <= h\n        \n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            if canFinish(piles, mid, h):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def canFinish(piles: List[int], k: int, h: int) -> bool:\n            hours_needed = 0\n            for pile in piles:\n                hours_needed += (pile + k - 1) // k  # equivalent to math.ceil(pile / k)\n            return hours_needed <= h\n        \n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            if canFinish(piles, mid, h):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left\n","Model":"gpt-4o-2024-08-06","Latency":2181772248,"SolvedAt":"2025-07-18T15:08:46.070390047+02:00","PromptTokens":468,"OutputTokens":159}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"907","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def canFinish(piles: List[int], k: int, h: int) -> bool:\n            hours_needed = 0\n            for pile in piles:\n                hours_needed += (pile + k - 1) // k  # equivalent to math.ceil(pile / k)\n            return hours_needed <= h\n        \n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            if canFinish(piles, mid, h):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left\n"},"SubmissionId":1725421981,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:55:56.703028883+02:00"}}}
