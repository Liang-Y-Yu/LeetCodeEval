{"Question":{"Data":{"Question":{"questionFrontendId":"3","questionId":"3","Content":"<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without duplicate characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n","SampleTestCase":"\"abcabcbb\"","ExampleTestcases":"\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"","Difficulty":"Medium","Title":"Longest Substring Without Repeating Characters","TitleSlug":"longest-substring-without-repeating-characters","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"7.8M\", \"totalSubmission\": \"20.9M\", \"totalAcceptedRaw\": 7760670, \"totalSubmissionRaw\": 20900241, \"acRate\": \"37.1%\"}","Likes":42491,"Dislikes":2066,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int lengthOfLongestSubstring(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function lengthOfLongestSubstring(s: string): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func lengthOfLongestSubstring(s string) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:52:38.540889194+02:00","AcRate":"37.1","TotalSubmissions":20900241,"TotalAccepted":7760670,"AcceptanceRate":0.3713196417208778,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-substring-without-repeating-characters/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given a string s, find the length of the longest substring without duplicate characters.\n \nExample 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n \nConstraints:\n\t0 <= s.length <= 5 * 10^4\n\ts consists of English letters, digits, symbols and spaces.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_index_map = {}\n        max_length = 0\n        start_index = 0\n\n        for current_index, char in enumerate(s):\n            if char in char_index_map and char_index_map[char] >= start_index:\n                start_index = char_index_map[char] + 1\n            char_index_map[char] = current_index\n            max_length = max(max_length, current_index - start_index + 1)\n\n        return max_length\n```","TypedCode":"\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_index_map = {}\n        max_length = 0\n        start_index = 0\n\n        for current_index, char in enumerate(s):\n            if char in char_index_map and char_index_map[char] >= start_index:\n                start_index = char_index_map[char] + 1\n            char_index_map[char] = current_index\n            max_length = max(max_length, current_index - start_index + 1)\n\n        return max_length\n","Model":"gpt-4o-2024-08-06","Latency":1532059515,"SolvedAt":"2025-07-18T15:09:12.510705087+02:00","PromptTokens":379,"OutputTokens":118}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"3","typed_code":"\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_index_map = {}\n        max_length = 0\n        start_index = 0\n\n        for current_index, char in enumerate(s):\n            if char in char_index_map and char_index_map[char] >= start_index:\n                start_index = char_index_map[char] + 1\n            char_index_map[char] = current_index\n            max_length = max(max_length, current_index - start_index + 1)\n\n        return max_length\n"},"SubmissionId":1725395677,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:26:53.730395974+02:00"}}}
