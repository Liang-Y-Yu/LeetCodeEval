{"Question":{"Data":{"Question":{"questionFrontendId":"1493","questionId":"1586","Content":"<p>Given a binary array <code>nums</code>, you should delete one element from it.</p>\n\n<p>Return <em>the size of the longest non-empty subarray containing only </em><code>1</code><em>&#39;s in the resulting array</em>. Return <code>0</code> if there is no such subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1&#39;s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1,1,0,1,1,0,1]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1&#39;s is [1,1,1,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You must delete one element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n","SampleTestCase":"[1,1,0,1]","ExampleTestcases":"[1,1,0,1]\n[0,1,1,1,0,1,1,0,1]\n[1,1,1]","Difficulty":"Medium","Title":"Longest Subarray of 1's After Deleting One Element","TitleSlug":"longest-subarray-of-1s-after-deleting-one-element","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"441.8K\", \"totalSubmission\": \"637.3K\", \"totalAcceptedRaw\": 441802, \"totalSubmissionRaw\": 637265, \"acRate\": \"69.3%\"}","Likes":4274,"Dislikes":94,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int longestSubarray(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int longestSubarray(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LongestSubarray(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestSubarray = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestSubarray(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestSubarray($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestSubarray(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int longestSubarray(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestSubarray(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_subarray(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestSubarray(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_subarray(Nums :: [integer()]) -> integer().\nlongest_subarray(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_subarray(nums :: [integer]) :: integer\n  def longest_subarray(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:52:28.234585511+02:00","AcRate":"69.3","TotalSubmissions":637265,"TotalAccepted":441802,"AcceptanceRate":0.693278306512989,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.\n \nExample 1:\nInput: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\nExample 2:\nInput: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\nExample 3:\nInput: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.\n \nConstraints:\n\t1 <= nums.length <= 10^5\n\tnums[i] is either 0 or 1.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        max_len = 0\n        current_len = 0\n        prev_len = 0\n        zero_count = 0\n        \n        for num in nums:\n            if num == 1:\n                current_len += 1\n            else:\n                prev_len = current_len\n                current_len = 0\n                zero_count += 1\n        \n            max_len = max(max_len, prev_len + current_len)\n        \n        if zero_count == 0:\n            max_len -= 1  # If there are no zeroes, we must remove one element\n        \n        return max_len\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        max_len = 0\n        current_len = 0\n        prev_len = 0\n        zero_count = 0\n        \n        for num in nums:\n            if num == 1:\n                current_len += 1\n            else:\n                prev_len = current_len\n                current_len = 0\n                zero_count += 1\n        \n            max_len = max(max_len, prev_len + current_len)\n        \n        if zero_count == 0:\n            max_len -= 1  # If there are no zeroes, we must remove one element\n        \n        return max_len\n","Model":"gpt-4o-2024-08-06","Latency":2303606037,"SolvedAt":"2025-07-18T15:09:09.976444098+02:00","PromptTokens":443,"OutputTokens":149}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"1586","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        max_len = 0\n        current_len = 0\n        prev_len = 0\n        zero_count = 0\n        \n        for num in nums:\n            if num == 1:\n                current_len += 1\n            else:\n                prev_len = current_len\n                current_len = 0\n                zero_count += 1\n        \n            max_len = max(max_len, prev_len + current_len)\n        \n        if zero_count == 0:\n            max_len -= 1  # If there are no zeroes, we must remove one element\n        \n        return max_len\n"},"SubmissionId":1725395410,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:26:40.04173017+02:00"}}}
