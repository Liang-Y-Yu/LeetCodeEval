{"Question":{"Data":{"Question":{"questionFrontendId":"2462","questionId":"2553","Content":"<p>You are given a <strong>0-indexed</strong> integer array <code>costs</code> where <code>costs[i]</code> is the cost of hiring the <code>i<sup>th</sup></code> worker.</p>\n\n<p>You are also given two integers <code>k</code> and <code>candidates</code>. We want to hire exactly <code>k</code> workers according to the following rules:</p>\n\n<ul>\n\t<li>You will run <code>k</code> sessions and hire exactly one worker in each session.</li>\n\t<li>In each hiring session, choose the worker with the lowest cost from either the first <code>candidates</code> workers or the last <code>candidates</code> workers. Break the tie by the smallest index.\n\t<ul>\n\t\t<li>For example, if <code>costs = [3,2,7,7,1,2]</code> and <code>candidates = 2</code>, then in the first hiring session, we will choose the <code>4<sup>th</sup></code> worker because they have the lowest cost <code>[<u>3,2</u>,7,7,<u><strong>1</strong>,2</u>]</code>.</li>\n\t\t<li>In the second hiring session, we will choose <code>1<sup>st</sup></code> worker because they have the same lowest cost as <code>4<sup>th</sup></code> worker but they have the smallest index <code>[<u>3,<strong>2</strong></u>,7,<u>7,2</u>]</code>. Please note that the indexing may be changed in the process.</li>\n\t</ul>\n\t</li>\n\t<li>If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.</li>\n\t<li>A worker can only be chosen once.</li>\n</ul>\n\n<p>Return <em>the total cost to hire exactly </em><code>k</code><em> workers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>17,12,10,2</u>,7,<u>2,11,20,8</u>]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [<u>17,12,10,7</u>,<u>2,11,20,8</u>]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [<u>17,12,10,7,11,20,8</u>]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,2,4,1], k = 3, candidates = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>1,2,4,1</u>]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [<u>2,4,1</u>]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [<u>2,4</u>]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= costs.length &lt;= 10<sup>5 </sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k, candidates &lt;= costs.length</code></li>\n</ul>\n","SampleTestCase":"[17,12,10,2,7,2,11,20,8]\n3\n4","ExampleTestcases":"[17,12,10,2,7,2,11,20,8]\n3\n4\n[1,2,4,1]\n3\n3","Difficulty":"Medium","Title":"Total Cost to Hire K Workers","TitleSlug":"total-cost-to-hire-k-workers","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"143.1K\", \"totalSubmission\": \"331.5K\", \"totalAcceptedRaw\": 143147, \"totalSubmissionRaw\": 331546, \"acRate\": \"43.2%\"}","Likes":2010,"Dislikes":710,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjYxMDUw","Name":"Heap (Priority Queue)","Slug":"heap-priority-queue"},{"Id":"VG9waWNUYWdOb2RlOjYxMDU1","Name":"Simulation","Slug":"simulation"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    long long totalCost(vector<int>& costs, int k, int candidates) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public long totalCost(int[] costs, int k, int candidates) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def totalCost(self, costs, k, candidates):\n        \"\"\"\n        :type costs: List[int]\n        :type k: int\n        :type candidates: int\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"long long totalCost(int* costs, int costsSize, int k, int candidates) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public long TotalCost(int[] costs, int k, int candidates) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} costs\n * @param {number} k\n * @param {number} candidates\n * @return {number}\n */\nvar totalCost = function(costs, k, candidates) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function totalCost(costs: number[], k: number, candidates: number): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $costs\n     * @param Integer $k\n     * @param Integer $candidates\n     * @return Integer\n     */\n    function totalCost($costs, $k, $candidates) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func totalCost(_ costs: [Int], _ k: Int, _ candidates: Int) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun totalCost(costs: IntArray, k: Int, candidates: Int): Long {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int totalCost(List<int> costs, int k, int candidates) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func totalCost(costs []int, k int, candidates int) int64 {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} costs\n# @param {Integer} k\n# @param {Integer} candidates\n# @return {Integer}\ndef total_cost(costs, k, candidates)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def totalCost(costs: Array[Int], k: Int, candidates: Int): Long = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn total_cost(costs: Vec<i32>, k: i32, candidates: i32) -> i64 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (total-cost costs k candidates)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec total_cost(Costs :: [integer()], K :: integer(), Candidates :: integer()) -> integer().\ntotal_cost(Costs, K, Candidates) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec total_cost(costs :: [integer], k :: integer, candidates :: integer) :: integer\n  def total_cost(costs, k, candidates) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:57:56.632090038+02:00","AcRate":"43.2","TotalSubmissions":331546,"TotalAccepted":143147,"AcceptanceRate":0.43175607607994065,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/total-cost-to-hire-k-workers/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the i^th worker.\nYou are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:\n\tYou will run k sessions and hire exactly one worker in each session.\n\tIn each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index.\n\t\n\t\tFor example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4^th worker because they have the lowest cost [3,2,7,7,1,2].\n\t\tIn the second hiring session, we will choose 1^st worker because they have the same lowest cost as 4^th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process.\n\t\n\t\n\tIf there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\n\tA worker can only be chosen once.\nReturn the total cost to hire exactly k workers.\n \nExample 1:\nInput: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\nOutput: 11\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\nExample 2:\nInput: costs = [1,2,4,1], k = 3, candidates = 3\nOutput: 4\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n \nConstraints:\n\t1 <= costs.length <= 10^5 \n\t1 <= costs[i] <= 10^5\n\t1 <= k, candidates <= costs.length\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        n = len(costs)\n        total_cost = 0\n        left_candidates = 0\n        right_candidates = n\n        \n        left_heap = []\n        right_heap = []\n        \n        # Initialize the heaps\n        for i in range(candidates):\n            if left_candidates < n:\n                heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                left_candidates += 1\n            \n            if right_candidates > 0:\n                right_candidates -= 1\n                heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n        \n        # Perform k sessions\n        for _ in range(k):\n            if not left_heap or (right_heap and right_heap[0][0] < left_heap[0][0]):\n                cost, index = heapq.heappop(right_heap)\n                total_cost += cost\n                right_candidates -= 1\n                if right_candidates > left_candidates:\n                    heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n            else:\n                cost, index = heapq.heappop(left_heap)\n                total_cost += cost\n                if left_candidates < right_candidates:\n                    heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                    left_candidates += 1\n        \n        return total_cost\n```","TypedCode":"\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        n = len(costs)\n        total_cost = 0\n        left_candidates = 0\n        right_candidates = n\n        \n        left_heap = []\n        right_heap = []\n        \n        # Initialize the heaps\n        for i in range(candidates):\n            if left_candidates < n:\n                heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                left_candidates += 1\n            \n            if right_candidates > 0:\n                right_candidates -= 1\n                heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n        \n        # Perform k sessions\n        for _ in range(k):\n            if not left_heap or (right_heap and right_heap[0][0] < left_heap[0][0]):\n                cost, index = heapq.heappop(right_heap)\n                total_cost += cost\n                right_candidates -= 1\n                if right_candidates > left_candidates:\n                    heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n            else:\n                cost, index = heapq.heappop(left_heap)\n                total_cost += cost\n                if left_candidates < right_candidates:\n                    heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                    left_candidates += 1\n        \n        return total_cost\n","Model":"gpt-4o-2024-08-06","Latency":3142673429,"SolvedAt":"2025-07-18T15:12:05.919166391+02:00","PromptTokens":996,"OutputTokens":307}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"2553","typed_code":"\nfrom typing import List\nimport heapq\n\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        n = len(costs)\n        total_cost = 0\n        left_candidates = 0\n        right_candidates = n\n        \n        left_heap = []\n        right_heap = []\n        \n        # Initialize the heaps\n        for i in range(candidates):\n            if left_candidates < n:\n                heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                left_candidates += 1\n            \n            if right_candidates > 0:\n                right_candidates -= 1\n                heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n        \n        # Perform k sessions\n        for _ in range(k):\n            if not left_heap or (right_heap and right_heap[0][0] < left_heap[0][0]):\n                cost, index = heapq.heappop(right_heap)\n                total_cost += cost\n                right_candidates -= 1\n                if right_candidates > left_candidates:\n                    heapq.heappush(right_heap, (costs[right_candidates], right_candidates))\n            else:\n                cost, index = heapq.heappop(left_heap)\n                total_cost += cost\n                if left_candidates < right_candidates:\n                    heapq.heappush(left_heap, (costs[left_candidates], left_candidates))\n                    left_candidates += 1\n        \n        return total_cost\n"},"SubmissionId":1725406726,"CheckResponse":{"status_code":11,"status_msg":"Wrong Answer","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:39:53.759381338+02:00"}}}
