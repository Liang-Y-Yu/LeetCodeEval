{"Question":{"Data":{"Question":{"questionFrontendId":"6","questionId":"6","Content":"<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n","SampleTestCase":"\"PAYPALISHIRING\"\n3","ExampleTestcases":"\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1","Difficulty":"Medium","Title":"Zigzag Conversion","TitleSlug":"zigzag-conversion","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3.5M\", \"totalAcceptedRaw\": 1821212, \"totalSubmissionRaw\": 3512847, \"acRate\": \"51.8%\"}","Likes":8630,"Dislikes":15467,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* convert(char* s, int numRows) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function convert(s: string, numRows: number): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func convert(s string, numRows int) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (convert s numRows)\n  (-> string? exact-integer? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\nconvert(S, NumRows) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:58:17.102680063+02:00","AcRate":"51.8","TotalSubmissions":3512847,"TotalAccepted":1821212,"AcceptanceRate":0.5184433025406459,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/zigzag-conversion/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n \nExample 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\nExample 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\nExample 3:\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n \nConstraints:\n\t1 <= s.length <= 1000\n\ts consists of English letters (lower-case and upper-case), ',' and '.'.\n\t1 <= numRows <= 1000\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n        \n        # Initialize rows as empty strings\n        rows = [''] * min(numRows, len(s))\n        current_row = 0\n        going_down = False\n        \n        # Traverse the string\n        for char in s:\n            rows[current_row] += char\n            if current_row == 0 or current_row == numRows - 1:\n                going_down = not going_down\n            current_row += 1 if going_down else -1\n        \n        # Concatenate rows\n        result = ''.join(rows)\n        return result\n```","TypedCode":"\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n        \n        # Initialize rows as empty strings\n        rows = [''] * min(numRows, len(s))\n        current_row = 0\n        going_down = False\n        \n        # Traverse the string\n        for char in s:\n            rows[current_row] += char\n            if current_row == 0 or current_row == numRows - 1:\n                going_down = not going_down\n            current_row += 1 if going_down else -1\n        \n        # Concatenate rows\n        result = ''.join(rows)\n        return result\n","Model":"gpt-4o-2024-08-06","Latency":2323067501,"SolvedAt":"2025-07-18T15:12:35.908614588+02:00","PromptTokens":473,"OutputTokens":146}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"6","typed_code":"\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n        \n        # Initialize rows as empty strings\n        rows = [''] * min(numRows, len(s))\n        current_row = 0\n        going_down = False\n        \n        # Traverse the string\n        for char in s:\n            rows[current_row] += char\n            if current_row == 0 or current_row == numRows - 1:\n                going_down = not going_down\n            current_row += 1 if going_down else -1\n        \n        # Concatenate rows\n        result = ''.join(rows)\n        return result\n"},"SubmissionId":1725431165,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T11:04:58.780230581+02:00"}}}
