{"Question":{"Data":{"Question":{"questionFrontendId":"152","questionId":"152","Content":"<p>Given an integer array <code>nums</code>, find a <span data-keyword=\"subarray-nonempty\">subarray</span> that has the largest product, and return <em>the product</em>.</p>\n\n<p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [2,3] has the largest product 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>The product of any subarray of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n","SampleTestCase":"[2,3,-2,4]","ExampleTestcases":"[2,3,-2,4]\n[-2,0,-1]","Difficulty":"Medium","Title":"Maximum Product Subarray","TitleSlug":"maximum-product-subarray","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"4.8M\", \"totalAcceptedRaw\": 1694103, \"totalSubmissionRaw\": 4829490, \"acRate\": \"35.1%\"}","Likes":19565,"Dislikes":788,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int maxProduct(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxProduct(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxProduct(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxProduct(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_product(Nums :: [integer()]) -> integer().\nmax_product(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-07-18T14:53:23.898521523+02:00","AcRate":"35.1","TotalSubmissions":4829490,"TotalAccepted":1694103,"AcceptanceRate":0.350783001931881,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/maximum-product-subarray/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Hi, this is a coding interview. You will be given:\n* A problem statement (with sample test cases if available).\n* A starter code snippet (with fixed function signatures).\n\nPlease write your solution in the python3 programming language. Your code must:\n* Solve the problem fully and correctly.\n* Pass all provided sample test cases.\n* Run within acceptable time and memory limits (assume large inputs if none are specified).\n* Follow good coding practices (clear logic, readable structure, appropriate use of language features).\n\nHere is the problem statement: Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n \nExample 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\nExample 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n \nConstraints:\n\t1 <= nums.length <= 2 * 10^4\n\t-10 <= nums[i] <= 10\n\tThe product of any subarray of nums is guaranteed to fit in a 32-bit integer.\n\nHere is the code snippet, which you should expand with your solution: class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n\nImportant Requirements:\n* Do not change any provided function signatures, class names, or method names.\n* Output only valid source code that can be executed as-is, without any further improvements or bugfixes.\n* Do not include docstrings, markdown, or commentary in your final code.\n\nGood luck!\n","Answer":"```python\nfrom typing import List\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Initialize max_product, min_product, and result to the first element\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            \n            # When multiplying a negative number, the max becomes min and vice versa\n            if num < 0:\n                max_product, min_product = min_product, max_product\n            \n            # Calculate the max and min product for the current element\n            max_product = max(num, max_product * num)\n            min_product = min(num, min_product * num)\n            \n            # Update the result which is the maximum product found so far\n            result = max(result, max_product)\n        \n        return result\n```","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Initialize max_product, min_product, and result to the first element\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            \n            # When multiplying a negative number, the max becomes min and vice versa\n            if num < 0:\n                max_product, min_product = min_product, max_product\n            \n            # Calculate the max and min product for the current element\n            max_product = max(num, max_product * num)\n            min_product = min(num, min_product * num)\n            \n            # Update the result which is the maximum product found so far\n            result = max(result, max_product)\n        \n        return result\n","Model":"gpt-4o-2024-08-06","Latency":2071027694,"SolvedAt":"2025-07-18T15:09:32.797610481+02:00","PromptTokens":374,"OutputTokens":197}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"152","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        # Initialize max_product, min_product, and result to the first element\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            \n            # When multiplying a negative number, the max becomes min and vice versa\n            if num < 0:\n                max_product, min_product = min_product, max_product\n            \n            # Calculate the max and min product for the current element\n            max_product = max(num, max_product * num)\n            min_product = min(num, min_product * num)\n            \n            # Update the result which is the maximum product found so far\n            result = max(result, max_product)\n        \n        return result\n"},"SubmissionId":1725397105,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-06T10:28:44.351866374+02:00"}}}
