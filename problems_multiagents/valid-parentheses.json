{"Question":{"Data":{"Question":{"questionFrontendId":"20","questionId":"20","Content":"<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 5:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([)]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n","SampleTestCase":"\"()\"","ExampleTestcases":"\"()\"\n\"()[]{}\"\n\"(]\"\n\"([])\"\n\"([)]\"","Difficulty":"Easy","Title":"Valid Parentheses","TitleSlug":"valid-parentheses","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"6.4M\", \"totalSubmission\": \"15M\", \"totalAcceptedRaw\": 6375561, \"totalSubmissionRaw\": 14962685, \"acRate\": \"42.6%\"}","Likes":26276,"Dislikes":1921,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE1","Name":"Stack","Slug":"stack"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isValid(self, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isValid(char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isValid(s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isValid(String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isValid(s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:19:33.636109136+02:00","AcRate":"42.6","TotalSubmissions":14962685,"TotalAccepted":6375561,"AcceptanceRate":0.4260973882695519,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/valid-parentheses/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n                \n        return not stack\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        # Algorithm Choice: Stack\n        # The use of a stack is suitable for ensuring proper pairing and nesting of brackets.\n\n        # Data Structures:\n        # - Stack (list): To keep track of open brackets waiting to be matched\n        \n        # Define a mapping of closing brackets to their corresponding opening brackets\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        # Initialize an empty stack\n        stack = []\n        \n        # Step-by-Step Approach:\n        # 1. Iterate through each character in the input string `s`\n        for char in s:\n            # 2. If the character is a closing bracket\n            if char in bracket_map:\n                # Attempt to pop from the stack (using top_element as a fallback if empty)\n                top_element = stack.pop() if stack else '#'\n                # 3. If the popped element does not match the corresponding opening bracket\n                #    return False indicating the string is invalid\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                # 4. If the character is an opening bracket, push it onto the stack\n                stack.append(char)\n        \n        # 5. After processing all characters, the stack should be empty if all brackets\n        #    were matched properly, return True if the stack is empty, otherwise False\n        return not stack\n        \n# Time Complexity:\n# The time complexity is O(n), where n is the number of characters in the input string,\n# because we need to process each character once.\n\n# Space Complexity:\n# The space complexity is O(n), in the worst case the stack could store all opening brackets \n# if they are never closed.\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        stack = []\n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n```\n\n=== VERIFICATION ===\n```python\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        stack = []\n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n```\n\n","TypedCode":"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        stack = []\n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n","Model":"se-gpt-4o","Latency":9383528819,"SolvedAt":"2025-08-07T09:51:16.220014891+02:00","PromptTokens":3295,"OutputTokens":657}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"20","typed_code":"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        stack = []\n        for char in s:\n            if char in bracket_map:\n                top_element = stack.pop() if stack else '#'\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n"},"SubmissionId":1726617457,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:24:59.422425347+02:00"}}}
