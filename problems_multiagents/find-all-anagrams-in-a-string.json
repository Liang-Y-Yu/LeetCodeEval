{"Question":{"Data":{"Question":{"questionFrontendId":"438","questionId":"438","Content":"<p>Given two strings <code>s</code> and <code>p</code>, return an array of all the start indices of <code>p</code>&#39;s <span data-keyword=\"anagram\">anagrams</span> in <code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n","SampleTestCase":"\"cbaebabacd\"\n\"abc\"","ExampleTestcases":"\"cbaebabacd\"\n\"abc\"\n\"abab\"\n\"ab\"","Difficulty":"Medium","Title":"Find All Anagrams in a String","TitleSlug":"find-all-anagrams-in-a-string","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1053472, \"totalSubmissionRaw\": 2009356, \"acRate\": \"52.4%\"}","Likes":12853,"Dislikes":361,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjU1ODIx","Name":"Sliding Window","Slug":"sliding-window"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char* s, char* p, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function findAnagrams(s: string, p: string): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun findAnagrams(s: String, p: String): List<Int> {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> findAnagrams(String s, String p) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func findAnagrams(s string, p string) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (find-anagrams s p)\n  (-> string? string? (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\nfind_anagrams(S, P) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\n  def find_anagrams(s, p) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:11:42.957713163+02:00","AcRate":"52.4","TotalSubmissions":2009356,"TotalAccepted":1053472,"AcceptanceRate":0.5242834022443011,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/find-all-anagrams-in-a-string/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        p_count = Counter(p)\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        if window_count == p_count:\n            result.append(0)\n        \n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            window_count[end_char] += 1\n            \n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        p_count = Counter(p)\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        if window_count == p_count:\n            result.append(0)\n        \n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            window_count[end_char] += 1\n            \n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        p_count = Counter(p)\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        if window_count == p_count:\n            result.append(0)\n        \n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            window_count[end_char] += 1\n            \n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        # Count the frequency of each character in the string 'p'\n        p_count = Counter(p)\n        # Initial window with the length of 'p' in the string 's'\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        # Check if the initial window is an anagram of 'p'\n        if window_count == p_count:\n            result.append(0)\n        \n        # Sliding the window across the string 's'\n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            # Update the counts by removing the start character of the previous window\n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            # Add the end character of the new window\n            window_count[end_char] += 1\n            \n            # If the current window is an anagram of 'p', add the starting index to the result\n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n```\n\n","TypedCode":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        p_count = Counter(p)\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        if window_count == p_count:\n            result.append(0)\n        \n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            window_count[end_char] += 1\n            \n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n","Model":"se-gpt-4o","Latency":10394149163,"SolvedAt":"2025-08-07T09:34:44.165546936+02:00","PromptTokens":3599,"OutputTokens":905}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"438","typed_code":"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        p_len = len(p)\n        s_len = len(s)\n        \n        if p_len > s_len:\n            return []\n        \n        p_count = Counter(p)\n        window_count = Counter(s[:p_len])\n        \n        result = []\n        \n        if window_count == p_count:\n            result.append(0)\n        \n        for i in range(1, s_len - p_len + 1):\n            start_char = s[i - 1]\n            end_char = s[i + p_len - 1]\n            \n            window_count[start_char] -= 1\n            if window_count[start_char] == 0:\n                del window_count[start_char]\n                \n            window_count[end_char] += 1\n            \n            if window_count == p_count:\n                result.append(i)\n        \n        return result\n"},"SubmissionId":1726598426,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:59:56.563274333+02:00"}}}
