{"Question":{"Data":{"Question":{"questionFrontendId":"649","questionId":"649","Content":"<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p>\n\n<p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p>\n\n<ul>\n\t<li><strong>Ban one senator&#39;s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li>\n\t<li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li>\n</ul>\n\n<p>Given a string <code>senate</code> representing each senator&#39;s party belonging. The character <code>&#39;R&#39;</code> and <code>&#39;D&#39;</code> represent the Radiant party and the Dire party. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p>\n\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\n\n<p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be <code>&quot;Radiant&quot;</code> or <code>&quot;Dire&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RD&quot;\n<strong>Output:</strong> &quot;Radiant&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RDD&quot;\n<strong>Output:</strong> &quot;Dire&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator&#39;s right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == senate.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>senate[i]</code> is either <code>&#39;R&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n","SampleTestCase":"\"RD\"","ExampleTestcases":"\"RD\"\n\"RDD\"","Difficulty":"Medium","Title":"Dota2 Senate","TitleSlug":"dota2-senate","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"244.3K\", \"totalSubmission\": \"497.1K\", \"totalAcceptedRaw\": 244275, \"totalSubmissionRaw\": 497072, \"acRate\": \"49.1%\"}","Likes":2645,"Dislikes":2023,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjE3","Name":"Greedy","Slug":"greedy"},{"Id":"VG9waWNUYWdOb2RlOjM0","Name":"Queue","Slug":"queue"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String predictPartyVictory(String senate) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def predictPartyVictory(self, senate):\n        \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* predictPartyVictory(char* senate) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string PredictPartyVictory(string senate) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} senate\n * @return {string}\n */\nvar predictPartyVictory = function(senate) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function predictPartyVictory(senate: string): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $senate\n     * @return String\n     */\n    function predictPartyVictory($senate) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func predictPartyVictory(_ senate: String) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun predictPartyVictory(senate: String): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String predictPartyVictory(String senate) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func predictPartyVictory(senate string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} senate\n# @return {String}\ndef predict_party_victory(senate)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def predictPartyVictory(senate: String): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn predict_party_victory(senate: String) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (predict-party-victory senate)\n  (-> string? string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec predict_party_victory(Senate :: unicode:unicode_binary()) -> unicode:unicode_binary().\npredict_party_victory(Senate) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec predict_party_victory(senate :: String.t) :: String.t\n  def predict_party_victory(senate) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:11:24.531619088+02:00","AcRate":"49.1","TotalSubmissions":497072,"TotalAccepted":244275,"AcceptanceRate":0.49142780120384977,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/dota2-senate/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nfrom collections import deque\n\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        # Populate initial queues for each party with indexes\n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        # Process rounds until one of the queues is empty\n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            # The senator with the smaller index acts first and remains for the next round\n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        # The party with remaining senators is the winner\n        return \"Radiant\" if radiant_queue else \"Dire\"\n```\n\n=== DESIGN ===\n```python\nfrom collections import deque\n\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        # Populate initial queues for each party with indexes\n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        # Process rounds until one of the queues is empty\n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            # The senator with the smaller index acts first and remains for the next round\n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        # The party with remaining senators is the winner\n        return \"Radiant\" if radiant_queue else \"Dire\"\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom collections import deque\n\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        return \"Radiant\" if radiant_queue else \"Dire\"\n```\n\n=== VERIFICATION ===\nCertainly, let's verify the provided solution for the Dota2 Senate problem:\n\n### Verification Report\n\n1. **Correctness**: \n   - The implemented solution accurately follows the problem's requirements. It keeps track of indices for 'R' (Radiant) and 'D' (Dire) senators using two queues. Senators whose indices are lower will take action first, and the opponent is then effectively banned by adding the current senator's index plus the length of the senate list `n` to the queue. This is correctly implemented as per the problem statement.\n\n2. **Edge Cases**:\n   - The solution handles edge cases effectively. For instance, a single senator ('R' or 'D') or alternating sequences like \"RD\", \"DR\" are correctly processed. As senators are inserted into queues using their positions in the string, these special cases naturally follow through the solution logic.\n\n3. **Complexity**:\n   - This solution operates in O(n) time complexity for the initialization of queues, and each senator can be processed more than once, but it is effectively O(n) each complete round of bans. Space complexity is also O(n) due to the need for storing positions for all senators initially. This is efficient and acceptable given the constraints.\n\n4. **Code Quality**:\n   - The code is well-structured and very readable. Necessary comments are provided for clarity. It also makes good use of Python's `collections.deque` for efficiently handling operations on queues.\n\n5. **Test Cases**:\n   - Walking through the examples given in the problem statement:\n     - For \"RD\", the Radiant senator first bans the Dire senator, resulting in \"Radiant\" victory, which matches the output.\n     - For \"RDD\", initially Radiant bans the first Dire senator, then the next Dire senator bans Radiant, leaving only Dire senators, hence \"Dire\" is victorious. This is correctly computed by the solution.\n\n6. **Potential Issues**:\n   - There are no apparent bugs or logical errors. The function correctly implements the strategy as described. The strategy ensures the most favorable outcome by using the indices for optimal banning. No improvements seem necessary since the solution efficiently handles all common scenarios.\n\n### Conclusion\n\nThe solution is well-designed and correctly implemented. It passes all provided test cases and meets the expected time and space complexity criteria. The code is clean and adheres to best practices, making it a reliable solution to the problem.\n\nHere is the provided solution for reference:\n\n```python\nfrom collections import deque\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        return \"Radiant\" if radiant_queue else \"Dire\"\n```\n\nThis code snippet accurately fulfills the given problem requirements, and no modifications are needed.\n\n","TypedCode":"\nfrom collections import deque\n\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        return \"Radiant\" if radiant_queue else \"Dire\"\n","Model":"se-gpt-4o","Latency":11338581094,"SolvedAt":"2025-08-07T09:33:58.106420384+02:00","PromptTokens":4645,"OutputTokens":1221}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"649","typed_code":"\nfrom collections import deque\n\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiant_queue = deque()\n        dire_queue = deque()\n        \n        n = len(senate)\n        \n        for i, s in enumerate(senate):\n            if s == 'R':\n                radiant_queue.append(i)\n            else:\n                dire_queue.append(i)\n        \n        while radiant_queue and dire_queue:\n            radiant = radiant_queue.popleft()\n            dire = dire_queue.popleft()\n            \n            if radiant < dire:\n                radiant_queue.append(radiant + n)\n            else:\n                dire_queue.append(dire + n)\n        \n        return \"Radiant\" if radiant_queue else \"Dire\"\n"},"SubmissionId":1726597725,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:58:55.542784129+02:00"}}}
