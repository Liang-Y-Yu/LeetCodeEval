{"Question":{"Data":{"Question":{"questionFrontendId":"238","questionId":"238","Content":"<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The input is generated such that <code>answer[i]</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n","SampleTestCase":"[1,2,3,4]","ExampleTestcases":"[1,2,3,4]\n[-1,1,0,-3,3]","Difficulty":"Medium","Title":"Product of Array Except Self","TitleSlug":"product-of-array-except-self","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"3.8M\", \"totalSubmission\": \"5.6M\", \"totalAcceptedRaw\": 3828362, \"totalSubmissionRaw\": 5634797, \"acRate\": \"67.9%\"}","Likes":24575,"Dislikes":1593,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjYxMDY4","Name":"Prefix Sum","Slug":"prefix-sum"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        "},{"Lang":"C","LangSlug":"c","Code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function productExceptSelf(nums: number[]): number[] {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  List<int> productExceptSelf(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func productExceptSelf(nums []int) []int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (product-except-self nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec product_except_self(Nums :: [integer()]) -> [integer()].\nproduct_except_self(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec product_except_self(nums :: [integer]) :: [integer]\n  def product_except_self(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:16:58.176960982+02:00","AcRate":"67.9","TotalSubmissions":5634797,"TotalAccepted":3828362,"AcceptanceRate":0.679414360446348,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/product-of-array-except-self/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        \n        # Initialize the answer array\n        answer = [0] * n\n        \n        # Calculate the prefix product for each element\n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Calculate the suffix product and multiply with the prefix product\n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        \n        # Initialize the answer array\n        answer = [0] * n\n        \n        # Calculate the prefix product for each element\n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Calculate the suffix product and multiply with the prefix product\n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def productExceptSelf(self, nums):\n        n = len(nums)\n        answer = [0] * n\n        \n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n```\n\n=== VERIFICATION ===\nSure. Below is the verified solution for the problem statement given:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        # Initialize the answer array with 1s\n        answer = [1] * n\n        \n        # Calculate the prefix product for each element\n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        # Calculate the suffix product and multiply with the prefix product\n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the designed algorithm. It first collects prefix products in the output array and then modifies those prefix values by multiplying with suffix products in a second pass. This approach correctly calculates the product of array elements except for the current index `i`.\n\n2. **Edge Cases**: \n   - Handles cases with zero values in the input, correctly resulting in zero in all relevant positions except where the rest of the elements could be multiplied together without involving zero.\n   - Handles negative values. Correctly follows the product properties of negative numbers.\n   - The constraints `(2 <= nums.length <= 10^5)` and `(-30 <= nums[i] <= 30)` ensure that the inputs are within bounds, and the implemented algorithm will not overflow due to guaranteed 32-bit integer result. \n\n3. **Complexity**: The implemented algorithm operates in O(n) time complexity via two passes over the input array. It uses O(1) extra space complexity apart from the output array, complying with the follow-up requirement.\n\n4. **Code Quality**: The code is clean, readable, and efficiently structured with meaningful variable names for easy understanding. It adheres to best practices in Python.\n\n5. **Test Cases**: The code produces correct outputs for the provided examples:\n   - Example 1: For `nums = [1,2,3,4]`, the output is `[24,12,8,6]`, which is correct.\n   - Example 2: For `nums = [-1,1,0,-3,3]`, the output is `[0,0,9,0,0]`, which is correct.\n\n6. **Potential Issues**: There are no evident bugs or logical errors in the code. It conforms to the problem requirements.\n\nThe solution is correct and optimal for the problem given, fulfilling all expected objectives.\n\n","TypedCode":"\nclass Solution:\n    def productExceptSelf(self, nums):\n        n = len(nums)\n        answer = [0] * n\n        \n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n","Model":"se-gpt-4o","Latency":11799129201,"SolvedAt":"2025-08-07T09:46:23.248735935+02:00","PromptTokens":3168,"OutputTokens":944}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"238","typed_code":"\nclass Solution:\n    def productExceptSelf(self, nums):\n        n = len(nums)\n        answer = [0] * n\n        \n        prefix_product = 1\n        for i in range(n):\n            answer[i] = prefix_product\n            prefix_product *= nums[i]\n        \n        suffix_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= suffix_product\n            suffix_product *= nums[i]\n        \n        return answer\n"},"SubmissionId":1726611378,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:17:14.227104794+02:00"}}}
