{"Question":{"Data":{"Question":{"questionFrontendId":"392","questionId":"392","Content":"<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?","SampleTestCase":"\"abc\"\n\"ahbgdc\"","ExampleTestcases":"\"abc\"\n\"ahbgdc\"\n\"axc\"\n\"ahbgdc\"","Difficulty":"Easy","Title":"Is Subsequence","TitleSlug":"is-subsequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"4.4M\", \"totalAcceptedRaw\": 2158594, \"totalSubmissionRaw\": 4449849, \"acRate\": \"48.5%\"}","Likes":10397,"Dislikes":586,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjk=","Name":"Two Pointers","Slug":"two-pointers"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool isSubsequence(char* s, char* t) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool IsSubsequence(string s, string t) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function isSubsequence(s: string, t: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isSubsequence($s, $t) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool isSubsequence(String s, String t) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func isSubsequence(s string, t string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_subsequence(s, t)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn is_subsequence(s: String, t: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (is-subsequence s t)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec is_subsequence(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_subsequence(S, T) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec is_subsequence(s :: String.t, t :: String.t) :: boolean\n  def is_subsequence(s, t) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:13:21.245866471+02:00","AcRate":"48.5","TotalSubmissions":4449849,"TotalAccepted":2158594,"AcceptanceRate":0.48509376385580727,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/is-subsequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        # Two pointers technique\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        # If we have gone through all characters in s, it's a subsequence\n        return i == len(s)\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        # Algorithm Choice: Two Pointers technique\n        # Initialize two pointers i and j for strings s and t respectively\n        i, j = 0, 0\n        # Step-by-Step Approach:\n        # Iterate through string t with the pointer j\n        while i < len(s) and j < len(t):\n            # If characters match at i and j, increment the pointer i for s\n            if s[i] == t[j]:\n                i += 1\n            # Always increment the pointer j for t\n            j += 1\n        # After the loop, check if all characters of s are traversed\n        return i == len(s)\n        \n# This solution uses two pointers that move independently through the strings s and t.\n# Data Structures: No additional data structures are needed aside from the pointer indices.\n# Time Complexity: O(n + m), where n is the length of s and m is the length of t.\n# Space Complexity: O(1), no additional space is used.\n```\n\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n```\n\n=== VERIFICATION ===\nHere is the verified code implementation:\n\n```python\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n```\n\nVerification Report:\n\n1. **Correctness**: The code correctly implements the two-pointer technique to determine if `s` is a subsequence of `t`. The core idea is traversing both strings with pointers and checking characters' match, which is correctly done.\n\n2. **Edge Cases**: The solution handles edge cases such as:\n   - When `s` is an empty string: the loop does not execute as `i < len(s)` is false initially, and the function correctly returns `True`.\n   - When `t` is an empty string and `s` is not: the loop also does not execute, and the function correctly returns `False`.\n   - When `s` and `t` are both empty: correctly returns `True`.\n   - When `s` is longer than `t` but not empty: the code correctly exits with `False`.\n\n3. **Complexity**: \n   - Time Complexity is `O(n + m)`, where `n` is the length of `s` and `m` is the length of `t`. This is optimal given the need to potentially examine each character in both strings.\n   - Space Complexity is `O(1)` since no additional data structures are used apart from integer counters.\n\n4. **Code Quality**: The code is clean and readable. It follows standard best practices with straightforward logic and no unnecessary complications, respecting idiomatic Python use.\n\n5. **Test Cases**: The code produces correct outputs for the provided example test cases:\n   - `\"abc\"` in `\"ahbgdc\"` correctly returns `True`.\n   - `\"axc\"` in `\"ahbgdc\"` correctly returns `False`.\n\n6. **Potential Issues**: There are no bugs or logical errors identified in the code. The solution handles the problem requirements appropriately and efficiently.\n\nOverall, the solution satisfies all the requirements for correctness, efficiency, and quality. No improvements are necessary based on the current problem statement and constraints.\n\n","TypedCode":"\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n","Model":"se-gpt-4o","Latency":10223180571,"SolvedAt":"2025-08-07T09:38:07.053101559+02:00","PromptTokens":3233,"OutputTokens":901}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"392","typed_code":"\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n"},"SubmissionId":1726602544,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:05:29.003906442+02:00"}}}
