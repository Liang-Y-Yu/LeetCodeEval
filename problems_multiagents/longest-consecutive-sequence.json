{"Question":{"Data":{"Question":{"questionFrontendId":"128","questionId":"128","Content":"<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [100,4,200,1,3,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,2]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","SampleTestCase":"[100,4,200,1,3,2]","ExampleTestcases":"[100,4,200,1,3,2]\n[0,3,7,2,5,8,4,6,0,1]\n[1,0,1,2]","Difficulty":"Medium","Title":"Longest Consecutive Sequence","TitleSlug":"longest-consecutive-sequence","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"5.8M\", \"totalAcceptedRaw\": 2721018, \"totalSubmissionRaw\": 5792713, \"acRate\": \"47.0%\"}","Likes":21782,"Dislikes":1179,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjIz","Name":"Union Find","Slug":"union-find"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int longestConsecutive(int* nums, int numsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int LongestConsecutive(int[] nums) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestConsecutive(nums: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestConsecutive($nums) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestConsecutive(nums: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int longestConsecutive(List<int> nums) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestConsecutive(nums []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_consecutive(nums)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-consecutive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_consecutive(Nums :: [integer()]) -> integer().\nlongest_consecutive(Nums) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_consecutive(nums :: [integer]) :: integer\n  def longest_consecutive(nums) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:14:15.638171009+02:00","AcRate":"47.0","TotalSubmissions":5792713,"TotalAccepted":2721018,"AcceptanceRate":0.46973119503762745,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-consecutive-sequence/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        num_set = set(nums)\n        longest_streak = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        num_set = set(nums)\n        longest_streak = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        num_set = set(nums)\n        longest_streak = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak\n```\n\n=== VERIFICATION ===\nHere is my verification report for the given solution:\n\n1. **Correctness**: \n   - The code correctly follows the logic outlined in the design. It uses a set to store the numbers for O(1) average time complexity checks. It initiates a streak counting if a number is the start of a potential consecutive sequence (`num - 1` is not in the set) and counts the length of the sequence by checking for consecutive numbers.\n\n2. **Edge Cases**:\n   - The code appropriately handles edge cases, such as an empty array (`nums = []`) by returning 0, which is the correct response for no elements. Edge cases where multiple identical numbers or non-consecutive numbers are present are handled correctly by virtue of using a set.\n\n3. **Complexity**:\n   - The algorithm runs in O(n) time complexity. This is achieved by leveraging a set for constant-time lookups and ensuring each number is part of a sequence only once. The space complexity is O(n) due to storage in the set, which complies with problem constraints.\n\n4. **Code Quality**:\n   - The code is clean, readable, and follows Python best practices. It uses clear variable names and has a straightforward logic flow. The use of a set is optimal for this problem, eliminating the need for sorting and extra traversals.\n\n5. **Test Cases**:\n   - The code produces correct outputs for all provided examples:\n     - For `nums = [100,4,200,1,3,2]`, the longest consecutive sequence is `[1, 2, 3, 4]` with a length of 4.\n     - For `nums = [0,3,7,2,5,8,4,6,0,1]`, the longest consecutive sequence is the entire sorted array `[0, 1, 2, 3, 4, 5, 6, 7, 8]` with a length of 9.\n     - For `nums = [1,0,1,2]`, the longest consecutive sequence is `[0, 1, 2]` with a length of 3.\n\n6. **Potential Issues**:\n   - There are no apparent bugs or logical errors in the code; the approach is sound and efficient given the problem constraints.\n   - The function signature and class structure are maintained per requirements.\n   - An optional minor improvement for readability could be to add comments explaining key steps, but this is external to the functionality.\n\nOverall, the solution correctly implements the designed algorithm, handles the edge cases, meets the complexity requirements, and produces correct outputs for all test cases. I can confirm its validity.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        num_set = set(nums)\n        longest_streak = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak\n","Model":"se-gpt-4o","Latency":11057753563,"SolvedAt":"2025-08-07T09:39:32.473953746+02:00","PromptTokens":2952,"OutputTokens":941}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"128","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        num_set = set(nums)\n        longest_streak = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak\n"},"SubmissionId":1726604569,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:08:17.144911137+02:00"}}}
