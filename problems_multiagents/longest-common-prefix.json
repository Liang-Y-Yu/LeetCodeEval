{"Question":{"Data":{"Question":{"questionFrontendId":"14","questionId":"14","Content":"<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters if it is non-empty.</li>\n</ul>\n","SampleTestCase":"[\"flower\",\"flow\",\"flight\"]","ExampleTestcases":"[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]","Difficulty":"Easy","Title":"Longest Common Prefix","TitleSlug":"longest-common-prefix","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"4.8M\", \"totalSubmission\": \"10.4M\", \"totalAcceptedRaw\": 4781025, \"totalSubmissionRaw\": 10424828, \"acRate\": \"45.9%\"}","Likes":19664,"Dislikes":4773,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"},{"Id":"VG9waWNUYWdOb2RlOjI3","Name":"Trie","Slug":"trie"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "},{"Lang":"C","LangSlug":"c","Code":"char* longestCommonPrefix(char** strs, int strsSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function longestCommonPrefix(strs: string[]): string {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  String longestCommonPrefix(List<String> strs) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func longestCommonPrefix(strs []string) string {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:13:24.281272038+02:00","AcRate":"45.9","TotalSubmissions":10424828,"TotalAccepted":4781025,"AcceptanceRate":0.458619077456242,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/longest-common-prefix/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        \n        min_length = min(len(s) for s in strs)\n        if min_length == 0:\n            return \"\"\n        \n        prefix = strs[0][:min_length]\n        \n        for i in range(min_length):\n            current_char = prefix[i]\n            for s in strs:\n                if s[i] != current_char:\n                    return prefix[:i]\n        \n        return prefix\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        # Edge case: if the input list is empty, return an empty string\n        if not strs:\n            return \"\"\n        \n        # Start with assuming the first string is the common prefix\n        prefix = strs[0]\n        \n        # Iterate over each string in the list\n        for s in strs:\n            # Update the prefix by comparing it against the current string\n            # We want to find the longest common prefix by shrinking it\n            # if it does not match the current string's start.\n            while not s.startswith(prefix):\n                # Reduce the prefix by one character from the end\n                prefix = prefix[:-1]\n                # If the prefix gets reduced to an empty string, return \"\"\n                if not prefix:\n                    return \"\"\n        \n        # After iterating through all strings, return the longest common prefix found\n        return prefix\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs:\n            while not s.startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        \n        prefix = strs[0]\n        \n        for s in strs:\n            while not s.startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        \n        return prefix\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs:\n            while not s.startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n","Model":"se-gpt-4o","Latency":6169421280,"SolvedAt":"2025-08-07T09:39:10.976458317+02:00","PromptTokens":2759,"OutputTokens":457}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"14","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs:\n            while not s.startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n"},"SubmissionId":1726604150,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:07:39.724107162+02:00"}}}
