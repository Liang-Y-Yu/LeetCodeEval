{"Question":{"Data":{"Question":{"questionFrontendId":"120","questionId":"120","Content":"<p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>\n\n<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The triangle looks like:\n   <u>2</u>\n  <u>3</u> 4\n 6 <u>5</u> 7\n4 <u>1</u> 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[-10]]\n<strong>Output:</strong> -10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= triangle.length &lt;= 200</code></li>\n\t<li><code>triangle[0].length == 1</code></li>\n\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you&nbsp;do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?","SampleTestCase":"[[2],[3,4],[6,5,7],[4,1,8,3]]","ExampleTestcases":"[[2],[3,4],[6,5,7],[4,1,8,3]]\n[[-10]]","Difficulty":"Medium","Title":"Triangle","TitleSlug":"triangle","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"1M\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 1038989, \"totalSubmissionRaw\": 1747866, \"acRate\": \"59.4%\"}","Likes":10157,"Dislikes":580,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MinimumTotal(IList<IList<int>> triangle) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function minimumTotal(triangle: number[][]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[][] $triangle\n     * @return Integer\n     */\n    function minimumTotal($triangle) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun minimumTotal(triangle: List<List<Int>>): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int minimumTotal(List<List<int>> triangle) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func minimumTotal(triangle [][]int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn minimum_total(triangle: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (minimum-total triangle)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec minimum_total(Triangle :: [[integer()]]) -> integer().\nminimum_total(Triangle) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec minimum_total(triangle :: [[integer]]) :: integer\n  def minimum_total(triangle) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:19:21.401305857+02:00","AcRate":"59.4","TotalSubmissions":1747866,"TotalAccepted":1038989,"AcceptanceRate":0.5944328684235519,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/triangle/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if not triangle:\n            return 0\n        \n        # Start from the bottom of the triangle and move upwards\n        # We'll use dynamic programming, altering the triangle in place for O(n) space complexity\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # The top of the triangle will eventually hold the minimum path sum\n        return triangle[0][0]\n```\n\n=== DESIGN ===\n```python\nfrom typing import List\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        # Start from the bottom of the triangle and move upwards\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                # Update the current cell to store the sum of itself and the minimum of its two children\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        \n        # The top of the triangle will eventually hold the minimum path sum\n        return triangle[0][0]\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        return triangle[0][0]\n```\n\n=== VERIFICATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        return triangle[0][0]\n```\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        return triangle[0][0]\n","Model":"se-gpt-4o","Latency":6593930920,"SolvedAt":"2025-08-07T09:50:21.929985756+02:00","PromptTokens":3346,"OutputTokens":474}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"120","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        for row in range(len(triangle) - 2, -1, -1):\n            for col in range(len(triangle[row])):\n                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n        return triangle[0][0]\n"},"SubmissionId":1726616393,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:23:31.243092409+02:00"}}}
