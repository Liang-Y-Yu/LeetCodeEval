{"Question":{"Data":{"Question":{"questionFrontendId":"123","questionId":"123","Content":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [3,3,5,0,0,3,1,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,4,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","SampleTestCase":"[3,3,5,0,0,3,1,4]","ExampleTestcases":"[3,3,5,0,0,3,1,4]\n[1,2,3,4,5]\n[7,6,4,3,1]","Difficulty":"Hard","Title":"Best Time to Buy and Sell Stock III","TitleSlug":"best-time-to-buy-and-sell-stock-iii","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"827K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 826987, \"totalSubmissionRaw\": 1599265, \"acRate\": \"51.7%\"}","Likes":10275,"Dislikes":215,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjU=","Name":"Array","Slug":"array"},{"Id":"VG9waWNUYWdOb2RlOjEz","Name":"Dynamic Programming","Slug":"dynamic-programming"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        "},{"Lang":"C","LangSlug":"c","Code":"int maxProfit(int* prices, int pricesSize) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function maxProfit(prices: number[]): number {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  int maxProfit(List<int> prices) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func maxProfit(prices []int) int {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (max-profit prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec max_profit(Prices :: [integer()]) -> integer().\nmax_profit(Prices) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:09:50.960531585+02:00","AcRate":"51.7","TotalSubmissions":1599265,"TotalAccepted":826987,"AcceptanceRate":0.5171044198428654,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def maxProfit(self, prices):\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        # First transaction\n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        # Second transaction\n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        # Calculate max possible profit with two transactions\n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n```\n\n=== DESIGN ===\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        # First transaction: calculate max profit if we sell on or before day i\n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        # Second transaction: calculate max profit if we buy on or after day i\n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        # Calculate max possible profit with two transactions\n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n```\n\n=== IMPLEMENTATION ===\n```python\nfrom typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n```\n\n=== VERIFICATION ===\nTo verify the solution, we will systematically analyze the correctness, edge cases, complexity, code quality, and provided test cases to ensure it meets all the requirements:\n\n### Correctness\nThe implementation correctly follows the design strategy:\n- It calculates the maximum possible profit for a single transaction up to each day (`left_profits`).\n- Then, it calculates the maximum possible profit for a single transaction starting from each day onward (`right_profits`).\n- Finally, it finds the sum of profits from two non-overlapping transactions by iterating through both `left_profits` and `right_profits` arrays and determining the maximum combined profit.\n\n### Edge Cases\nThe solution should handle the following edge cases:\n- Empty list or list with fewer than two elements, which returns a profit of zero since no transactions can be made.\n- List where prices are decreasing only, expecting zero profit since no beneficial transactions can occur.\n- List where prices remain the same, expecting zero profit.\n- List with some complexity such as [3,3,5,0,0,3,1,4], which is well handled by the logic.\n\nThe provided solution handles these edge cases appropriately.\n\n### Complexity\nThe expected time complexity is O(n), where n is the length of the prices list due to the linear scans to populate `left_profits` and `right_profits`. The space complexity is also O(n) due to these arrays. Both of these are optimal for the problem constraints.\n\n### Code Quality\nThe code is clean, readable, and follows best practices:\n- It properly uses descriptive variable names.\n- Logical flow is straightforward and follows the analysis without unnecessary complexity.\n- Efficient use of list indexing and arithmetic ensures clarity and performance.\n\n### Test Cases\nThe solution is verified using provided examples:\n1. **Example 1**: [3,3,5,0,0,3,1,4] returns 6 as expected.\n2. **Example 2**: [1,2,3,4,5] returns 4 as expected.\n3. **Example 3**: [7,6,4,3,1] returns 0 as expected.\n\nThese validate that the solution is producing correct results.\n\n### Potential Issues\nNo bugs or logical errors detected. The solution is robust for the given constraints, and there are no improvements needed due to optimal performance and clean code.\n\n### Verification Report\nThe implementation correctly solves the problem, handles all expected edge cases, meets complexity requirements, and outputs the correct results across provided test cases. Here is the verified code snippet:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n```\n\nThis solution is ready for production use and meets all stated requirements.\n\n","TypedCode":"\nfrom typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n","Model":"se-gpt-4o","Latency":14946288886,"SolvedAt":"2025-08-07T09:30:47.385940803+02:00","PromptTokens":4255,"OutputTokens":1480}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"123","typed_code":"\nfrom typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        \n        n = len(prices)\n        \n        left_profits = [0] * n\n        min_price = prices[0]\n        \n        for i in range(1, n):\n            left_profits[i] = max(left_profits[i-1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        right_profits = [0] * n\n        max_price = prices[-1]\n        \n        for i in range(n-2, -1, -1):\n            right_profits[i] = max(right_profits[i+1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left_profits[i] + right_profits[i])\n        \n        return max_profit\n"},"SubmissionId":1726594413,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T09:54:25.390823138+02:00"}}}
