{"Question":{"Data":{"Question":{"questionFrontendId":"290","questionId":"290","Content":"<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>. Specifically:</p>\n\n<ul>\n\t<li>Each letter in <code>pattern</code> maps to <strong>exactly</strong> one unique word in <code>s</code>.</li>\n\t<li>Each unique word in <code>s</code> maps to <strong>exactly</strong> one letter in <code>pattern</code>.</li>\n\t<li>No two letters map to the same word, and no two words map to the same letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bijection can be established as:</p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code> maps to <code>&quot;dog&quot;</code>.</li>\n\t<li><code>&#39;b&#39;</code> maps to <code>&quot;cat&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n","SampleTestCase":"\"abba\"\n\"dog cat cat dog\"","ExampleTestcases":"\"abba\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog cat cat fish\"\n\"aaaa\"\n\"dog cat cat dog\"","Difficulty":"Easy","Title":"Word Pattern","TitleSlug":"word-pattern","IsPaidOnly":false,"Stats":"{\"totalAccepted\": \"975.9K\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 975867, \"totalSubmissionRaw\": 2257776, \"acRate\": \"43.2%\"}","Likes":7720,"Dislikes":1108,"FreqBar":0,"CategoryTitle":"Algorithms","TopicTags":[{"Id":"VG9waWNUYWdOb2RlOjY=","Name":"Hash Table","Slug":"hash-table"},{"Id":"VG9waWNUYWdOb2RlOjEw","Name":"String","Slug":"string"}],"CodeSnippets":[{"Lang":"C++","LangSlug":"cpp","Code":"class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};"},{"Lang":"Java","LangSlug":"java","Code":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}"},{"Lang":"Python","LangSlug":"python","Code":"class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"Lang":"Python3","LangSlug":"python3","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        "},{"Lang":"C","LangSlug":"c","Code":"bool wordPattern(char* pattern, char* s) {\n    \n}"},{"Lang":"C#","LangSlug":"csharp","Code":"public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        \n    }\n}"},{"Lang":"JavaScript","LangSlug":"javascript","Code":"/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};"},{"Lang":"TypeScript","LangSlug":"typescript","Code":"function wordPattern(pattern: string, s: string): boolean {\n    \n};"},{"Lang":"PHP","LangSlug":"php","Code":"class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n        \n    }\n}"},{"Lang":"Swift","LangSlug":"swift","Code":"class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}"},{"Lang":"Kotlin","LangSlug":"kotlin","Code":"class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n        \n    }\n}"},{"Lang":"Dart","LangSlug":"dart","Code":"class Solution {\n  bool wordPattern(String pattern, String s) {\n    \n  }\n}"},{"Lang":"Go","LangSlug":"golang","Code":"func wordPattern(pattern string, s string) bool {\n    \n}"},{"Lang":"Ruby","LangSlug":"ruby","Code":"# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n    \nend"},{"Lang":"Scala","LangSlug":"scala","Code":"object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n        \n    }\n}"},{"Lang":"Rust","LangSlug":"rust","Code":"impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -> bool {\n        \n    }\n}"},{"Lang":"Racket","LangSlug":"racket","Code":"(define/contract (word-pattern pattern s)\n  (-> string? string? boolean?)\n  )"},{"Lang":"Erlang","LangSlug":"erlang","Code":"-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\nword_pattern(Pattern, S) ->\n  ."},{"Lang":"Elixir","LangSlug":"elixir","Code":"defmodule Solution do\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern(pattern, s) do\n    \n  end\nend"}],"CompanyTagStats":""}},"DownloadedAt":"2025-08-07T09:19:49.507812286+02:00","AcRate":"43.2","TotalSubmissions":2257776,"TotalAccepted":975867,"AcceptanceRate":0.4322248974211791,"ContentFeatures":"","CodeSnippetFeatures":{"c":"","cpp":"","csharp":"","dart":"","elixir":"","erlang":"","golang":"","java":"","javascript":"","kotlin":"","php":"","python":"","python3":"","racket":"","ruby":"","rust":"","scala":"","swift":"","typescript":""},"Url":"https://leetcode.com/problems/word-pattern/"},"Solutions":{"se-gpt-4o":{"Lang":"python3","Prompt":"Multi-agent approach:\n1. Analysis\n2. Design\n3. Implementation\n4. Verification","Answer":"=== ANALYSIS ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        # Early return if pattern and words have different lengths\n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n```\n\n=== DESIGN ===\nAlgorithm Choice:\nThe algorithm will use hashmap data structures to create a bijection between characters in the pattern and words in the string `s`. By checking these mappings bidirectionally, we can verify whether the given pattern correctly follows the string.\n\nStep-by-Step Approach:\n1. Split the string `s` into a list of words using the `split()` method.\n2. Compare the length of the pattern and the list of words. If they are not equal, return `False` immediately because a bijection cannot be established.\n3. Create two dictionaries: `char_to_word` to map characters from the pattern to words, and `word_to_char` to map words to characters from the pattern.\n4. Iterate over the pattern and the list of words simultaneously using `zip`.\n    - For each character-word pair:\n        - If the character already has a mapped word in `char_to_word`:\n            - Check if the mapped word is the current word. If not, return `False`.\n        - If the word already has a mapped character in `word_to_char`:\n            - Check if the mapped character is the current character. If not, return `False`.\n        - If neither mapping exists, establish the new mappings in both dictionaries.\n5. If every character and word are correctly mapped, return `True`.\n\nData Structures:\n- Two dictionaries (`char_to_word` and `word_to_char`) for maintaining the bijection mappings.\n\nTime Complexity:\n- The time complexity of this approach is O(n), where n is the length of the pattern (or length of the words list), since we need to iterate through the pattern and check/modify the mappings.\n\nSpace Complexity:\n- The space complexity is O(m), where m is the number of unique characters in the pattern and words in the string `s`, due to the storage requirements for the mapping dictionaries.\n\nPseudocode:\n```\nfunction wordPattern(pattern, s):\n    words = s.split()\n    \n    if length(pattern) != length(words):\n        return False\n    \n    char_to_word = {}\n    word_to_char = {}\n    \n    for each character p, word w in zip(pattern, words):\n        if p in char_to_word:\n            if char_to_word[p] != w:\n                return False\n        else:\n            char_to_word[p] = w\n        \n        if w in word_to_char:\n            if word_to_char[w] != p:\n                return False\n        else:\n            word_to_char[w] = p\n    \n    return True\n```\n\nHere's the implementable solution code:\n\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n```\n\n=== IMPLEMENTATION ===\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n```\n\n=== VERIFICATION ===\nThe code provided appears correct and meets the problem's requirements. I will verify it based on the aspects mentioned:\n\n1. **Correctness**: The implemented solution correctly maps each letter in the pattern to a unique word in the string and vice versa, ensuring a bijection between them. The code returns `False` if the lengths differ or if a conflict occurs in the mappings.\n\n2. **Edge Cases Handling**:\n   - When the pattern and the list of words have different lengths, it returns `False` immediately: This handles cases such as `pattern = \"abc\", s = \"dog cat\"`.\n   - Conflicting mappings of multiple characters to the same word or vice versa are handled by the two dictionaries. \n   - Special cases such as an empty pattern or a single letter pattern with corresponding conditions are implicitly covered due to how the loops and dictionaries are constructed.\n\n3. **Complexity**: \n   - **Time Complexity** is O(n), where n is the length of the pattern or the number of words since the algorithm processes each element in linear time.\n   - **Space Complexity** is O(m), where m is the number of unique characters in the pattern and unique words in the string. This is due to storing mappings in two dictionaries.\n\n4. **Code Quality**: The code is clean, readable, and uses Python's language features appropriately such as `zip` for iterating simultaneously over two lists, and `split()` for breaking down the string into words.\n\n5. **Test Cases**: \n   - Example 1 input results in `True`, correctly mapping 'a' to \"dog\" and 'b' to \"cat\".\n   - Example 2 input results in `False` due to a mapping conflict ('a' being expected to map to \"dog\" twice).\n   - Example 3 results in `False` due to 'a' mapping to multiple different words. \n\n6. **Potential Issues**: There don't appear to be any logical errors. The solution handles typical edge cases one might encounter with invalid mappings or constraints.\n\nThe solution is well-designed and correctly implements the intended algorithm without errors. Here is the source code provided, verified as correct:\n\n```python\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n```\n\n","TypedCode":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n","Model":"se-gpt-4o","Latency":21311629956,"SolvedAt":"2025-08-07T09:52:03.707895308+02:00","PromptTokens":4437,"OutputTokens":1537}},"Submissions":{"se-gpt-4o":{"SubmitRequest":{"lang":"python3","question_id":"290","typed_code":"\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        \n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for p, w in zip(pattern, words):\n            if p in char_to_word:\n                if char_to_word[p] != w:\n                    return False\n            else:\n                char_to_word[p] = w\n            \n            if w in word_to_char:\n                if word_to_char[w] != p:\n                    return False\n            else:\n                word_to_char[w] = p\n        \n        return True\n"},"SubmissionId":1726618051,"CheckResponse":{"status_code":10,"status_msg":"Accepted","Finished":true,"State":"SUCCESS"},"SubmittedAt":"2025-08-07T10:25:44.339116638+02:00"}}}
